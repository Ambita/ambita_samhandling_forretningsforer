/* tslint:disable */
/* eslint-disable */
/**
 * (title)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BoliginformasjonOrdre,
  CallbackEvent,
  EndringKjopereOrdre,
  EndringOverdragelseOrdre,
  ForhandsutlysingOrdre,
  RestanseOrdre,
  SalgsmeldingOrdre,
  SluttbrevOrdre,
  SumFelleskostnaderOrdre,
  SumGjeldOrdre,
} from '../models/index';
import {
    BoliginformasjonOrdreFromJSON,
    BoliginformasjonOrdreToJSON,
    CallbackEventFromJSON,
    CallbackEventToJSON,
    EndringKjopereOrdreFromJSON,
    EndringKjopereOrdreToJSON,
    EndringOverdragelseOrdreFromJSON,
    EndringOverdragelseOrdreToJSON,
    ForhandsutlysingOrdreFromJSON,
    ForhandsutlysingOrdreToJSON,
    RestanseOrdreFromJSON,
    RestanseOrdreToJSON,
    SalgsmeldingOrdreFromJSON,
    SalgsmeldingOrdreToJSON,
    SluttbrevOrdreFromJSON,
    SluttbrevOrdreToJSON,
    SumFelleskostnaderOrdreFromJSON,
    SumFelleskostnaderOrdreToJSON,
    SumGjeldOrdreFromJSON,
    SumGjeldOrdreToJSON,
} from '../models/index';

export interface BoliginformasjonOrderRequest {
    boliginformasjonOrdre: BoliginformasjonOrdre;
}

export interface CallbackReceiveRequest {
    callbackEvent: CallbackEvent;
}

export interface EndringKjopereOrderRequest {
    endringKjopereOrdre: EndringKjopereOrdre;
}

export interface EndringOverdragelseOrderRequest {
    endringOverdragelseOrdre: EndringOverdragelseOrdre;
}

export interface ForhandsutlysingOrderRequest {
    forhandsutlysingOrdre: ForhandsutlysingOrdre;
}

export interface RestanseOrderRequest {
    restanseOrdre: RestanseOrdre;
}

export interface SalgsmeldingOrderRequest {
    salgsmeldingOrdre: SalgsmeldingOrdre;
}

export interface SluttbrevOrderRequest {
    sluttbrevOrdre: SluttbrevOrdre;
}

export interface SumFelleskostnaderOrderRequest {
    sumFelleskostnaderOrdre: SumFelleskostnaderOrdre;
}

export interface SumGjeldOrderRequest {
    sumGjeldOrdre: SumGjeldOrdre;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     */
    async boliginformasjonOrderRaw(requestParameters: BoliginformasjonOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['boliginformasjonOrdre'] == null) {
            throw new runtime.RequiredError(
                'boliginformasjonOrdre',
                'Required parameter "boliginformasjonOrdre" was null or undefined when calling boliginformasjonOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/boliginformasjon`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BoliginformasjonOrdreToJSON(requestParameters['boliginformasjonOrdre']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async boliginformasjonOrder(requestParameters: BoliginformasjonOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.boliginformasjonOrderRaw(requestParameters, initOverrides);
    }

    /**
     */
    async callbackReceiveRaw(requestParameters: CallbackReceiveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['callbackEvent'] == null) {
            throw new runtime.RequiredError(
                'callbackEvent',
                'Required parameter "callbackEvent" was null or undefined when calling callbackReceive().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/callback`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CallbackEventToJSON(requestParameters['callbackEvent']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async callbackReceive(requestParameters: CallbackReceiveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.callbackReceiveRaw(requestParameters, initOverrides);
    }

    /**
     */
    async endringKjopereOrderRaw(requestParameters: EndringKjopereOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['endringKjopereOrdre'] == null) {
            throw new runtime.RequiredError(
                'endringKjopereOrdre',
                'Required parameter "endringKjopereOrdre" was null or undefined when calling endringKjopereOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/endringkjopere`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EndringKjopereOrdreToJSON(requestParameters['endringKjopereOrdre']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async endringKjopereOrder(requestParameters: EndringKjopereOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.endringKjopereOrderRaw(requestParameters, initOverrides);
    }

    /**
     */
    async endringOverdragelseOrderRaw(requestParameters: EndringOverdragelseOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['endringOverdragelseOrdre'] == null) {
            throw new runtime.RequiredError(
                'endringOverdragelseOrdre',
                'Required parameter "endringOverdragelseOrdre" was null or undefined when calling endringOverdragelseOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/endringoverdragelse`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EndringOverdragelseOrdreToJSON(requestParameters['endringOverdragelseOrdre']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async endringOverdragelseOrder(requestParameters: EndringOverdragelseOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.endringOverdragelseOrderRaw(requestParameters, initOverrides);
    }

    /**
     */
    async forhandsutlysingOrderRaw(requestParameters: ForhandsutlysingOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['forhandsutlysingOrdre'] == null) {
            throw new runtime.RequiredError(
                'forhandsutlysingOrdre',
                'Required parameter "forhandsutlysingOrdre" was null or undefined when calling forhandsutlysingOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/forhandsutlysing`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ForhandsutlysingOrdreToJSON(requestParameters['forhandsutlysingOrdre']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async forhandsutlysingOrder(requestParameters: ForhandsutlysingOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.forhandsutlysingOrderRaw(requestParameters, initOverrides);
    }

    /**
     */
    async restanseOrderRaw(requestParameters: RestanseOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['restanseOrdre'] == null) {
            throw new runtime.RequiredError(
                'restanseOrdre',
                'Required parameter "restanseOrdre" was null or undefined when calling restanseOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/restanse`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RestanseOrdreToJSON(requestParameters['restanseOrdre']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async restanseOrder(requestParameters: RestanseOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.restanseOrderRaw(requestParameters, initOverrides);
    }

    /**
     */
    async salgsmeldingOrderRaw(requestParameters: SalgsmeldingOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['salgsmeldingOrdre'] == null) {
            throw new runtime.RequiredError(
                'salgsmeldingOrdre',
                'Required parameter "salgsmeldingOrdre" was null or undefined when calling salgsmeldingOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/salgsmelding`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SalgsmeldingOrdreToJSON(requestParameters['salgsmeldingOrdre']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async salgsmeldingOrder(requestParameters: SalgsmeldingOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.salgsmeldingOrderRaw(requestParameters, initOverrides);
    }

    /**
     */
    async sluttbrevOrderRaw(requestParameters: SluttbrevOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['sluttbrevOrdre'] == null) {
            throw new runtime.RequiredError(
                'sluttbrevOrdre',
                'Required parameter "sluttbrevOrdre" was null or undefined when calling sluttbrevOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/sluttbrev`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SluttbrevOrdreToJSON(requestParameters['sluttbrevOrdre']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async sluttbrevOrder(requestParameters: SluttbrevOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sluttbrevOrderRaw(requestParameters, initOverrides);
    }

    /**
     */
    async sumFelleskostnaderOrderRaw(requestParameters: SumFelleskostnaderOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['sumFelleskostnaderOrdre'] == null) {
            throw new runtime.RequiredError(
                'sumFelleskostnaderOrdre',
                'Required parameter "sumFelleskostnaderOrdre" was null or undefined when calling sumFelleskostnaderOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/sumfelleskostnader`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SumFelleskostnaderOrdreToJSON(requestParameters['sumFelleskostnaderOrdre']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async sumFelleskostnaderOrder(requestParameters: SumFelleskostnaderOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sumFelleskostnaderOrderRaw(requestParameters, initOverrides);
    }

    /**
     */
    async sumGjeldOrderRaw(requestParameters: SumGjeldOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['sumGjeldOrdre'] == null) {
            throw new runtime.RequiredError(
                'sumGjeldOrdre',
                'Required parameter "sumGjeldOrdre" was null or undefined when calling sumGjeldOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/sumgjeld`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SumGjeldOrdreToJSON(requestParameters['sumGjeldOrdre']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async sumGjeldOrder(requestParameters: SumGjeldOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sumGjeldOrderRaw(requestParameters, initOverrides);
    }

}
