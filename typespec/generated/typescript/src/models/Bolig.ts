/* tslint:disable */
/* eslint-disable */
/**
 * (title)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Adresse } from './Adresse';
import {
    AdresseFromJSON,
    AdresseFromJSONTyped,
    AdresseToJSON,
    AdresseToJSONTyped,
} from './Adresse';

/**
 * 
 * @export
 * @interface Bolig
 */
export interface Bolig {
    /**
     * 
     * @type {number}
     * @memberof Bolig
     */
    prom?: number;
    /**
     * 
     * @type {number}
     * @memberof Bolig
     */
    srom?: number;
    /**
     * 
     * @type {number}
     * @memberof Bolig
     */
    bra?: number;
    /**
     * 
     * @type {number}
     * @memberof Bolig
     */
    braI?: number;
    /**
     * 
     * @type {number}
     * @memberof Bolig
     */
    braE?: number;
    /**
     * 
     * @type {number}
     * @memberof Bolig
     */
    braB?: number;
    /**
     * 
     * @type {number}
     * @memberof Bolig
     */
    braS?: number;
    /**
     * 
     * @type {number}
     * @memberof Bolig
     */
    tba?: number;
    /**
     * 
     * @type {number}
     * @memberof Bolig
     */
    bta?: number;
    /**
     * 
     * @type {number}
     * @memberof Bolig
     */
    antallRom?: number;
    /**
     * 
     * @type {number}
     * @memberof Bolig
     */
    antallSoverom?: number;
    /**
     * 
     * @type {string}
     * @memberof Bolig
     */
    energibokstav?: string;
    /**
     * 
     * @type {string}
     * @memberof Bolig
     */
    energifargekode?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Bolig
     */
    heis?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Bolig
     */
    veranda?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Bolig
     */
    parkering?: string;
    /**
     * 
     * @type {string}
     * @memberof Bolig
     */
    oppvarming?: string;
    /**
     * 
     * @type {Adresse}
     * @memberof Bolig
     */
    adresse?: Adresse;
    /**
     * 
     * @type {string}
     * @memberof Bolig
     */
    leilighetsnummer?: string;
}

/**
 * Check if a given object implements the Bolig interface.
 */
export function instanceOfBolig(value: object): value is Bolig {
    return true;
}

export function BoligFromJSON(json: any): Bolig {
    return BoligFromJSONTyped(json, false);
}

export function BoligFromJSONTyped(json: any, ignoreDiscriminator: boolean): Bolig {
    if (json == null) {
        return json;
    }
    return {
        
        'prom': json['prom'] == null ? undefined : json['prom'],
        'srom': json['srom'] == null ? undefined : json['srom'],
        'bra': json['bra'] == null ? undefined : json['bra'],
        'braI': json['braI'] == null ? undefined : json['braI'],
        'braE': json['braE'] == null ? undefined : json['braE'],
        'braB': json['braB'] == null ? undefined : json['braB'],
        'braS': json['braS'] == null ? undefined : json['braS'],
        'tba': json['tba'] == null ? undefined : json['tba'],
        'bta': json['bta'] == null ? undefined : json['bta'],
        'antallRom': json['antallRom'] == null ? undefined : json['antallRom'],
        'antallSoverom': json['antallSoverom'] == null ? undefined : json['antallSoverom'],
        'energibokstav': json['energibokstav'] == null ? undefined : json['energibokstav'],
        'energifargekode': json['energifargekode'] == null ? undefined : json['energifargekode'],
        'heis': json['heis'] == null ? undefined : json['heis'],
        'veranda': json['veranda'] == null ? undefined : json['veranda'],
        'parkering': json['parkering'] == null ? undefined : json['parkering'],
        'oppvarming': json['oppvarming'] == null ? undefined : json['oppvarming'],
        'adresse': json['adresse'] == null ? undefined : AdresseFromJSON(json['adresse']),
        'leilighetsnummer': json['leilighetsnummer'] == null ? undefined : json['leilighetsnummer'],
    };
}

export function BoligToJSON(json: any): Bolig {
    return BoligToJSONTyped(json, false);
}

export function BoligToJSONTyped(value?: Bolig | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'prom': value['prom'],
        'srom': value['srom'],
        'bra': value['bra'],
        'braI': value['braI'],
        'braE': value['braE'],
        'braB': value['braB'],
        'braS': value['braS'],
        'tba': value['tba'],
        'bta': value['bta'],
        'antallRom': value['antallRom'],
        'antallSoverom': value['antallSoverom'],
        'energibokstav': value['energibokstav'],
        'energifargekode': value['energifargekode'],
        'heis': value['heis'],
        'veranda': value['veranda'],
        'parkering': value['parkering'],
        'oppvarming': value['oppvarming'],
        'adresse': AdresseToJSON(value['adresse']),
        'leilighetsnummer': value['leilighetsnummer'],
    };
}

