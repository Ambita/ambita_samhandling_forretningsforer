/*
 * (title)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using Samhandling.Client.Api;
using Samhandling.Client.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace Samhandling.Client.Test.Api
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    public sealed class DefaultApiTests : ApiTestsBase
    {
        private readonly IDefaultApi _instance;

        public DefaultApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IDefaultApi>();
        }

        /// <summary>
        /// Test BoliginformasjonOrder
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task BoliginformasjonOrderAsyncTest()
        {
            BoliginformasjonOrdre boliginformasjonOrdre = default!;
            await _instance.BoliginformasjonOrderAsync(boliginformasjonOrdre);
        }

        /// <summary>
        /// Test CallbackReceive
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CallbackReceiveAsyncTest()
        {
            CallbackEvent callbackEvent = default!;
            await _instance.CallbackReceiveAsync(callbackEvent);
        }

        /// <summary>
        /// Test EndringKjopereOrder
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task EndringKjopereOrderAsyncTest()
        {
            EndringKjopereOrdre endringKjopereOrdre = default!;
            await _instance.EndringKjopereOrderAsync(endringKjopereOrdre);
        }

        /// <summary>
        /// Test EndringOverdragelseOrder
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task EndringOverdragelseOrderAsyncTest()
        {
            EndringOverdragelseOrdre endringOverdragelseOrdre = default!;
            await _instance.EndringOverdragelseOrderAsync(endringOverdragelseOrdre);
        }

        /// <summary>
        /// Test ForhandsutlysingOrder
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ForhandsutlysingOrderAsyncTest()
        {
            ForhandsutlysingOrdre forhandsutlysingOrdre = default!;
            await _instance.ForhandsutlysingOrderAsync(forhandsutlysingOrdre);
        }

        /// <summary>
        /// Test RestanseOrder
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task RestanseOrderAsyncTest()
        {
            RestanseOrdre restanseOrdre = default!;
            await _instance.RestanseOrderAsync(restanseOrdre);
        }

        /// <summary>
        /// Test SalgsmeldingOrder
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SalgsmeldingOrderAsyncTest()
        {
            SalgsmeldingOrdre salgsmeldingOrdre = default!;
            await _instance.SalgsmeldingOrderAsync(salgsmeldingOrdre);
        }

        /// <summary>
        /// Test SluttbrevOrder
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SluttbrevOrderAsyncTest()
        {
            SluttbrevOrdre sluttbrevOrdre = default!;
            await _instance.SluttbrevOrderAsync(sluttbrevOrdre);
        }

        /// <summary>
        /// Test SumFelleskostnaderOrder
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SumFelleskostnaderOrderAsyncTest()
        {
            SumFelleskostnaderOrdre sumFelleskostnaderOrdre = default!;
            await _instance.SumFelleskostnaderOrderAsync(sumFelleskostnaderOrdre);
        }

        /// <summary>
        /// Test SumGjeldOrder
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SumGjeldOrderAsyncTest()
        {
            SumGjeldOrdre sumGjeldOrdre = default!;
            await _instance.SumGjeldOrderAsync(sumGjeldOrdre);
        }
    }
}
