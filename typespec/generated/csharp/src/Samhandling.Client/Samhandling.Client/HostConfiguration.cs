/*
 * (title)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Net.Http;
using Microsoft.Extensions.DependencyInjection;
using Samhandling.Client.Api;
using Samhandling.Client.Model;

namespace Samhandling.Client.Samhandling.Client
{
    /// <summary>
    /// Provides hosting configuration for Samhandling.Client
    /// </summary>
    public class HostConfiguration
    {
        private readonly IServiceCollection _services;
        private readonly JsonSerializerOptions _jsonOptions = new JsonSerializerOptions();

        internal bool HttpClientsAdded { get; private set; }

        /// <summary>
        /// Instantiates the class 
        /// </summary>
        /// <param name="services"></param>
        public HostConfiguration(IServiceCollection services)
        {
            _services = services;
            _jsonOptions.Converters.Add(new JsonStringEnumConverter());
            _jsonOptions.Converters.Add(new DateTimeJsonConverter());
            _jsonOptions.Converters.Add(new DateTimeNullableJsonConverter());
            _jsonOptions.Converters.Add(new DateOnlyJsonConverter());
            _jsonOptions.Converters.Add(new DateOnlyNullableJsonConverter());
            _jsonOptions.Converters.Add(new AdresseJsonConverter());
            _jsonOptions.Converters.Add(new BasicProductJsonConverter());
            _jsonOptions.Converters.Add(new BasicResponseJsonConverter());
            _jsonOptions.Converters.Add(new BasicResponseForretningsforerJsonConverter());
            _jsonOptions.Converters.Add(new BestillingsFormatJsonConverter());
            _jsonOptions.Converters.Add(new BestillingsFormatNullableJsonConverter());
            _jsonOptions.Converters.Add(new BestillingsmottakerTypeJsonConverter());
            _jsonOptions.Converters.Add(new BestillingsmottakerTypeNullableJsonConverter());
            _jsonOptions.Converters.Add(new BoligJsonConverter());
            _jsonOptions.Converters.Add(new BoliginformasjonOrdreJsonConverter());
            _jsonOptions.Converters.Add(new BoliginformasjonResponseJsonConverter());
            _jsonOptions.Converters.Add(new CallbackEventJsonConverter());
            _jsonOptions.Converters.Add(new EierbrokJsonConverter());
            _jsonOptions.Converters.Add(new EndringKjopereFullfortJsonConverter());
            _jsonOptions.Converters.Add(new EndringKjopereMottattJsonConverter());
            _jsonOptions.Converters.Add(new EndringKjopereOrdreJsonConverter());
            _jsonOptions.Converters.Add(new EndringOverdragelseBehandletJsonConverter());
            _jsonOptions.Converters.Add(new EndringOverdragelseOrdreJsonConverter());
            _jsonOptions.Converters.Add(new FeilJsonConverter());
            _jsonOptions.Converters.Add(new FeilkodeJsonConverter());
            _jsonOptions.Converters.Add(new FeilkodeNullableJsonConverter());
            _jsonOptions.Converters.Add(new ForhandsutlysingOrdreJsonConverter());
            _jsonOptions.Converters.Add(new ForhandsutlysingSenJsonConverter());
            _jsonOptions.Converters.Add(new ForhandsutlysingTidligJsonConverter());
            _jsonOptions.Converters.Add(new ForhandsutlysingUtloptJsonConverter());
            _jsonOptions.Converters.Add(new ForhandsutlysingUtsattJsonConverter());
            _jsonOptions.Converters.Add(new ForretningsforerJsonConverter());
            _jsonOptions.Converters.Add(new KlientJsonConverter());
            _jsonOptions.Converters.Add(new KontaktJsonConverter());
            _jsonOptions.Converters.Add(new KontaktinfoJsonConverter());
            _jsonOptions.Converters.Add(new MeglerkontorJsonConverter());
            _jsonOptions.Converters.Add(new RegisterenhetJsonConverter());
            _jsonOptions.Converters.Add(new RegisterenhetTypeJsonConverter());
            _jsonOptions.Converters.Add(new RegisterenhetTypeNullableJsonConverter());
            _jsonOptions.Converters.Add(new RestanseOrdreJsonConverter());
            _jsonOptions.Converters.Add(new SalgJsonConverter());
            _jsonOptions.Converters.Add(new SalgsmeldingForkjopsrettJsonConverter());
            _jsonOptions.Converters.Add(new SalgsmeldingForkjopsrettFullfortJsonConverter());
            _jsonOptions.Converters.Add(new SalgsmeldingFullfortJsonConverter());
            _jsonOptions.Converters.Add(new SalgsmeldingMottattJsonConverter());
            _jsonOptions.Converters.Add(new SalgsmeldingOppdateringJsonConverter());
            _jsonOptions.Converters.Add(new SalgsmeldingOrdreJsonConverter());
            _jsonOptions.Converters.Add(new SluttbrevAkseptertJsonConverter());
            _jsonOptions.Converters.Add(new SluttbrevOrdreJsonConverter());
            _jsonOptions.Converters.Add(new StyregodkjenningJsonConverter());
            _jsonOptions.Converters.Add(new StyregodkjenningFullfortJsonConverter());
            _jsonOptions.Converters.Add(new StyrelederJsonConverter());
            _jsonOptions.Converters.Add(new SumFelleskostnaderOrdreJsonConverter());
            _jsonOptions.Converters.Add(new SumFelleskostnaderSvarJsonConverter());
            _jsonOptions.Converters.Add(new SumGjeldOrdreJsonConverter());
            _jsonOptions.Converters.Add(new SumGjeldSvarJsonConverter());
            JsonSerializerOptionsProvider jsonSerializerOptionsProvider = new(_jsonOptions);
            _services.AddSingleton(jsonSerializerOptionsProvider);
            _services.AddSingleton<IApiFactory, ApiFactory>();
            _services.AddSingleton<DefaultApiEvents>();
        }

        /// <summary>
        /// Configures the HttpClients.
        /// </summary>
        /// <param name="client"></param>
        /// <param name="builder"></param>
        /// <returns></returns>
        public HostConfiguration AddApiHttpClients
        (
            Action<HttpClient>? client = null, Action<IHttpClientBuilder>? builder = null)
        {
            if (client == null)
                client = c => c.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS);

            List<IHttpClientBuilder> builders = new List<IHttpClientBuilder>();

            builders.Add(_services.AddHttpClient<IDefaultApi, DefaultApi>(client));
            
            if (builder != null)
                foreach (IHttpClientBuilder instance in builders)
                    builder(instance);

            HttpClientsAdded = true;

            return this;
        }

        /// <summary>
        /// Configures the JsonSerializerSettings
        /// </summary>
        /// <param name="options"></param>
        /// <returns></returns>
        public HostConfiguration ConfigureJsonOptions(Action<JsonSerializerOptions> options)
        {
            options(_jsonOptions);

            return this;
        }

        /// <summary>
        /// Adds tokens to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <param name="token"></param>
        /// <returns></returns>
        public HostConfiguration AddTokens<TTokenBase>(TTokenBase token) where TTokenBase : TokenBase
        {
            return AddTokens(new TTokenBase[]{ token });
        }

        /// <summary>
        /// Adds tokens to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <param name="tokens"></param>
        /// <returns></returns>
        public HostConfiguration AddTokens<TTokenBase>(IEnumerable<TTokenBase> tokens) where TTokenBase : TokenBase
        {
            TokenContainer<TTokenBase> container = new TokenContainer<TTokenBase>(tokens);
            _services.AddSingleton(services => container);

            return this;
        }

        /// <summary>
        /// Adds a token provider to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenProvider"></typeparam>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <returns></returns>
        public HostConfiguration UseProvider<TTokenProvider, TTokenBase>() 
            where TTokenProvider : TokenProvider<TTokenBase>
            where TTokenBase : TokenBase
        {
            _services.AddSingleton<TTokenProvider>();
            _services.AddSingleton<TokenProvider<TTokenBase>>(services => services.GetRequiredService<TTokenProvider>());

            return this;
        }
    }
}
