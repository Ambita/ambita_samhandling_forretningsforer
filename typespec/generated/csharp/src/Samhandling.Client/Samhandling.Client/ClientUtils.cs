/*
 * (title)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.IO;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Text.RegularExpressions;
using Samhandling.Client.Model;
using System.Runtime.CompilerServices;

[assembly: InternalsVisibleTo("Samhandling.Client.Test")]

namespace Samhandling.Client.Samhandling.Client
{
    /// <summary>
    /// Utility functions providing some benefit to API client consumers.
    /// </summary>
    public static partial class ClientUtils
    {

        /// <summary>
        /// A delegate for events.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        /// <returns></returns>
        public delegate void EventHandler<T>(object sender, T e) where T : EventArgs;

        /// <summary>
        /// Returns true when deserialization succeeds.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="json"></param>
        /// <param name="options"></param>
        /// <param name="result"></param>
        /// <returns></returns>
        public static bool TryDeserialize<T>(string json, JsonSerializerOptions options, [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out T? result)
        {
            try
            {
                result = JsonSerializer.Deserialize<T>(json, options);
                return result != null;
            }
            catch (Exception)
            {
                result = default;
                return false;
            }
        }

        /// <summary>
        /// Returns true when deserialization succeeds.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="reader"></param>
        /// <param name="options"></param>
        /// <param name="result"></param>
        /// <returns></returns>
        public static bool TryDeserialize<T>(ref Utf8JsonReader reader, JsonSerializerOptions options, [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out T? result)
        {
            try
            {
                result = JsonSerializer.Deserialize<T>(ref reader, options);
                return result != null;
            }
            catch (Exception)
            {
                result = default;
                return false;
            }
        }

        /// <summary>
        /// If parameter is DateTime, output in a formatted string (default ISO 8601), customizable with Configuration.DateTime.
        /// If parameter is a list, join the list with ",".
        /// Otherwise just return the string.
        /// </summary>
        /// <param name="obj">The parameter (header, path, query, form).</param>
        /// <param name="format">The DateTime serialization format.</param>
        /// <returns>Formatted string.</returns>
        public static string? ParameterToString(object? obj, string? format = ISO8601_DATETIME_FORMAT)
        {
            if (obj is DateTime dateTime)
                // Return a formatted date string - Can be customized with Configuration.DateTimeFormat
                // Defaults to an ISO 8601, using the known as a Round-trip date/time pattern ("o")
                // https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx#Anchor_8
                // For example: 2009-06-15T13:45:30.0000000
                return dateTime.ToString(format);
            if (obj is DateTimeOffset dateTimeOffset)
                // Return a formatted date string - Can be customized with Configuration.DateTimeFormat
                // Defaults to an ISO 8601, using the known as a Round-trip date/time pattern ("o")
                // https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx#Anchor_8
                // For example: 2009-06-15T13:45:30.0000000
                return dateTimeOffset.ToString(format);
            if (obj is DateOnly dateOnly)
                return dateOnly.ToString(format);
            if (obj is bool boolean)
                return boolean
                    ? "true"
                    : "false";
            if (obj is BasicResponse.TypeEnum basicResponseTypeEnum)
                return BasicResponse.TypeEnumToJsonValue(basicResponseTypeEnum);
            if (obj is BasicResponse.EierformEnum basicResponseEierformEnum)
                return BasicResponse.EierformEnumToJsonValue(basicResponseEierformEnum);
            if (obj is BestillingsFormat bestillingsFormat)
                return BestillingsFormatValueConverter.ToJsonValue(bestillingsFormat);
            if (obj is BestillingsmottakerType bestillingsmottakerType)
                return BestillingsmottakerTypeValueConverter.ToJsonValue(bestillingsmottakerType);
            if (obj is BoliginformasjonOrdre.TypeEnum boliginformasjonOrdreTypeEnum)
                return BoliginformasjonOrdre.TypeEnumToJsonValue(boliginformasjonOrdreTypeEnum);
            if (obj is BoliginformasjonResponse.TypeEnum boliginformasjonResponseTypeEnum)
                return BoliginformasjonResponse.TypeEnumToJsonValue(boliginformasjonResponseTypeEnum);
            if (obj is BoliginformasjonResponse.EierformEnum boliginformasjonResponseEierformEnum)
                return BoliginformasjonResponse.EierformEnumToJsonValue(boliginformasjonResponseEierformEnum);
            if (obj is EndringKjopereFullfort.TypeEnum endringKjopereFullfortTypeEnum)
                return EndringKjopereFullfort.TypeEnumToJsonValue(endringKjopereFullfortTypeEnum);
            if (obj is EndringKjopereFullfort.EierformEnum endringKjopereFullfortEierformEnum)
                return EndringKjopereFullfort.EierformEnumToJsonValue(endringKjopereFullfortEierformEnum);
            if (obj is EndringKjopereMottatt.TypeEnum endringKjopereMottattTypeEnum)
                return EndringKjopereMottatt.TypeEnumToJsonValue(endringKjopereMottattTypeEnum);
            if (obj is EndringKjopereMottatt.EierformEnum endringKjopereMottattEierformEnum)
                return EndringKjopereMottatt.EierformEnumToJsonValue(endringKjopereMottattEierformEnum);
            if (obj is EndringKjopereOrdre.TypeEnum endringKjopereOrdreTypeEnum)
                return EndringKjopereOrdre.TypeEnumToJsonValue(endringKjopereOrdreTypeEnum);
            if (obj is EndringOverdragelseBehandlet.TypeEnum endringOverdragelseBehandletTypeEnum)
                return EndringOverdragelseBehandlet.TypeEnumToJsonValue(endringOverdragelseBehandletTypeEnum);
            if (obj is EndringOverdragelseBehandlet.EierformEnum endringOverdragelseBehandletEierformEnum)
                return EndringOverdragelseBehandlet.EierformEnumToJsonValue(endringOverdragelseBehandletEierformEnum);
            if (obj is EndringOverdragelseOrdre.TypeEnum endringOverdragelseOrdreTypeEnum)
                return EndringOverdragelseOrdre.TypeEnumToJsonValue(endringOverdragelseOrdreTypeEnum);
            if (obj is Feil.TypeEnum feilTypeEnum)
                return Feil.TypeEnumToJsonValue(feilTypeEnum);
            if (obj is Feil.EierformEnum feilEierformEnum)
                return Feil.EierformEnumToJsonValue(feilEierformEnum);
            if (obj is Feilkode feilkode)
                return FeilkodeValueConverter.ToJsonValue(feilkode).ToString();
            if (obj is ForhandsutlysingOrdre.TypeEnum forhandsutlysingOrdreTypeEnum)
                return ForhandsutlysingOrdre.TypeEnumToJsonValue(forhandsutlysingOrdreTypeEnum);
            if (obj is ForhandsutlysingOrdre.OmsetningstypeEnum forhandsutlysingOrdreOmsetningstypeEnum)
                return ForhandsutlysingOrdre.OmsetningstypeEnumToJsonValue(forhandsutlysingOrdreOmsetningstypeEnum);
            if (obj is ForhandsutlysingSen.TypeEnum forhandsutlysingSenTypeEnum)
                return ForhandsutlysingSen.TypeEnumToJsonValue(forhandsutlysingSenTypeEnum);
            if (obj is ForhandsutlysingSen.EierformEnum forhandsutlysingSenEierformEnum)
                return ForhandsutlysingSen.EierformEnumToJsonValue(forhandsutlysingSenEierformEnum);
            if (obj is ForhandsutlysingTidlig.TypeEnum forhandsutlysingTidligTypeEnum)
                return ForhandsutlysingTidlig.TypeEnumToJsonValue(forhandsutlysingTidligTypeEnum);
            if (obj is ForhandsutlysingTidlig.EierformEnum forhandsutlysingTidligEierformEnum)
                return ForhandsutlysingTidlig.EierformEnumToJsonValue(forhandsutlysingTidligEierformEnum);
            if (obj is ForhandsutlysingUtlopt.TypeEnum forhandsutlysingUtloptTypeEnum)
                return ForhandsutlysingUtlopt.TypeEnumToJsonValue(forhandsutlysingUtloptTypeEnum);
            if (obj is ForhandsutlysingUtlopt.EierformEnum forhandsutlysingUtloptEierformEnum)
                return ForhandsutlysingUtlopt.EierformEnumToJsonValue(forhandsutlysingUtloptEierformEnum);
            if (obj is ForhandsutlysingUtsatt.TypeEnum forhandsutlysingUtsattTypeEnum)
                return ForhandsutlysingUtsatt.TypeEnumToJsonValue(forhandsutlysingUtsattTypeEnum);
            if (obj is ForhandsutlysingUtsatt.EierformEnum forhandsutlysingUtsattEierformEnum)
                return ForhandsutlysingUtsatt.EierformEnumToJsonValue(forhandsutlysingUtsattEierformEnum);
            if (obj is RegisterenhetType registerenhetType)
                return RegisterenhetTypeValueConverter.ToJsonValue(registerenhetType);
            if (obj is RestanseOrdre.TypeEnum restanseOrdreTypeEnum)
                return RestanseOrdre.TypeEnumToJsonValue(restanseOrdreTypeEnum);
            if (obj is SalgsmeldingForkjopsrett.TypeAvklaringEnum salgsmeldingForkjopsrettTypeAvklaringEnum)
                return SalgsmeldingForkjopsrett.TypeAvklaringEnumToJsonValue(salgsmeldingForkjopsrettTypeAvklaringEnum);
            if (obj is SalgsmeldingForkjopsrett.StatusForhandsutlysingEnum salgsmeldingForkjopsrettStatusForhandsutlysingEnum)
                return SalgsmeldingForkjopsrett.StatusForhandsutlysingEnumToJsonValue(salgsmeldingForkjopsrettStatusForhandsutlysingEnum);
            if (obj is SalgsmeldingForkjopsrettFullfort.StatusForkjopsrettEnum salgsmeldingForkjopsrettFullfortStatusForkjopsrettEnum)
                return SalgsmeldingForkjopsrettFullfort.StatusForkjopsrettEnumToJsonValue(salgsmeldingForkjopsrettFullfortStatusForkjopsrettEnum);
            if (obj is SalgsmeldingForkjopsrettFullfort.TypeAvklaringEnum salgsmeldingForkjopsrettFullfortTypeAvklaringEnum)
                return SalgsmeldingForkjopsrettFullfort.TypeAvklaringEnumToJsonValue(salgsmeldingForkjopsrettFullfortTypeAvklaringEnum);
            if (obj is SalgsmeldingForkjopsrettFullfort.StatusForhandsutlysingEnum salgsmeldingForkjopsrettFullfortStatusForhandsutlysingEnum)
                return SalgsmeldingForkjopsrettFullfort.StatusForhandsutlysingEnumToJsonValue(salgsmeldingForkjopsrettFullfortStatusForhandsutlysingEnum);
            if (obj is SalgsmeldingFullfort.TypeEnum salgsmeldingFullfortTypeEnum)
                return SalgsmeldingFullfort.TypeEnumToJsonValue(salgsmeldingFullfortTypeEnum);
            if (obj is SalgsmeldingFullfort.EierformEnum salgsmeldingFullfortEierformEnum)
                return SalgsmeldingFullfort.EierformEnumToJsonValue(salgsmeldingFullfortEierformEnum);
            if (obj is SalgsmeldingMottatt.TypeEnum salgsmeldingMottattTypeEnum)
                return SalgsmeldingMottatt.TypeEnumToJsonValue(salgsmeldingMottattTypeEnum);
            if (obj is SalgsmeldingMottatt.EierformEnum salgsmeldingMottattEierformEnum)
                return SalgsmeldingMottatt.EierformEnumToJsonValue(salgsmeldingMottattEierformEnum);
            if (obj is SalgsmeldingOppdatering.TypeEnum salgsmeldingOppdateringTypeEnum)
                return SalgsmeldingOppdatering.TypeEnumToJsonValue(salgsmeldingOppdateringTypeEnum);
            if (obj is SalgsmeldingOppdatering.EierformEnum salgsmeldingOppdateringEierformEnum)
                return SalgsmeldingOppdatering.EierformEnumToJsonValue(salgsmeldingOppdateringEierformEnum);
            if (obj is SalgsmeldingOrdre.TypeEnum salgsmeldingOrdreTypeEnum)
                return SalgsmeldingOrdre.TypeEnumToJsonValue(salgsmeldingOrdreTypeEnum);
            if (obj is SalgsmeldingOrdre.OmsetningstypeEnum salgsmeldingOrdreOmsetningstypeEnum)
                return SalgsmeldingOrdre.OmsetningstypeEnumToJsonValue(salgsmeldingOrdreOmsetningstypeEnum);
            if (obj is SluttbrevAkseptert.TypeEnum sluttbrevAkseptertTypeEnum)
                return SluttbrevAkseptert.TypeEnumToJsonValue(sluttbrevAkseptertTypeEnum);
            if (obj is SluttbrevAkseptert.EierformEnum sluttbrevAkseptertEierformEnum)
                return SluttbrevAkseptert.EierformEnumToJsonValue(sluttbrevAkseptertEierformEnum);
            if (obj is SluttbrevOrdre.TypeEnum sluttbrevOrdreTypeEnum)
                return SluttbrevOrdre.TypeEnumToJsonValue(sluttbrevOrdreTypeEnum);
            if (obj is StyregodkjenningFullfort.StatusStyregodkjenningEnum styregodkjenningFullfortStatusStyregodkjenningEnum)
                return StyregodkjenningFullfort.StatusStyregodkjenningEnumToJsonValue(styregodkjenningFullfortStatusStyregodkjenningEnum);
            if (obj is SumFelleskostnaderOrdre.TypeEnum sumFelleskostnaderOrdreTypeEnum)
                return SumFelleskostnaderOrdre.TypeEnumToJsonValue(sumFelleskostnaderOrdreTypeEnum);
            if (obj is SumFelleskostnaderSvar.TypeEnum sumFelleskostnaderSvarTypeEnum)
                return SumFelleskostnaderSvar.TypeEnumToJsonValue(sumFelleskostnaderSvarTypeEnum);
            if (obj is SumFelleskostnaderSvar.EierformEnum sumFelleskostnaderSvarEierformEnum)
                return SumFelleskostnaderSvar.EierformEnumToJsonValue(sumFelleskostnaderSvarEierformEnum);
            if (obj is SumGjeldOrdre.TypeEnum sumGjeldOrdreTypeEnum)
                return SumGjeldOrdre.TypeEnumToJsonValue(sumGjeldOrdreTypeEnum);
            if (obj is SumGjeldSvar.TypeEnum sumGjeldSvarTypeEnum)
                return SumGjeldSvar.TypeEnumToJsonValue(sumGjeldSvarTypeEnum);
            if (obj is SumGjeldSvar.EierformEnum sumGjeldSvarEierformEnum)
                return SumGjeldSvar.EierformEnumToJsonValue(sumGjeldSvarEierformEnum);
            if (obj is ICollection collection)
            {
                List<string?> entries = new();
                foreach (var entry in collection)
                    entries.Add(ParameterToString(entry));
                return string.Join(",", entries);
            }

            return Convert.ToString(obj, System.Globalization.CultureInfo.InvariantCulture);
        }

        /// <summary>
        /// URL encode a string
        /// Credit/Ref: https://github.com/restsharp/RestSharp/blob/master/RestSharp/Extensions/StringExtensions.cs#L50
        /// </summary>
        /// <param name="input">string to be URL encoded</param>
        /// <returns>Byte array</returns>
        public static string UrlEncode(string input)
        {
            const int maxLength = 32766;

            if (input == null)
            {
                throw new ArgumentNullException("input");
            }

            if (input.Length <= maxLength)
            {
                return Uri.EscapeDataString(input);
            }

            StringBuilder sb = new StringBuilder(input.Length * 2);
            int index = 0;

            while (index < input.Length)
            {
                int length = Math.Min(input.Length - index, maxLength);
                string subString = input.Substring(index, length);

                sb.Append(Uri.EscapeDataString(subString));
                index += subString.Length;
            }

            return sb.ToString();
        }

        /// <summary>
        /// Encode string in base64 format.
        /// </summary>
        /// <param name="text">string to be encoded.</param>
        /// <returns>Encoded string.</returns>
        public static string Base64Encode(string text)
        {
            return Convert.ToBase64String(global::System.Text.Encoding.UTF8.GetBytes(text));
        }

        /// <summary>
        /// Convert stream to byte array
        /// </summary>
        /// <param name="inputStream">Input stream to be converted</param>
        /// <returns>Byte array</returns>
        public static byte[] ReadAsBytes(Stream inputStream)
        {
            using (var ms = new MemoryStream())
            {
                inputStream.CopyTo(ms);
                return ms.ToArray();
            }
        }

        /// <summary>
        /// Select the Content-Type header's value from the given content-type array:
        /// if JSON type exists in the given array, use it;
        /// otherwise use the first one defined in 'consumes'
        /// </summary>
        /// <param name="contentTypes">The Content-Type array to select from.</param>
        /// <returns>The Content-Type header to use.</returns>
        public static string? SelectHeaderContentType(string[] contentTypes)
        {
            if (contentTypes.Length == 0)
                return null;

            foreach (var contentType in contentTypes)
            {
                if (IsJsonMime(contentType))
                    return contentType;
            }

            return contentTypes[0]; // use the first content type specified in 'consumes'
        }

        /// <summary>
        /// Select the Accept header's value from the given accepts array:
        /// if JSON exists in the given array, use it;
        /// otherwise use all of them (joining into a string)
        /// </summary>
        /// <param name="accepts">The accepts array to select from.</param>
        /// <returns>The Accept header to use.</returns>
        public static string? SelectHeaderAccept(string[] accepts)
        {
            if (accepts.Length == 0)
                return null;

            if (accepts.Contains("application/json", StringComparer.OrdinalIgnoreCase))
                return "application/json";

            return string.Join(",", accepts);
        }

        /// <summary>
        /// Provides a case-insensitive check that a provided content type is a known JSON-like content type.
        /// </summary>
        [GeneratedRegex("(?i)^(application/json|[^;/ \t]+/[^;/ \t]+[+]json)[ \t]*(;.*)?$")]
        private static partial Regex JsonRegex();

        /// <summary>
        /// Check if the given MIME is a JSON MIME.
        /// JSON MIME examples:
        ///    application/json
        ///    application/json; charset=UTF8
        ///    APPLICATION/JSON
        ///    application/vnd.company+json
        /// </summary>
        /// <param name="mime">MIME</param>
        /// <returns>Returns True if MIME type is json.</returns>
        public static bool IsJsonMime(string mime)
        {
            if (string.IsNullOrWhiteSpace(mime)) return false;

            return JsonRegex().IsMatch(mime) || mime.Equals("application/json-patch+json");
        }

        /// <summary>
        /// Get the discriminator
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="discriminator"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public static string? GetDiscriminator(Utf8JsonReader utf8JsonReader, string discriminator)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    if (localVarJsonPropertyName != null && localVarJsonPropertyName.Equals(discriminator))
                        return utf8JsonReader.GetString();
                }
            }

            throw new JsonException("The specified discriminator was not found.");
        }

        /// <summary>
        /// The base path of the API
        /// </summary>
        public const string BASE_ADDRESS = "http://localhost";

        /// <summary>
        /// The scheme of the API
        /// </summary>
        public const string SCHEME = "http";

        /// <summary>
        /// The context path of the API
        /// </summary>
        public const string CONTEXT_PATH = "";

        /// <summary>
        /// The host of the API
        /// </summary>
        public const string HOST = "localhost";

        /// <summary>
        /// The format to use for DateTime serialization
        /// </summary>
        public const string ISO8601_DATETIME_FORMAT = "o";
    }
}
