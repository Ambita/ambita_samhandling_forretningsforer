// <auto-generated>
/*
 * (title)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Samhandling.Client.Samhandling.Client;
using Samhandling.Client.Model;
using System.Diagnostics.CodeAnalysis;

namespace Samhandling.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IDefaultApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        DefaultApiEvents Events { get; }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="boliginformasjonOrdre"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IBoliginformasjonOrderApiResponse"/>&gt;</returns>
        Task<IBoliginformasjonOrderApiResponse> BoliginformasjonOrderAsync(BoliginformasjonOrdre boliginformasjonOrdre, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="boliginformasjonOrdre"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IBoliginformasjonOrderApiResponse"/>?&gt;</returns>
        Task<IBoliginformasjonOrderApiResponse?> BoliginformasjonOrderOrDefaultAsync(BoliginformasjonOrdre boliginformasjonOrdre, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callbackEvent"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICallbackReceiveApiResponse"/>&gt;</returns>
        Task<ICallbackReceiveApiResponse> CallbackReceiveAsync(CallbackEvent callbackEvent, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="callbackEvent"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICallbackReceiveApiResponse"/>?&gt;</returns>
        Task<ICallbackReceiveApiResponse?> CallbackReceiveOrDefaultAsync(CallbackEvent callbackEvent, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="endringKjopereOrdre"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEndringKjopereOrderApiResponse"/>&gt;</returns>
        Task<IEndringKjopereOrderApiResponse> EndringKjopereOrderAsync(EndringKjopereOrdre endringKjopereOrdre, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="endringKjopereOrdre"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEndringKjopereOrderApiResponse"/>?&gt;</returns>
        Task<IEndringKjopereOrderApiResponse?> EndringKjopereOrderOrDefaultAsync(EndringKjopereOrdre endringKjopereOrdre, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="endringOverdragelseOrdre"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEndringOverdragelseOrderApiResponse"/>&gt;</returns>
        Task<IEndringOverdragelseOrderApiResponse> EndringOverdragelseOrderAsync(EndringOverdragelseOrdre endringOverdragelseOrdre, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="endringOverdragelseOrdre"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEndringOverdragelseOrderApiResponse"/>?&gt;</returns>
        Task<IEndringOverdragelseOrderApiResponse?> EndringOverdragelseOrderOrDefaultAsync(EndringOverdragelseOrdre endringOverdragelseOrdre, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="forhandsutlysingOrdre"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IForhandsutlysingOrderApiResponse"/>&gt;</returns>
        Task<IForhandsutlysingOrderApiResponse> ForhandsutlysingOrderAsync(ForhandsutlysingOrdre forhandsutlysingOrdre, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="forhandsutlysingOrdre"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IForhandsutlysingOrderApiResponse"/>?&gt;</returns>
        Task<IForhandsutlysingOrderApiResponse?> ForhandsutlysingOrderOrDefaultAsync(ForhandsutlysingOrdre forhandsutlysingOrdre, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="restanseOrdre"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRestanseOrderApiResponse"/>&gt;</returns>
        Task<IRestanseOrderApiResponse> RestanseOrderAsync(RestanseOrdre restanseOrdre, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="restanseOrdre"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRestanseOrderApiResponse"/>?&gt;</returns>
        Task<IRestanseOrderApiResponse?> RestanseOrderOrDefaultAsync(RestanseOrdre restanseOrdre, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="salgsmeldingOrdre"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISalgsmeldingOrderApiResponse"/>&gt;</returns>
        Task<ISalgsmeldingOrderApiResponse> SalgsmeldingOrderAsync(SalgsmeldingOrdre salgsmeldingOrdre, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="salgsmeldingOrdre"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISalgsmeldingOrderApiResponse"/>?&gt;</returns>
        Task<ISalgsmeldingOrderApiResponse?> SalgsmeldingOrderOrDefaultAsync(SalgsmeldingOrdre salgsmeldingOrdre, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sluttbrevOrdre"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISluttbrevOrderApiResponse"/>&gt;</returns>
        Task<ISluttbrevOrderApiResponse> SluttbrevOrderAsync(SluttbrevOrdre sluttbrevOrdre, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="sluttbrevOrdre"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISluttbrevOrderApiResponse"/>?&gt;</returns>
        Task<ISluttbrevOrderApiResponse?> SluttbrevOrderOrDefaultAsync(SluttbrevOrdre sluttbrevOrdre, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sumFelleskostnaderOrdre"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISumFelleskostnaderOrderApiResponse"/>&gt;</returns>
        Task<ISumFelleskostnaderOrderApiResponse> SumFelleskostnaderOrderAsync(SumFelleskostnaderOrdre sumFelleskostnaderOrdre, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="sumFelleskostnaderOrdre"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISumFelleskostnaderOrderApiResponse"/>?&gt;</returns>
        Task<ISumFelleskostnaderOrderApiResponse?> SumFelleskostnaderOrderOrDefaultAsync(SumFelleskostnaderOrdre sumFelleskostnaderOrdre, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sumGjeldOrdre"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISumGjeldOrderApiResponse"/>&gt;</returns>
        Task<ISumGjeldOrderApiResponse> SumGjeldOrderAsync(SumGjeldOrdre sumGjeldOrdre, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="sumGjeldOrdre"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISumGjeldOrderApiResponse"/>?&gt;</returns>
        Task<ISumGjeldOrderApiResponse?> SumGjeldOrderOrDefaultAsync(SumGjeldOrdre sumGjeldOrdre, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IBoliginformasjonOrderApiResponse"/>
    /// </summary>
    public interface IBoliginformasjonOrderApiResponse : Samhandling.Client.Samhandling.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ICallbackReceiveApiResponse"/>
    /// </summary>
    public interface ICallbackReceiveApiResponse : Samhandling.Client.Samhandling.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IEndringKjopereOrderApiResponse"/>
    /// </summary>
    public interface IEndringKjopereOrderApiResponse : Samhandling.Client.Samhandling.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IEndringOverdragelseOrderApiResponse"/>
    /// </summary>
    public interface IEndringOverdragelseOrderApiResponse : Samhandling.Client.Samhandling.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IForhandsutlysingOrderApiResponse"/>
    /// </summary>
    public interface IForhandsutlysingOrderApiResponse : Samhandling.Client.Samhandling.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IRestanseOrderApiResponse"/>
    /// </summary>
    public interface IRestanseOrderApiResponse : Samhandling.Client.Samhandling.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ISalgsmeldingOrderApiResponse"/>
    /// </summary>
    public interface ISalgsmeldingOrderApiResponse : Samhandling.Client.Samhandling.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ISluttbrevOrderApiResponse"/>
    /// </summary>
    public interface ISluttbrevOrderApiResponse : Samhandling.Client.Samhandling.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ISumFelleskostnaderOrderApiResponse"/>
    /// </summary>
    public interface ISumFelleskostnaderOrderApiResponse : Samhandling.Client.Samhandling.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ISumGjeldOrderApiResponse"/>
    /// </summary>
    public interface ISumGjeldOrderApiResponse : Samhandling.Client.Samhandling.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class DefaultApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnBoliginformasjonOrder;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorBoliginformasjonOrder;

        internal void ExecuteOnBoliginformasjonOrder(DefaultApi.BoliginformasjonOrderApiResponse apiResponse)
        {
            OnBoliginformasjonOrder?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorBoliginformasjonOrder(Exception exception)
        {
            OnErrorBoliginformasjonOrder?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCallbackReceive;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCallbackReceive;

        internal void ExecuteOnCallbackReceive(DefaultApi.CallbackReceiveApiResponse apiResponse)
        {
            OnCallbackReceive?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCallbackReceive(Exception exception)
        {
            OnErrorCallbackReceive?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEndringKjopereOrder;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEndringKjopereOrder;

        internal void ExecuteOnEndringKjopereOrder(DefaultApi.EndringKjopereOrderApiResponse apiResponse)
        {
            OnEndringKjopereOrder?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEndringKjopereOrder(Exception exception)
        {
            OnErrorEndringKjopereOrder?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEndringOverdragelseOrder;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEndringOverdragelseOrder;

        internal void ExecuteOnEndringOverdragelseOrder(DefaultApi.EndringOverdragelseOrderApiResponse apiResponse)
        {
            OnEndringOverdragelseOrder?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEndringOverdragelseOrder(Exception exception)
        {
            OnErrorEndringOverdragelseOrder?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnForhandsutlysingOrder;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorForhandsutlysingOrder;

        internal void ExecuteOnForhandsutlysingOrder(DefaultApi.ForhandsutlysingOrderApiResponse apiResponse)
        {
            OnForhandsutlysingOrder?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorForhandsutlysingOrder(Exception exception)
        {
            OnErrorForhandsutlysingOrder?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnRestanseOrder;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorRestanseOrder;

        internal void ExecuteOnRestanseOrder(DefaultApi.RestanseOrderApiResponse apiResponse)
        {
            OnRestanseOrder?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorRestanseOrder(Exception exception)
        {
            OnErrorRestanseOrder?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSalgsmeldingOrder;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSalgsmeldingOrder;

        internal void ExecuteOnSalgsmeldingOrder(DefaultApi.SalgsmeldingOrderApiResponse apiResponse)
        {
            OnSalgsmeldingOrder?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSalgsmeldingOrder(Exception exception)
        {
            OnErrorSalgsmeldingOrder?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSluttbrevOrder;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSluttbrevOrder;

        internal void ExecuteOnSluttbrevOrder(DefaultApi.SluttbrevOrderApiResponse apiResponse)
        {
            OnSluttbrevOrder?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSluttbrevOrder(Exception exception)
        {
            OnErrorSluttbrevOrder?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSumFelleskostnaderOrder;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSumFelleskostnaderOrder;

        internal void ExecuteOnSumFelleskostnaderOrder(DefaultApi.SumFelleskostnaderOrderApiResponse apiResponse)
        {
            OnSumFelleskostnaderOrder?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSumFelleskostnaderOrder(Exception exception)
        {
            OnErrorSumFelleskostnaderOrder?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSumGjeldOrder;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSumGjeldOrder;

        internal void ExecuteOnSumGjeldOrder(DefaultApi.SumGjeldOrderApiResponse apiResponse)
        {
            OnSumGjeldOrder?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSumGjeldOrder(Exception exception)
        {
            OnErrorSumGjeldOrder?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class DefaultApi : IDefaultApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<DefaultApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public DefaultApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(ILogger<DefaultApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, DefaultApiEvents defaultApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<DefaultApi>();
            HttpClient = httpClient;
            Events = defaultApiEvents;
        }

        partial void FormatBoliginformasjonOrder(BoliginformasjonOrdre boliginformasjonOrdre);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="boliginformasjonOrdre"></param>
        /// <returns></returns>
        private void ValidateBoliginformasjonOrder(BoliginformasjonOrdre boliginformasjonOrdre)
        {
            if (boliginformasjonOrdre == null)
                throw new ArgumentNullException(nameof(boliginformasjonOrdre));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="boliginformasjonOrdre"></param>
        private void AfterBoliginformasjonOrderDefaultImplementation(IBoliginformasjonOrderApiResponse apiResponseLocalVar, BoliginformasjonOrdre boliginformasjonOrdre)
        {
            bool suppressDefaultLog = false;
            AfterBoliginformasjonOrder(ref suppressDefaultLog, apiResponseLocalVar, boliginformasjonOrdre);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="boliginformasjonOrdre"></param>
        partial void AfterBoliginformasjonOrder(ref bool suppressDefaultLog, IBoliginformasjonOrderApiResponse apiResponseLocalVar, BoliginformasjonOrdre boliginformasjonOrdre);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="boliginformasjonOrdre"></param>
        private void OnErrorBoliginformasjonOrderDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, BoliginformasjonOrdre boliginformasjonOrdre)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorBoliginformasjonOrder(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, boliginformasjonOrdre);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="boliginformasjonOrdre"></param>
        partial void OnErrorBoliginformasjonOrder(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, BoliginformasjonOrdre boliginformasjonOrdre);

        /// <summary>
        ///  
        /// </summary>
        /// <param name="boliginformasjonOrdre"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IBoliginformasjonOrderApiResponse"/>&gt;</returns>
        public async Task<IBoliginformasjonOrderApiResponse?> BoliginformasjonOrderOrDefaultAsync(BoliginformasjonOrdre boliginformasjonOrdre, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await BoliginformasjonOrderAsync(boliginformasjonOrdre, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="boliginformasjonOrdre"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IBoliginformasjonOrderApiResponse"/>&gt;</returns>
        public async Task<IBoliginformasjonOrderApiResponse> BoliginformasjonOrderAsync(BoliginformasjonOrdre boliginformasjonOrdre, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateBoliginformasjonOrder(boliginformasjonOrdre);

                FormatBoliginformasjonOrder(boliginformasjonOrdre);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/boliginformasjon"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/boliginformasjon");

                    httpRequestMessageLocalVar.Content = (boliginformasjonOrdre as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(boliginformasjonOrdre, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<BoliginformasjonOrderApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<BoliginformasjonOrderApiResponse>();
                        BoliginformasjonOrderApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/boliginformasjon", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterBoliginformasjonOrderDefaultImplementation(apiResponseLocalVar, boliginformasjonOrdre);

                        Events.ExecuteOnBoliginformasjonOrder(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorBoliginformasjonOrderDefaultImplementation(e, "/boliginformasjon", uriBuilderLocalVar.Path, boliginformasjonOrdre);
                Events.ExecuteOnErrorBoliginformasjonOrder(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="BoliginformasjonOrderApiResponse"/>
        /// </summary>
        public partial class BoliginformasjonOrderApiResponse : Samhandling.Client.Samhandling.Client.ApiResponse, IBoliginformasjonOrderApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<BoliginformasjonOrderApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="BoliginformasjonOrderApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public BoliginformasjonOrderApiResponse(ILogger<BoliginformasjonOrderApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="BoliginformasjonOrderApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public BoliginformasjonOrderApiResponse(ILogger<BoliginformasjonOrderApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCallbackReceive(CallbackEvent callbackEvent);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="callbackEvent"></param>
        /// <returns></returns>
        private void ValidateCallbackReceive(CallbackEvent callbackEvent)
        {
            if (callbackEvent == null)
                throw new ArgumentNullException(nameof(callbackEvent));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="callbackEvent"></param>
        private void AfterCallbackReceiveDefaultImplementation(ICallbackReceiveApiResponse apiResponseLocalVar, CallbackEvent callbackEvent)
        {
            bool suppressDefaultLog = false;
            AfterCallbackReceive(ref suppressDefaultLog, apiResponseLocalVar, callbackEvent);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="callbackEvent"></param>
        partial void AfterCallbackReceive(ref bool suppressDefaultLog, ICallbackReceiveApiResponse apiResponseLocalVar, CallbackEvent callbackEvent);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="callbackEvent"></param>
        private void OnErrorCallbackReceiveDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CallbackEvent callbackEvent)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCallbackReceive(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, callbackEvent);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="callbackEvent"></param>
        partial void OnErrorCallbackReceive(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CallbackEvent callbackEvent);

        /// <summary>
        ///  
        /// </summary>
        /// <param name="callbackEvent"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICallbackReceiveApiResponse"/>&gt;</returns>
        public async Task<ICallbackReceiveApiResponse?> CallbackReceiveOrDefaultAsync(CallbackEvent callbackEvent, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CallbackReceiveAsync(callbackEvent, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callbackEvent"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICallbackReceiveApiResponse"/>&gt;</returns>
        public async Task<ICallbackReceiveApiResponse> CallbackReceiveAsync(CallbackEvent callbackEvent, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCallbackReceive(callbackEvent);

                FormatCallbackReceive(callbackEvent);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/callback"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/callback");

                    httpRequestMessageLocalVar.Content = (callbackEvent as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(callbackEvent, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<CallbackReceiveApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CallbackReceiveApiResponse>();
                        CallbackReceiveApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/callback", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterCallbackReceiveDefaultImplementation(apiResponseLocalVar, callbackEvent);

                        Events.ExecuteOnCallbackReceive(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCallbackReceiveDefaultImplementation(e, "/callback", uriBuilderLocalVar.Path, callbackEvent);
                Events.ExecuteOnErrorCallbackReceive(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CallbackReceiveApiResponse"/>
        /// </summary>
        public partial class CallbackReceiveApiResponse : Samhandling.Client.Samhandling.Client.ApiResponse, ICallbackReceiveApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CallbackReceiveApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CallbackReceiveApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CallbackReceiveApiResponse(ILogger<CallbackReceiveApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="CallbackReceiveApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CallbackReceiveApiResponse(ILogger<CallbackReceiveApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEndringKjopereOrder(EndringKjopereOrdre endringKjopereOrdre);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="endringKjopereOrdre"></param>
        /// <returns></returns>
        private void ValidateEndringKjopereOrder(EndringKjopereOrdre endringKjopereOrdre)
        {
            if (endringKjopereOrdre == null)
                throw new ArgumentNullException(nameof(endringKjopereOrdre));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="endringKjopereOrdre"></param>
        private void AfterEndringKjopereOrderDefaultImplementation(IEndringKjopereOrderApiResponse apiResponseLocalVar, EndringKjopereOrdre endringKjopereOrdre)
        {
            bool suppressDefaultLog = false;
            AfterEndringKjopereOrder(ref suppressDefaultLog, apiResponseLocalVar, endringKjopereOrdre);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="endringKjopereOrdre"></param>
        partial void AfterEndringKjopereOrder(ref bool suppressDefaultLog, IEndringKjopereOrderApiResponse apiResponseLocalVar, EndringKjopereOrdre endringKjopereOrdre);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="endringKjopereOrdre"></param>
        private void OnErrorEndringKjopereOrderDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EndringKjopereOrdre endringKjopereOrdre)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEndringKjopereOrder(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, endringKjopereOrdre);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="endringKjopereOrdre"></param>
        partial void OnErrorEndringKjopereOrder(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EndringKjopereOrdre endringKjopereOrdre);

        /// <summary>
        ///  
        /// </summary>
        /// <param name="endringKjopereOrdre"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEndringKjopereOrderApiResponse"/>&gt;</returns>
        public async Task<IEndringKjopereOrderApiResponse?> EndringKjopereOrderOrDefaultAsync(EndringKjopereOrdre endringKjopereOrdre, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EndringKjopereOrderAsync(endringKjopereOrdre, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="endringKjopereOrdre"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEndringKjopereOrderApiResponse"/>&gt;</returns>
        public async Task<IEndringKjopereOrderApiResponse> EndringKjopereOrderAsync(EndringKjopereOrdre endringKjopereOrdre, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEndringKjopereOrder(endringKjopereOrdre);

                FormatEndringKjopereOrder(endringKjopereOrdre);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/endringkjopere"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/endringkjopere");

                    httpRequestMessageLocalVar.Content = (endringKjopereOrdre as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(endringKjopereOrdre, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<EndringKjopereOrderApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EndringKjopereOrderApiResponse>();
                        EndringKjopereOrderApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/endringkjopere", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterEndringKjopereOrderDefaultImplementation(apiResponseLocalVar, endringKjopereOrdre);

                        Events.ExecuteOnEndringKjopereOrder(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEndringKjopereOrderDefaultImplementation(e, "/endringkjopere", uriBuilderLocalVar.Path, endringKjopereOrdre);
                Events.ExecuteOnErrorEndringKjopereOrder(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EndringKjopereOrderApiResponse"/>
        /// </summary>
        public partial class EndringKjopereOrderApiResponse : Samhandling.Client.Samhandling.Client.ApiResponse, IEndringKjopereOrderApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EndringKjopereOrderApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EndringKjopereOrderApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EndringKjopereOrderApiResponse(ILogger<EndringKjopereOrderApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="EndringKjopereOrderApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EndringKjopereOrderApiResponse(ILogger<EndringKjopereOrderApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEndringOverdragelseOrder(EndringOverdragelseOrdre endringOverdragelseOrdre);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="endringOverdragelseOrdre"></param>
        /// <returns></returns>
        private void ValidateEndringOverdragelseOrder(EndringOverdragelseOrdre endringOverdragelseOrdre)
        {
            if (endringOverdragelseOrdre == null)
                throw new ArgumentNullException(nameof(endringOverdragelseOrdre));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="endringOverdragelseOrdre"></param>
        private void AfterEndringOverdragelseOrderDefaultImplementation(IEndringOverdragelseOrderApiResponse apiResponseLocalVar, EndringOverdragelseOrdre endringOverdragelseOrdre)
        {
            bool suppressDefaultLog = false;
            AfterEndringOverdragelseOrder(ref suppressDefaultLog, apiResponseLocalVar, endringOverdragelseOrdre);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="endringOverdragelseOrdre"></param>
        partial void AfterEndringOverdragelseOrder(ref bool suppressDefaultLog, IEndringOverdragelseOrderApiResponse apiResponseLocalVar, EndringOverdragelseOrdre endringOverdragelseOrdre);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="endringOverdragelseOrdre"></param>
        private void OnErrorEndringOverdragelseOrderDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EndringOverdragelseOrdre endringOverdragelseOrdre)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEndringOverdragelseOrder(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, endringOverdragelseOrdre);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="endringOverdragelseOrdre"></param>
        partial void OnErrorEndringOverdragelseOrder(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EndringOverdragelseOrdre endringOverdragelseOrdre);

        /// <summary>
        ///  
        /// </summary>
        /// <param name="endringOverdragelseOrdre"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEndringOverdragelseOrderApiResponse"/>&gt;</returns>
        public async Task<IEndringOverdragelseOrderApiResponse?> EndringOverdragelseOrderOrDefaultAsync(EndringOverdragelseOrdre endringOverdragelseOrdre, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EndringOverdragelseOrderAsync(endringOverdragelseOrdre, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="endringOverdragelseOrdre"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEndringOverdragelseOrderApiResponse"/>&gt;</returns>
        public async Task<IEndringOverdragelseOrderApiResponse> EndringOverdragelseOrderAsync(EndringOverdragelseOrdre endringOverdragelseOrdre, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEndringOverdragelseOrder(endringOverdragelseOrdre);

                FormatEndringOverdragelseOrder(endringOverdragelseOrdre);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/endringoverdragelse"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/endringoverdragelse");

                    httpRequestMessageLocalVar.Content = (endringOverdragelseOrdre as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(endringOverdragelseOrdre, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<EndringOverdragelseOrderApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EndringOverdragelseOrderApiResponse>();
                        EndringOverdragelseOrderApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/endringoverdragelse", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterEndringOverdragelseOrderDefaultImplementation(apiResponseLocalVar, endringOverdragelseOrdre);

                        Events.ExecuteOnEndringOverdragelseOrder(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEndringOverdragelseOrderDefaultImplementation(e, "/endringoverdragelse", uriBuilderLocalVar.Path, endringOverdragelseOrdre);
                Events.ExecuteOnErrorEndringOverdragelseOrder(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EndringOverdragelseOrderApiResponse"/>
        /// </summary>
        public partial class EndringOverdragelseOrderApiResponse : Samhandling.Client.Samhandling.Client.ApiResponse, IEndringOverdragelseOrderApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EndringOverdragelseOrderApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EndringOverdragelseOrderApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EndringOverdragelseOrderApiResponse(ILogger<EndringOverdragelseOrderApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="EndringOverdragelseOrderApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EndringOverdragelseOrderApiResponse(ILogger<EndringOverdragelseOrderApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatForhandsutlysingOrder(ForhandsutlysingOrdre forhandsutlysingOrdre);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="forhandsutlysingOrdre"></param>
        /// <returns></returns>
        private void ValidateForhandsutlysingOrder(ForhandsutlysingOrdre forhandsutlysingOrdre)
        {
            if (forhandsutlysingOrdre == null)
                throw new ArgumentNullException(nameof(forhandsutlysingOrdre));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="forhandsutlysingOrdre"></param>
        private void AfterForhandsutlysingOrderDefaultImplementation(IForhandsutlysingOrderApiResponse apiResponseLocalVar, ForhandsutlysingOrdre forhandsutlysingOrdre)
        {
            bool suppressDefaultLog = false;
            AfterForhandsutlysingOrder(ref suppressDefaultLog, apiResponseLocalVar, forhandsutlysingOrdre);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="forhandsutlysingOrdre"></param>
        partial void AfterForhandsutlysingOrder(ref bool suppressDefaultLog, IForhandsutlysingOrderApiResponse apiResponseLocalVar, ForhandsutlysingOrdre forhandsutlysingOrdre);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="forhandsutlysingOrdre"></param>
        private void OnErrorForhandsutlysingOrderDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ForhandsutlysingOrdre forhandsutlysingOrdre)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorForhandsutlysingOrder(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, forhandsutlysingOrdre);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="forhandsutlysingOrdre"></param>
        partial void OnErrorForhandsutlysingOrder(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ForhandsutlysingOrdre forhandsutlysingOrdre);

        /// <summary>
        ///  
        /// </summary>
        /// <param name="forhandsutlysingOrdre"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IForhandsutlysingOrderApiResponse"/>&gt;</returns>
        public async Task<IForhandsutlysingOrderApiResponse?> ForhandsutlysingOrderOrDefaultAsync(ForhandsutlysingOrdre forhandsutlysingOrdre, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ForhandsutlysingOrderAsync(forhandsutlysingOrdre, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="forhandsutlysingOrdre"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IForhandsutlysingOrderApiResponse"/>&gt;</returns>
        public async Task<IForhandsutlysingOrderApiResponse> ForhandsutlysingOrderAsync(ForhandsutlysingOrdre forhandsutlysingOrdre, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateForhandsutlysingOrder(forhandsutlysingOrdre);

                FormatForhandsutlysingOrder(forhandsutlysingOrdre);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/forhandsutlysing"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/forhandsutlysing");

                    httpRequestMessageLocalVar.Content = (forhandsutlysingOrdre as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(forhandsutlysingOrdre, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<ForhandsutlysingOrderApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ForhandsutlysingOrderApiResponse>();
                        ForhandsutlysingOrderApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/forhandsutlysing", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterForhandsutlysingOrderDefaultImplementation(apiResponseLocalVar, forhandsutlysingOrdre);

                        Events.ExecuteOnForhandsutlysingOrder(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorForhandsutlysingOrderDefaultImplementation(e, "/forhandsutlysing", uriBuilderLocalVar.Path, forhandsutlysingOrdre);
                Events.ExecuteOnErrorForhandsutlysingOrder(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ForhandsutlysingOrderApiResponse"/>
        /// </summary>
        public partial class ForhandsutlysingOrderApiResponse : Samhandling.Client.Samhandling.Client.ApiResponse, IForhandsutlysingOrderApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ForhandsutlysingOrderApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ForhandsutlysingOrderApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ForhandsutlysingOrderApiResponse(ILogger<ForhandsutlysingOrderApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="ForhandsutlysingOrderApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ForhandsutlysingOrderApiResponse(ILogger<ForhandsutlysingOrderApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatRestanseOrder(RestanseOrdre restanseOrdre);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="restanseOrdre"></param>
        /// <returns></returns>
        private void ValidateRestanseOrder(RestanseOrdre restanseOrdre)
        {
            if (restanseOrdre == null)
                throw new ArgumentNullException(nameof(restanseOrdre));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="restanseOrdre"></param>
        private void AfterRestanseOrderDefaultImplementation(IRestanseOrderApiResponse apiResponseLocalVar, RestanseOrdre restanseOrdre)
        {
            bool suppressDefaultLog = false;
            AfterRestanseOrder(ref suppressDefaultLog, apiResponseLocalVar, restanseOrdre);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="restanseOrdre"></param>
        partial void AfterRestanseOrder(ref bool suppressDefaultLog, IRestanseOrderApiResponse apiResponseLocalVar, RestanseOrdre restanseOrdre);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="restanseOrdre"></param>
        private void OnErrorRestanseOrderDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, RestanseOrdre restanseOrdre)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorRestanseOrder(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, restanseOrdre);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="restanseOrdre"></param>
        partial void OnErrorRestanseOrder(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, RestanseOrdre restanseOrdre);

        /// <summary>
        ///  
        /// </summary>
        /// <param name="restanseOrdre"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRestanseOrderApiResponse"/>&gt;</returns>
        public async Task<IRestanseOrderApiResponse?> RestanseOrderOrDefaultAsync(RestanseOrdre restanseOrdre, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await RestanseOrderAsync(restanseOrdre, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="restanseOrdre"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRestanseOrderApiResponse"/>&gt;</returns>
        public async Task<IRestanseOrderApiResponse> RestanseOrderAsync(RestanseOrdre restanseOrdre, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateRestanseOrder(restanseOrdre);

                FormatRestanseOrder(restanseOrdre);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/restanse"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/restanse");

                    httpRequestMessageLocalVar.Content = (restanseOrdre as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(restanseOrdre, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<RestanseOrderApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<RestanseOrderApiResponse>();
                        RestanseOrderApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/restanse", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterRestanseOrderDefaultImplementation(apiResponseLocalVar, restanseOrdre);

                        Events.ExecuteOnRestanseOrder(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorRestanseOrderDefaultImplementation(e, "/restanse", uriBuilderLocalVar.Path, restanseOrdre);
                Events.ExecuteOnErrorRestanseOrder(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="RestanseOrderApiResponse"/>
        /// </summary>
        public partial class RestanseOrderApiResponse : Samhandling.Client.Samhandling.Client.ApiResponse, IRestanseOrderApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<RestanseOrderApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="RestanseOrderApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public RestanseOrderApiResponse(ILogger<RestanseOrderApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="RestanseOrderApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public RestanseOrderApiResponse(ILogger<RestanseOrderApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSalgsmeldingOrder(SalgsmeldingOrdre salgsmeldingOrdre);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="salgsmeldingOrdre"></param>
        /// <returns></returns>
        private void ValidateSalgsmeldingOrder(SalgsmeldingOrdre salgsmeldingOrdre)
        {
            if (salgsmeldingOrdre == null)
                throw new ArgumentNullException(nameof(salgsmeldingOrdre));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="salgsmeldingOrdre"></param>
        private void AfterSalgsmeldingOrderDefaultImplementation(ISalgsmeldingOrderApiResponse apiResponseLocalVar, SalgsmeldingOrdre salgsmeldingOrdre)
        {
            bool suppressDefaultLog = false;
            AfterSalgsmeldingOrder(ref suppressDefaultLog, apiResponseLocalVar, salgsmeldingOrdre);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="salgsmeldingOrdre"></param>
        partial void AfterSalgsmeldingOrder(ref bool suppressDefaultLog, ISalgsmeldingOrderApiResponse apiResponseLocalVar, SalgsmeldingOrdre salgsmeldingOrdre);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="salgsmeldingOrdre"></param>
        private void OnErrorSalgsmeldingOrderDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SalgsmeldingOrdre salgsmeldingOrdre)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSalgsmeldingOrder(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, salgsmeldingOrdre);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="salgsmeldingOrdre"></param>
        partial void OnErrorSalgsmeldingOrder(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SalgsmeldingOrdre salgsmeldingOrdre);

        /// <summary>
        ///  
        /// </summary>
        /// <param name="salgsmeldingOrdre"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISalgsmeldingOrderApiResponse"/>&gt;</returns>
        public async Task<ISalgsmeldingOrderApiResponse?> SalgsmeldingOrderOrDefaultAsync(SalgsmeldingOrdre salgsmeldingOrdre, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SalgsmeldingOrderAsync(salgsmeldingOrdre, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="salgsmeldingOrdre"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISalgsmeldingOrderApiResponse"/>&gt;</returns>
        public async Task<ISalgsmeldingOrderApiResponse> SalgsmeldingOrderAsync(SalgsmeldingOrdre salgsmeldingOrdre, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSalgsmeldingOrder(salgsmeldingOrdre);

                FormatSalgsmeldingOrder(salgsmeldingOrdre);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/salgsmelding"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/salgsmelding");

                    httpRequestMessageLocalVar.Content = (salgsmeldingOrdre as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(salgsmeldingOrdre, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<SalgsmeldingOrderApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SalgsmeldingOrderApiResponse>();
                        SalgsmeldingOrderApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/salgsmelding", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterSalgsmeldingOrderDefaultImplementation(apiResponseLocalVar, salgsmeldingOrdre);

                        Events.ExecuteOnSalgsmeldingOrder(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSalgsmeldingOrderDefaultImplementation(e, "/salgsmelding", uriBuilderLocalVar.Path, salgsmeldingOrdre);
                Events.ExecuteOnErrorSalgsmeldingOrder(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SalgsmeldingOrderApiResponse"/>
        /// </summary>
        public partial class SalgsmeldingOrderApiResponse : Samhandling.Client.Samhandling.Client.ApiResponse, ISalgsmeldingOrderApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SalgsmeldingOrderApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SalgsmeldingOrderApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SalgsmeldingOrderApiResponse(ILogger<SalgsmeldingOrderApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="SalgsmeldingOrderApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SalgsmeldingOrderApiResponse(ILogger<SalgsmeldingOrderApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSluttbrevOrder(SluttbrevOrdre sluttbrevOrdre);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sluttbrevOrdre"></param>
        /// <returns></returns>
        private void ValidateSluttbrevOrder(SluttbrevOrdre sluttbrevOrdre)
        {
            if (sluttbrevOrdre == null)
                throw new ArgumentNullException(nameof(sluttbrevOrdre));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="sluttbrevOrdre"></param>
        private void AfterSluttbrevOrderDefaultImplementation(ISluttbrevOrderApiResponse apiResponseLocalVar, SluttbrevOrdre sluttbrevOrdre)
        {
            bool suppressDefaultLog = false;
            AfterSluttbrevOrder(ref suppressDefaultLog, apiResponseLocalVar, sluttbrevOrdre);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="sluttbrevOrdre"></param>
        partial void AfterSluttbrevOrder(ref bool suppressDefaultLog, ISluttbrevOrderApiResponse apiResponseLocalVar, SluttbrevOrdre sluttbrevOrdre);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="sluttbrevOrdre"></param>
        private void OnErrorSluttbrevOrderDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SluttbrevOrdre sluttbrevOrdre)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSluttbrevOrder(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, sluttbrevOrdre);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="sluttbrevOrdre"></param>
        partial void OnErrorSluttbrevOrder(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SluttbrevOrdre sluttbrevOrdre);

        /// <summary>
        ///  
        /// </summary>
        /// <param name="sluttbrevOrdre"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISluttbrevOrderApiResponse"/>&gt;</returns>
        public async Task<ISluttbrevOrderApiResponse?> SluttbrevOrderOrDefaultAsync(SluttbrevOrdre sluttbrevOrdre, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SluttbrevOrderAsync(sluttbrevOrdre, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sluttbrevOrdre"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISluttbrevOrderApiResponse"/>&gt;</returns>
        public async Task<ISluttbrevOrderApiResponse> SluttbrevOrderAsync(SluttbrevOrdre sluttbrevOrdre, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSluttbrevOrder(sluttbrevOrdre);

                FormatSluttbrevOrder(sluttbrevOrdre);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/sluttbrev"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/sluttbrev");

                    httpRequestMessageLocalVar.Content = (sluttbrevOrdre as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(sluttbrevOrdre, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<SluttbrevOrderApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SluttbrevOrderApiResponse>();
                        SluttbrevOrderApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/sluttbrev", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterSluttbrevOrderDefaultImplementation(apiResponseLocalVar, sluttbrevOrdre);

                        Events.ExecuteOnSluttbrevOrder(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSluttbrevOrderDefaultImplementation(e, "/sluttbrev", uriBuilderLocalVar.Path, sluttbrevOrdre);
                Events.ExecuteOnErrorSluttbrevOrder(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SluttbrevOrderApiResponse"/>
        /// </summary>
        public partial class SluttbrevOrderApiResponse : Samhandling.Client.Samhandling.Client.ApiResponse, ISluttbrevOrderApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SluttbrevOrderApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SluttbrevOrderApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SluttbrevOrderApiResponse(ILogger<SluttbrevOrderApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="SluttbrevOrderApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SluttbrevOrderApiResponse(ILogger<SluttbrevOrderApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSumFelleskostnaderOrder(SumFelleskostnaderOrdre sumFelleskostnaderOrdre);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sumFelleskostnaderOrdre"></param>
        /// <returns></returns>
        private void ValidateSumFelleskostnaderOrder(SumFelleskostnaderOrdre sumFelleskostnaderOrdre)
        {
            if (sumFelleskostnaderOrdre == null)
                throw new ArgumentNullException(nameof(sumFelleskostnaderOrdre));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="sumFelleskostnaderOrdre"></param>
        private void AfterSumFelleskostnaderOrderDefaultImplementation(ISumFelleskostnaderOrderApiResponse apiResponseLocalVar, SumFelleskostnaderOrdre sumFelleskostnaderOrdre)
        {
            bool suppressDefaultLog = false;
            AfterSumFelleskostnaderOrder(ref suppressDefaultLog, apiResponseLocalVar, sumFelleskostnaderOrdre);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="sumFelleskostnaderOrdre"></param>
        partial void AfterSumFelleskostnaderOrder(ref bool suppressDefaultLog, ISumFelleskostnaderOrderApiResponse apiResponseLocalVar, SumFelleskostnaderOrdre sumFelleskostnaderOrdre);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="sumFelleskostnaderOrdre"></param>
        private void OnErrorSumFelleskostnaderOrderDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SumFelleskostnaderOrdre sumFelleskostnaderOrdre)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSumFelleskostnaderOrder(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, sumFelleskostnaderOrdre);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="sumFelleskostnaderOrdre"></param>
        partial void OnErrorSumFelleskostnaderOrder(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SumFelleskostnaderOrdre sumFelleskostnaderOrdre);

        /// <summary>
        ///  
        /// </summary>
        /// <param name="sumFelleskostnaderOrdre"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISumFelleskostnaderOrderApiResponse"/>&gt;</returns>
        public async Task<ISumFelleskostnaderOrderApiResponse?> SumFelleskostnaderOrderOrDefaultAsync(SumFelleskostnaderOrdre sumFelleskostnaderOrdre, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SumFelleskostnaderOrderAsync(sumFelleskostnaderOrdre, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sumFelleskostnaderOrdre"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISumFelleskostnaderOrderApiResponse"/>&gt;</returns>
        public async Task<ISumFelleskostnaderOrderApiResponse> SumFelleskostnaderOrderAsync(SumFelleskostnaderOrdre sumFelleskostnaderOrdre, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSumFelleskostnaderOrder(sumFelleskostnaderOrdre);

                FormatSumFelleskostnaderOrder(sumFelleskostnaderOrdre);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/sumfelleskostnader"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/sumfelleskostnader");

                    httpRequestMessageLocalVar.Content = (sumFelleskostnaderOrdre as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(sumFelleskostnaderOrdre, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<SumFelleskostnaderOrderApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SumFelleskostnaderOrderApiResponse>();
                        SumFelleskostnaderOrderApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/sumfelleskostnader", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterSumFelleskostnaderOrderDefaultImplementation(apiResponseLocalVar, sumFelleskostnaderOrdre);

                        Events.ExecuteOnSumFelleskostnaderOrder(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSumFelleskostnaderOrderDefaultImplementation(e, "/sumfelleskostnader", uriBuilderLocalVar.Path, sumFelleskostnaderOrdre);
                Events.ExecuteOnErrorSumFelleskostnaderOrder(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SumFelleskostnaderOrderApiResponse"/>
        /// </summary>
        public partial class SumFelleskostnaderOrderApiResponse : Samhandling.Client.Samhandling.Client.ApiResponse, ISumFelleskostnaderOrderApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SumFelleskostnaderOrderApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SumFelleskostnaderOrderApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SumFelleskostnaderOrderApiResponse(ILogger<SumFelleskostnaderOrderApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="SumFelleskostnaderOrderApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SumFelleskostnaderOrderApiResponse(ILogger<SumFelleskostnaderOrderApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSumGjeldOrder(SumGjeldOrdre sumGjeldOrdre);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sumGjeldOrdre"></param>
        /// <returns></returns>
        private void ValidateSumGjeldOrder(SumGjeldOrdre sumGjeldOrdre)
        {
            if (sumGjeldOrdre == null)
                throw new ArgumentNullException(nameof(sumGjeldOrdre));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="sumGjeldOrdre"></param>
        private void AfterSumGjeldOrderDefaultImplementation(ISumGjeldOrderApiResponse apiResponseLocalVar, SumGjeldOrdre sumGjeldOrdre)
        {
            bool suppressDefaultLog = false;
            AfterSumGjeldOrder(ref suppressDefaultLog, apiResponseLocalVar, sumGjeldOrdre);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="sumGjeldOrdre"></param>
        partial void AfterSumGjeldOrder(ref bool suppressDefaultLog, ISumGjeldOrderApiResponse apiResponseLocalVar, SumGjeldOrdre sumGjeldOrdre);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="sumGjeldOrdre"></param>
        private void OnErrorSumGjeldOrderDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SumGjeldOrdre sumGjeldOrdre)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSumGjeldOrder(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, sumGjeldOrdre);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="sumGjeldOrdre"></param>
        partial void OnErrorSumGjeldOrder(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SumGjeldOrdre sumGjeldOrdre);

        /// <summary>
        ///  
        /// </summary>
        /// <param name="sumGjeldOrdre"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISumGjeldOrderApiResponse"/>&gt;</returns>
        public async Task<ISumGjeldOrderApiResponse?> SumGjeldOrderOrDefaultAsync(SumGjeldOrdre sumGjeldOrdre, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SumGjeldOrderAsync(sumGjeldOrdre, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sumGjeldOrdre"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISumGjeldOrderApiResponse"/>&gt;</returns>
        public async Task<ISumGjeldOrderApiResponse> SumGjeldOrderAsync(SumGjeldOrdre sumGjeldOrdre, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSumGjeldOrder(sumGjeldOrdre);

                FormatSumGjeldOrder(sumGjeldOrdre);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/sumgjeld"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/sumgjeld");

                    httpRequestMessageLocalVar.Content = (sumGjeldOrdre as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(sumGjeldOrdre, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<SumGjeldOrderApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SumGjeldOrderApiResponse>();
                        SumGjeldOrderApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/sumgjeld", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterSumGjeldOrderDefaultImplementation(apiResponseLocalVar, sumGjeldOrdre);

                        Events.ExecuteOnSumGjeldOrder(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSumGjeldOrderDefaultImplementation(e, "/sumgjeld", uriBuilderLocalVar.Path, sumGjeldOrdre);
                Events.ExecuteOnErrorSumGjeldOrder(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SumGjeldOrderApiResponse"/>
        /// </summary>
        public partial class SumGjeldOrderApiResponse : Samhandling.Client.Samhandling.Client.ApiResponse, ISumGjeldOrderApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SumGjeldOrderApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SumGjeldOrderApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SumGjeldOrderApiResponse(ILogger<SumGjeldOrderApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="SumGjeldOrderApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SumGjeldOrderApiResponse(ILogger<SumGjeldOrderApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
