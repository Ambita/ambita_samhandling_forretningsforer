// <auto-generated>
/*
 * (title)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Samhandling.Client.Samhandling.Client;

namespace Samhandling.Client.Model
{
    /// <summary>
    /// Kontakt
    /// </summary>
    public partial class Kontakt : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Kontakt" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="fornavn">fornavn</param>
        /// <param name="etternavn">etternavn</param>
        /// <param name="organisasjonsnavn">organisasjonsnavn</param>
        /// <param name="kontaktperson">kontaktperson</param>
        /// <param name="adresse">adresse</param>
        /// <param name="epost">epost</param>
        /// <param name="telefon">telefon</param>
        /// <param name="eierbrok">eierbrok</param>
        [JsonConstructor]
        public Kontakt(string id, Option<string?> fornavn = default, Option<string?> etternavn = default, Option<string?> organisasjonsnavn = default, Option<string?> kontaktperson = default, Option<Adresse?> adresse = default, Option<string?> epost = default, Option<string?> telefon = default, Option<Eierbrok?> eierbrok = default)
        {
            Id = id;
            FornavnOption = fornavn;
            EtternavnOption = etternavn;
            OrganisasjonsnavnOption = organisasjonsnavn;
            KontaktpersonOption = kontaktperson;
            AdresseOption = adresse;
            EpostOption = epost;
            TelefonOption = telefon;
            EierbrokOption = eierbrok;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Used to track the state of Fornavn
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FornavnOption { get; private set; }

        /// <summary>
        /// Gets or Sets Fornavn
        /// </summary>
        [JsonPropertyName("fornavn")]
        public string? Fornavn { get { return this.FornavnOption; } set { this.FornavnOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etternavn
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtternavnOption { get; private set; }

        /// <summary>
        /// Gets or Sets Etternavn
        /// </summary>
        [JsonPropertyName("etternavn")]
        public string? Etternavn { get { return this.EtternavnOption; } set { this.EtternavnOption = new(value); } }

        /// <summary>
        /// Used to track the state of Organisasjonsnavn
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OrganisasjonsnavnOption { get; private set; }

        /// <summary>
        /// Gets or Sets Organisasjonsnavn
        /// </summary>
        [JsonPropertyName("organisasjonsnavn")]
        public string? Organisasjonsnavn { get { return this.OrganisasjonsnavnOption; } set { this.OrganisasjonsnavnOption = new(value); } }

        /// <summary>
        /// Used to track the state of Kontaktperson
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> KontaktpersonOption { get; private set; }

        /// <summary>
        /// Gets or Sets Kontaktperson
        /// </summary>
        [JsonPropertyName("kontaktperson")]
        public string? Kontaktperson { get { return this.KontaktpersonOption; } set { this.KontaktpersonOption = new(value); } }

        /// <summary>
        /// Used to track the state of Adresse
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Adresse?> AdresseOption { get; private set; }

        /// <summary>
        /// Gets or Sets Adresse
        /// </summary>
        [JsonPropertyName("adresse")]
        public Adresse? Adresse { get { return this.AdresseOption; } set { this.AdresseOption = new(value); } }

        /// <summary>
        /// Used to track the state of Epost
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EpostOption { get; private set; }

        /// <summary>
        /// Gets or Sets Epost
        /// </summary>
        [JsonPropertyName("epost")]
        public string? Epost { get { return this.EpostOption; } set { this.EpostOption = new(value); } }

        /// <summary>
        /// Used to track the state of Telefon
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TelefonOption { get; private set; }

        /// <summary>
        /// Gets or Sets Telefon
        /// </summary>
        [JsonPropertyName("telefon")]
        public string? Telefon { get { return this.TelefonOption; } set { this.TelefonOption = new(value); } }

        /// <summary>
        /// Used to track the state of Eierbrok
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Eierbrok?> EierbrokOption { get; private set; }

        /// <summary>
        /// Gets or Sets Eierbrok
        /// </summary>
        [JsonPropertyName("eierbrok")]
        public Eierbrok? Eierbrok { get { return this.EierbrokOption; } set { this.EierbrokOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Kontakt {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Fornavn: ").Append(Fornavn).Append("\n");
            sb.Append("  Etternavn: ").Append(Etternavn).Append("\n");
            sb.Append("  Organisasjonsnavn: ").Append(Organisasjonsnavn).Append("\n");
            sb.Append("  Kontaktperson: ").Append(Kontaktperson).Append("\n");
            sb.Append("  Adresse: ").Append(Adresse).Append("\n");
            sb.Append("  Epost: ").Append(Epost).Append("\n");
            sb.Append("  Telefon: ").Append(Telefon).Append("\n");
            sb.Append("  Eierbrok: ").Append(Eierbrok).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Kontakt" />
    /// </summary>
    public class KontaktJsonConverter : JsonConverter<Kontakt>
    {
        /// <summary>
        /// Deserializes json to <see cref="Kontakt" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Kontakt Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> fornavn = default;
            Option<string?> etternavn = default;
            Option<string?> organisasjonsnavn = default;
            Option<string?> kontaktperson = default;
            Option<Adresse?> adresse = default;
            Option<string?> epost = default;
            Option<string?> telefon = default;
            Option<Eierbrok?> eierbrok = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "fornavn":
                            fornavn = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "etternavn":
                            etternavn = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "organisasjonsnavn":
                            organisasjonsnavn = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "kontaktperson":
                            kontaktperson = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "adresse":
                            adresse = new Option<Adresse?>(JsonSerializer.Deserialize<Adresse>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "epost":
                            epost = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "telefon":
                            telefon = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "eierbrok":
                            eierbrok = new Option<Eierbrok?>(JsonSerializer.Deserialize<Eierbrok>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class Kontakt.", nameof(id));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class Kontakt.");

            if (fornavn.IsSet && fornavn.Value == null)
                throw new ArgumentNullException(nameof(fornavn), "Property is not nullable for class Kontakt.");

            if (etternavn.IsSet && etternavn.Value == null)
                throw new ArgumentNullException(nameof(etternavn), "Property is not nullable for class Kontakt.");

            if (organisasjonsnavn.IsSet && organisasjonsnavn.Value == null)
                throw new ArgumentNullException(nameof(organisasjonsnavn), "Property is not nullable for class Kontakt.");

            if (kontaktperson.IsSet && kontaktperson.Value == null)
                throw new ArgumentNullException(nameof(kontaktperson), "Property is not nullable for class Kontakt.");

            if (adresse.IsSet && adresse.Value == null)
                throw new ArgumentNullException(nameof(adresse), "Property is not nullable for class Kontakt.");

            if (epost.IsSet && epost.Value == null)
                throw new ArgumentNullException(nameof(epost), "Property is not nullable for class Kontakt.");

            if (telefon.IsSet && telefon.Value == null)
                throw new ArgumentNullException(nameof(telefon), "Property is not nullable for class Kontakt.");

            if (eierbrok.IsSet && eierbrok.Value == null)
                throw new ArgumentNullException(nameof(eierbrok), "Property is not nullable for class Kontakt.");

            return new Kontakt(id.Value!, fornavn, etternavn, organisasjonsnavn, kontaktperson, adresse, epost, telefon, eierbrok);
        }

        /// <summary>
        /// Serializes a <see cref="Kontakt" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kontakt"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Kontakt kontakt, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, kontakt, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Kontakt" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kontakt"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Kontakt kontakt, JsonSerializerOptions jsonSerializerOptions)
        {
            if (kontakt.Id == null)
                throw new ArgumentNullException(nameof(kontakt.Id), "Property is required for class Kontakt.");

            if (kontakt.FornavnOption.IsSet && kontakt.Fornavn == null)
                throw new ArgumentNullException(nameof(kontakt.Fornavn), "Property is required for class Kontakt.");

            if (kontakt.EtternavnOption.IsSet && kontakt.Etternavn == null)
                throw new ArgumentNullException(nameof(kontakt.Etternavn), "Property is required for class Kontakt.");

            if (kontakt.OrganisasjonsnavnOption.IsSet && kontakt.Organisasjonsnavn == null)
                throw new ArgumentNullException(nameof(kontakt.Organisasjonsnavn), "Property is required for class Kontakt.");

            if (kontakt.KontaktpersonOption.IsSet && kontakt.Kontaktperson == null)
                throw new ArgumentNullException(nameof(kontakt.Kontaktperson), "Property is required for class Kontakt.");

            if (kontakt.AdresseOption.IsSet && kontakt.Adresse == null)
                throw new ArgumentNullException(nameof(kontakt.Adresse), "Property is required for class Kontakt.");

            if (kontakt.EpostOption.IsSet && kontakt.Epost == null)
                throw new ArgumentNullException(nameof(kontakt.Epost), "Property is required for class Kontakt.");

            if (kontakt.TelefonOption.IsSet && kontakt.Telefon == null)
                throw new ArgumentNullException(nameof(kontakt.Telefon), "Property is required for class Kontakt.");

            if (kontakt.EierbrokOption.IsSet && kontakt.Eierbrok == null)
                throw new ArgumentNullException(nameof(kontakt.Eierbrok), "Property is required for class Kontakt.");

            writer.WriteString("id", kontakt.Id);

            if (kontakt.FornavnOption.IsSet)
                writer.WriteString("fornavn", kontakt.Fornavn);

            if (kontakt.EtternavnOption.IsSet)
                writer.WriteString("etternavn", kontakt.Etternavn);

            if (kontakt.OrganisasjonsnavnOption.IsSet)
                writer.WriteString("organisasjonsnavn", kontakt.Organisasjonsnavn);

            if (kontakt.KontaktpersonOption.IsSet)
                writer.WriteString("kontaktperson", kontakt.Kontaktperson);

            if (kontakt.AdresseOption.IsSet)
            {
                writer.WritePropertyName("adresse");
                JsonSerializer.Serialize(writer, kontakt.Adresse, jsonSerializerOptions);
            }
            if (kontakt.EpostOption.IsSet)
                writer.WriteString("epost", kontakt.Epost);

            if (kontakt.TelefonOption.IsSet)
                writer.WriteString("telefon", kontakt.Telefon);

            if (kontakt.EierbrokOption.IsSet)
            {
                writer.WritePropertyName("eierbrok");
                JsonSerializer.Serialize(writer, kontakt.Eierbrok, jsonSerializerOptions);
            }
        }
    }
}
