// <auto-generated>
/*
 * (title)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Samhandling.Client.Samhandling.Client;

namespace Samhandling.Client.Model
{
    /// <summary>
    /// Boliginformasjon required - used to report information on requested property
    /// </summary>
    public partial class BoliginformasjonResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BoliginformasjonResponse" /> class.
        /// </summary>
        /// <param name="type">type</param>
        /// <param name="ordreId">ordreId</param>
        /// <param name="forretningsforer">forretningsforer</param>
        /// <param name="klient">klient</param>
        /// <param name="levert">levert</param>
        /// <param name="referanse">referanse</param>
        /// <param name="eierform">eierform</param>
        /// <param name="forkjopsrett">forkjopsrett</param>
        /// <param name="styregodkjenning">styregodkjenning</param>
        /// <param name="salgsmelding">salgsmelding</param>
        /// <param name="restanse">restanse</param>
        /// <param name="andreHensyn">andreHensyn</param>
        [JsonConstructor]
        public BoliginformasjonResponse(TypeEnum type, string ordreId, BasicResponseForretningsforer forretningsforer, Option<Klient?> klient = default, Option<string?> levert = default, Option<string?> referanse = default, Option<EierformEnum?> eierform = default, Object forkjopsrett, Object styregodkjenning, Object salgsmelding, Object restanse, Option<string?> andreHensyn = default)
        {
            Type = type;
            OrdreId = ordreId;
            Forretningsforer = forretningsforer;
            KlientOption = klient;
            LevertOption = levert;
            ReferanseOption = referanse;
            EierformOption = eierform;
            Forkjopsrett = forkjopsrett;
            Styregodkjenning = styregodkjenning;
            Salgsmelding = salgsmelding;
            Restanse = restanse;
            AndreHensynOption = andreHensyn;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Type
        /// </summary>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Boliginformasjon for value: boliginformasjon
            /// </summary>
            Boliginformasjon = 1
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("boliginformasjon"))
                return TypeEnum.Boliginformasjon;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("boliginformasjon"))
                return TypeEnum.Boliginformasjon;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum value)
        {
            if (value == TypeEnum.Boliginformasjon)
                return "boliginformasjon";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// Defines Eierform
        /// </summary>
        public enum EierformEnum
        {
            /// <summary>
            /// Enum Aksjonr for value: Aksjon책r
            /// </summary>
            Aksjonr = 1,

            /// <summary>
            /// Enum Andelseier for value: Andelseier
            /// </summary>
            Andelseier = 2,

            /// <summary>
            /// Enum Sameier for value: Sameier
            /// </summary>
            Sameier = 3,

            /// <summary>
            /// Enum Seksjonseier for value: Seksjonseier
            /// </summary>
            Seksjonseier = 4
        }

        /// <summary>
        /// Returns a <see cref="EierformEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static EierformEnum EierformEnumFromString(string value)
        {
            if (value.Equals("Aksjon책r"))
                return EierformEnum.Aksjonr;

            if (value.Equals("Andelseier"))
                return EierformEnum.Andelseier;

            if (value.Equals("Sameier"))
                return EierformEnum.Sameier;

            if (value.Equals("Seksjonseier"))
                return EierformEnum.Seksjonseier;

            throw new NotImplementedException($"Could not convert value to type EierformEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="EierformEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static EierformEnum? EierformEnumFromStringOrDefault(string value)
        {
            if (value.Equals("Aksjon책r"))
                return EierformEnum.Aksjonr;

            if (value.Equals("Andelseier"))
                return EierformEnum.Andelseier;

            if (value.Equals("Sameier"))
                return EierformEnum.Sameier;

            if (value.Equals("Seksjonseier"))
                return EierformEnum.Seksjonseier;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="EierformEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string EierformEnumToJsonValue(EierformEnum? value)
        {
            if (value == EierformEnum.Aksjonr)
                return "Aksjon책r";

            if (value == EierformEnum.Andelseier)
                return "Andelseier";

            if (value == EierformEnum.Sameier)
                return "Sameier";

            if (value == EierformEnum.Seksjonseier)
                return "Seksjonseier";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Eierform
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EierformEnum?> EierformOption { get; private set; }

        /// <summary>
        /// Gets or Sets Eierform
        /// </summary>
        [JsonPropertyName("eierform")]
        public EierformEnum? Eierform { get { return this.EierformOption; } set { this.EierformOption = new(value); } }

        /// <summary>
        /// Gets or Sets OrdreId
        /// </summary>
        [JsonPropertyName("ordreId")]
        public string OrdreId { get; set; }

        /// <summary>
        /// Gets or Sets Forretningsforer
        /// </summary>
        [JsonPropertyName("forretningsforer")]
        public BasicResponseForretningsforer Forretningsforer { get; set; }

        /// <summary>
        /// Used to track the state of Klient
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Klient?> KlientOption { get; private set; }

        /// <summary>
        /// Gets or Sets Klient
        /// </summary>
        [JsonPropertyName("klient")]
        public Klient? Klient { get { return this.KlientOption; } set { this.KlientOption = new(value); } }

        /// <summary>
        /// Used to track the state of Levert
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LevertOption { get; private set; }

        /// <summary>
        /// Gets or Sets Levert
        /// </summary>
        [JsonPropertyName("levert")]
        public string? Levert { get { return this.LevertOption; } set { this.LevertOption = new(value); } }

        /// <summary>
        /// Used to track the state of Referanse
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ReferanseOption { get; private set; }

        /// <summary>
        /// Gets or Sets Referanse
        /// </summary>
        [JsonPropertyName("referanse")]
        public string? Referanse { get { return this.ReferanseOption; } set { this.ReferanseOption = new(value); } }

        /// <summary>
        /// Gets or Sets Forkjopsrett
        /// </summary>
        [JsonPropertyName("forkjopsrett")]
        public Object Forkjopsrett { get; set; }

        /// <summary>
        /// Gets or Sets Styregodkjenning
        /// </summary>
        [JsonPropertyName("styregodkjenning")]
        public Object Styregodkjenning { get; set; }

        /// <summary>
        /// Gets or Sets Salgsmelding
        /// </summary>
        [JsonPropertyName("salgsmelding")]
        public Object Salgsmelding { get; set; }

        /// <summary>
        /// Gets or Sets Restanse
        /// </summary>
        [JsonPropertyName("restanse")]
        public Object Restanse { get; set; }

        /// <summary>
        /// Used to track the state of AndreHensyn
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AndreHensynOption { get; private set; }

        /// <summary>
        /// Gets or Sets AndreHensyn
        /// </summary>
        [JsonPropertyName("andreHensyn")]
        public string? AndreHensyn { get { return this.AndreHensynOption; } set { this.AndreHensynOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BoliginformasjonResponse {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Forkjopsrett: ").Append(Forkjopsrett).Append("\n");
            sb.Append("  Styregodkjenning: ").Append(Styregodkjenning).Append("\n");
            sb.Append("  Salgsmelding: ").Append(Salgsmelding).Append("\n");
            sb.Append("  Restanse: ").Append(Restanse).Append("\n");
            sb.Append("  OrdreId: ").Append(OrdreId).Append("\n");
            sb.Append("  Forretningsforer: ").Append(Forretningsforer).Append("\n");
            sb.Append("  AndreHensyn: ").Append(AndreHensyn).Append("\n");
            sb.Append("  Klient: ").Append(Klient).Append("\n");
            sb.Append("  Levert: ").Append(Levert).Append("\n");
            sb.Append("  Referanse: ").Append(Referanse).Append("\n");
            sb.Append("  Eierform: ").Append(Eierform).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.LevertOption.Value != null) {
                // Levert (string) pattern
                Regex regexLevert = new Regex(@"^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(Z|[+-][0-9]{2}:[0-9]{2})$", RegexOptions.CultureInvariant);

                if (this.LevertOption.Value != null &&!regexLevert.Match(this.LevertOption.Value).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Levert, must match a pattern of " + regexLevert, new [] { "Levert" });
                }
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BoliginformasjonResponse" />
    /// </summary>
    public class BoliginformasjonResponseJsonConverter : JsonConverter<BoliginformasjonResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="BoliginformasjonResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override BoliginformasjonResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<BoliginformasjonResponse.TypeEnum?> type = default;
            Option<string?> ordreId = default;
            Option<BasicResponseForretningsforer?> forretningsforer = default;
            Option<Klient?> klient = default;
            Option<string?> levert = default;
            Option<string?> referanse = default;
            Option<BoliginformasjonResponse.EierformEnum?> eierform = default;
            Option<Object?> forkjopsrett = default;
            Option<Object?> styregodkjenning = default;
            Option<Object?> salgsmelding = default;
            Option<Object?> restanse = default;
            Option<string?> andreHensyn = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<BoliginformasjonResponse.TypeEnum?>(BoliginformasjonResponse.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        case "ordreId":
                            ordreId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "forretningsforer":
                            forretningsforer = new Option<BasicResponseForretningsforer?>(JsonSerializer.Deserialize<BasicResponseForretningsforer>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "klient":
                            klient = new Option<Klient?>(JsonSerializer.Deserialize<Klient>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "levert":
                            levert = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "referanse":
                            referanse = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "eierform":
                            string? eierformRawValue = utf8JsonReader.GetString();
                            if (eierformRawValue != null)
                                eierform = new Option<BoliginformasjonResponse.EierformEnum?>(BoliginformasjonResponse.EierformEnumFromStringOrDefault(eierformRawValue));
                            break;
                        case "forkjopsrett":
                            forkjopsrett = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "styregodkjenning":
                            styregodkjenning = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "salgsmelding":
                            salgsmelding = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "restanse":
                            restanse = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "andreHensyn":
                            andreHensyn = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class BoliginformasjonResponse.", nameof(type));

            if (!ordreId.IsSet)
                throw new ArgumentException("Property is required for class BoliginformasjonResponse.", nameof(ordreId));

            if (!forretningsforer.IsSet)
                throw new ArgumentException("Property is required for class BoliginformasjonResponse.", nameof(forretningsforer));

            if (!forkjopsrett.IsSet)
                throw new ArgumentException("Property is required for class BoliginformasjonResponse.", nameof(forkjopsrett));

            if (!styregodkjenning.IsSet)
                throw new ArgumentException("Property is required for class BoliginformasjonResponse.", nameof(styregodkjenning));

            if (!salgsmelding.IsSet)
                throw new ArgumentException("Property is required for class BoliginformasjonResponse.", nameof(salgsmelding));

            if (!restanse.IsSet)
                throw new ArgumentException("Property is required for class BoliginformasjonResponse.", nameof(restanse));

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class BoliginformasjonResponse.");

            if (ordreId.IsSet && ordreId.Value == null)
                throw new ArgumentNullException(nameof(ordreId), "Property is not nullable for class BoliginformasjonResponse.");

            if (forretningsforer.IsSet && forretningsforer.Value == null)
                throw new ArgumentNullException(nameof(forretningsforer), "Property is not nullable for class BoliginformasjonResponse.");

            if (klient.IsSet && klient.Value == null)
                throw new ArgumentNullException(nameof(klient), "Property is not nullable for class BoliginformasjonResponse.");

            if (levert.IsSet && levert.Value == null)
                throw new ArgumentNullException(nameof(levert), "Property is not nullable for class BoliginformasjonResponse.");

            if (referanse.IsSet && referanse.Value == null)
                throw new ArgumentNullException(nameof(referanse), "Property is not nullable for class BoliginformasjonResponse.");

            if (eierform.IsSet && eierform.Value == null)
                throw new ArgumentNullException(nameof(eierform), "Property is not nullable for class BoliginformasjonResponse.");

            if (forkjopsrett.IsSet && forkjopsrett.Value == null)
                throw new ArgumentNullException(nameof(forkjopsrett), "Property is not nullable for class BoliginformasjonResponse.");

            if (styregodkjenning.IsSet && styregodkjenning.Value == null)
                throw new ArgumentNullException(nameof(styregodkjenning), "Property is not nullable for class BoliginformasjonResponse.");

            if (salgsmelding.IsSet && salgsmelding.Value == null)
                throw new ArgumentNullException(nameof(salgsmelding), "Property is not nullable for class BoliginformasjonResponse.");

            if (restanse.IsSet && restanse.Value == null)
                throw new ArgumentNullException(nameof(restanse), "Property is not nullable for class BoliginformasjonResponse.");

            if (andreHensyn.IsSet && andreHensyn.Value == null)
                throw new ArgumentNullException(nameof(andreHensyn), "Property is not nullable for class BoliginformasjonResponse.");

            return new BoliginformasjonResponse(type.Value!.Value!, ordreId.Value!, forretningsforer.Value!, klient, levert, referanse, eierform, forkjopsrett.Value!, styregodkjenning.Value!, salgsmelding.Value!, restanse.Value!, andreHensyn);
        }

        /// <summary>
        /// Serializes a <see cref="BoliginformasjonResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="boliginformasjonResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, BoliginformasjonResponse boliginformasjonResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, boliginformasjonResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="BoliginformasjonResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="boliginformasjonResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, BoliginformasjonResponse boliginformasjonResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (boliginformasjonResponse.OrdreId == null)
                throw new ArgumentNullException(nameof(boliginformasjonResponse.OrdreId), "Property is required for class BoliginformasjonResponse.");

            if (boliginformasjonResponse.Forretningsforer == null)
                throw new ArgumentNullException(nameof(boliginformasjonResponse.Forretningsforer), "Property is required for class BoliginformasjonResponse.");

            if (boliginformasjonResponse.KlientOption.IsSet && boliginformasjonResponse.Klient == null)
                throw new ArgumentNullException(nameof(boliginformasjonResponse.Klient), "Property is required for class BoliginformasjonResponse.");

            if (boliginformasjonResponse.LevertOption.IsSet && boliginformasjonResponse.Levert == null)
                throw new ArgumentNullException(nameof(boliginformasjonResponse.Levert), "Property is required for class BoliginformasjonResponse.");

            if (boliginformasjonResponse.ReferanseOption.IsSet && boliginformasjonResponse.Referanse == null)
                throw new ArgumentNullException(nameof(boliginformasjonResponse.Referanse), "Property is required for class BoliginformasjonResponse.");

            if (boliginformasjonResponse.Forkjopsrett == null)
                throw new ArgumentNullException(nameof(boliginformasjonResponse.Forkjopsrett), "Property is required for class BoliginformasjonResponse.");

            if (boliginformasjonResponse.Styregodkjenning == null)
                throw new ArgumentNullException(nameof(boliginformasjonResponse.Styregodkjenning), "Property is required for class BoliginformasjonResponse.");

            if (boliginformasjonResponse.Salgsmelding == null)
                throw new ArgumentNullException(nameof(boliginformasjonResponse.Salgsmelding), "Property is required for class BoliginformasjonResponse.");

            if (boliginformasjonResponse.Restanse == null)
                throw new ArgumentNullException(nameof(boliginformasjonResponse.Restanse), "Property is required for class BoliginformasjonResponse.");

            if (boliginformasjonResponse.AndreHensynOption.IsSet && boliginformasjonResponse.AndreHensyn == null)
                throw new ArgumentNullException(nameof(boliginformasjonResponse.AndreHensyn), "Property is required for class BoliginformasjonResponse.");

            var typeRawValue = BoliginformasjonResponse.TypeEnumToJsonValue(boliginformasjonResponse.Type);
            writer.WriteString("type", typeRawValue);
            writer.WriteString("ordreId", boliginformasjonResponse.OrdreId);

            writer.WritePropertyName("forretningsforer");
            JsonSerializer.Serialize(writer, boliginformasjonResponse.Forretningsforer, jsonSerializerOptions);
            if (boliginformasjonResponse.KlientOption.IsSet)
            {
                writer.WritePropertyName("klient");
                JsonSerializer.Serialize(writer, boliginformasjonResponse.Klient, jsonSerializerOptions);
            }
            if (boliginformasjonResponse.LevertOption.IsSet)
                writer.WriteString("levert", boliginformasjonResponse.Levert);

            if (boliginformasjonResponse.ReferanseOption.IsSet)
                writer.WriteString("referanse", boliginformasjonResponse.Referanse);

            var eierformRawValue = BoliginformasjonResponse.EierformEnumToJsonValue(boliginformasjonResponse.EierformOption.Value!.Value);
            writer.WriteString("eierform", eierformRawValue);
            writer.WritePropertyName("forkjopsrett");
            JsonSerializer.Serialize(writer, boliginformasjonResponse.Forkjopsrett, jsonSerializerOptions);
            writer.WritePropertyName("styregodkjenning");
            JsonSerializer.Serialize(writer, boliginformasjonResponse.Styregodkjenning, jsonSerializerOptions);
            writer.WritePropertyName("salgsmelding");
            JsonSerializer.Serialize(writer, boliginformasjonResponse.Salgsmelding, jsonSerializerOptions);
            writer.WritePropertyName("restanse");
            JsonSerializer.Serialize(writer, boliginformasjonResponse.Restanse, jsonSerializerOptions);
            if (boliginformasjonResponse.AndreHensynOption.IsSet)
                writer.WriteString("andreHensyn", boliginformasjonResponse.AndreHensyn);
        }
    }
}
