// <auto-generated>
/*
 * (title)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Samhandling.Client.Samhandling.Client;

namespace Samhandling.Client.Model
{
    /// <summary>
    /// Defines Feilkode
    /// </summary>
    public enum Feilkode
    {
        /// <summary>
        /// Enum _1 for value: 1
        /// </summary>
        _1 = 1,

        /// <summary>
        /// Enum _2 for value: 2
        /// </summary>
        _2 = 2,

        /// <summary>
        /// Enum _4 for value: 4
        /// </summary>
        _4 = 3,

        /// <summary>
        /// Enum _6 for value: 6
        /// </summary>
        _6 = 4,

        /// <summary>
        /// Enum _8 for value: 8
        /// </summary>
        _8 = 5,

        /// <summary>
        /// Enum _11 for value: 11
        /// </summary>
        _11 = 6,

        /// <summary>
        /// Enum _12 for value: 12
        /// </summary>
        _12 = 7,

        /// <summary>
        /// Enum _31 for value: 31
        /// </summary>
        _31 = 8,

        /// <summary>
        /// Enum _32 for value: 32
        /// </summary>
        _32 = 9,

        /// <summary>
        /// Enum _33 for value: 33
        /// </summary>
        _33 = 10,

        /// <summary>
        /// Enum _34 for value: 34
        /// </summary>
        _34 = 11,

        /// <summary>
        /// Enum _39 for value: 39
        /// </summary>
        _39 = 12
    }

    /// <summary>
    /// Converts <see cref="Feilkode"/> to and from the JSON value
    /// </summary>
    public static class FeilkodeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="Feilkode"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static Feilkode FromString(string value)
        {
            if (value.Equals("1"))
                return Feilkode._1;

            if (value.Equals("2"))
                return Feilkode._2;

            if (value.Equals("4"))
                return Feilkode._4;

            if (value.Equals("6"))
                return Feilkode._6;

            if (value.Equals("8"))
                return Feilkode._8;

            if (value.Equals("11"))
                return Feilkode._11;

            if (value.Equals("12"))
                return Feilkode._12;

            if (value.Equals("31"))
                return Feilkode._31;

            if (value.Equals("32"))
                return Feilkode._32;

            if (value.Equals("33"))
                return Feilkode._33;

            if (value.Equals("34"))
                return Feilkode._34;

            if (value.Equals("39"))
                return Feilkode._39;

            throw new NotImplementedException($"Could not convert value to type Feilkode: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="Feilkode"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static Feilkode? FromStringOrDefault(string value)
        {
            if (value.Equals("1"))
                return Feilkode._1;

            if (value.Equals("2"))
                return Feilkode._2;

            if (value.Equals("4"))
                return Feilkode._4;

            if (value.Equals("6"))
                return Feilkode._6;

            if (value.Equals("8"))
                return Feilkode._8;

            if (value.Equals("11"))
                return Feilkode._11;

            if (value.Equals("12"))
                return Feilkode._12;

            if (value.Equals("31"))
                return Feilkode._31;

            if (value.Equals("32"))
                return Feilkode._32;

            if (value.Equals("33"))
                return Feilkode._33;

            if (value.Equals("34"))
                return Feilkode._34;

            if (value.Equals("39"))
                return Feilkode._39;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="Feilkode"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static int ToJsonValue(Feilkode value)
        {
            return (int) value;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Feilkode"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class FeilkodeJsonConverter : JsonConverter<Feilkode>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override Feilkode Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            Feilkode? result = rawValue == null
                ? null
                : FeilkodeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the Feilkode to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="feilkode"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, Feilkode feilkode, JsonSerializerOptions options)
        {
            writer.WriteStringValue(FeilkodeValueConverter.ToJsonValue(feilkode).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Feilkode"/>
    /// </summary>
    public class FeilkodeNullableJsonConverter : JsonConverter<Feilkode?>
    {
        /// <summary>
        /// Returns a Feilkode from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override Feilkode? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            Feilkode? result = rawValue == null
                ? null
                : FeilkodeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the Feilkode to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="feilkode"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, Feilkode? feilkode, JsonSerializerOptions options)
        {
            writer.WriteStringValue(feilkode.HasValue ? FeilkodeValueConverter.ToJsonValue(feilkode.Value).ToString() : "null");
        }
    }
}
