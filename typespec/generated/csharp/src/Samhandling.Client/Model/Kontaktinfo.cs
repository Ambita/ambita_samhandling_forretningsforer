// <auto-generated>
/*
 * (title)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Samhandling.Client.Samhandling.Client;

namespace Samhandling.Client.Model
{
    /// <summary>
    /// Kontaktinfo
    /// </summary>
    public partial class Kontaktinfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Kontaktinfo" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="navn">navn</param>
        /// <param name="epost">epost</param>
        /// <param name="telefon">telefon</param>
        [JsonConstructor]
        public Kontaktinfo(string id, string navn, string epost, Option<string?> telefon = default)
        {
            Id = id;
            Navn = navn;
            Epost = epost;
            TelefonOption = telefon;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Navn
        /// </summary>
        [JsonPropertyName("navn")]
        public string Navn { get; set; }

        /// <summary>
        /// Gets or Sets Epost
        /// </summary>
        [JsonPropertyName("epost")]
        public string Epost { get; set; }

        /// <summary>
        /// Used to track the state of Telefon
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TelefonOption { get; private set; }

        /// <summary>
        /// Gets or Sets Telefon
        /// </summary>
        [JsonPropertyName("telefon")]
        public string? Telefon { get { return this.TelefonOption; } set { this.TelefonOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Kontaktinfo {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Navn: ").Append(Navn).Append("\n");
            sb.Append("  Epost: ").Append(Epost).Append("\n");
            sb.Append("  Telefon: ").Append(Telefon).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Kontaktinfo" />
    /// </summary>
    public class KontaktinfoJsonConverter : JsonConverter<Kontaktinfo>
    {
        /// <summary>
        /// Deserializes json to <see cref="Kontaktinfo" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Kontaktinfo Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> navn = default;
            Option<string?> epost = default;
            Option<string?> telefon = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "navn":
                            navn = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "epost":
                            epost = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "telefon":
                            telefon = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class Kontaktinfo.", nameof(id));

            if (!navn.IsSet)
                throw new ArgumentException("Property is required for class Kontaktinfo.", nameof(navn));

            if (!epost.IsSet)
                throw new ArgumentException("Property is required for class Kontaktinfo.", nameof(epost));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class Kontaktinfo.");

            if (navn.IsSet && navn.Value == null)
                throw new ArgumentNullException(nameof(navn), "Property is not nullable for class Kontaktinfo.");

            if (epost.IsSet && epost.Value == null)
                throw new ArgumentNullException(nameof(epost), "Property is not nullable for class Kontaktinfo.");

            if (telefon.IsSet && telefon.Value == null)
                throw new ArgumentNullException(nameof(telefon), "Property is not nullable for class Kontaktinfo.");

            return new Kontaktinfo(id.Value!, navn.Value!, epost.Value!, telefon);
        }

        /// <summary>
        /// Serializes a <see cref="Kontaktinfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kontaktinfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Kontaktinfo kontaktinfo, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, kontaktinfo, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Kontaktinfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kontaktinfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Kontaktinfo kontaktinfo, JsonSerializerOptions jsonSerializerOptions)
        {
            if (kontaktinfo.Id == null)
                throw new ArgumentNullException(nameof(kontaktinfo.Id), "Property is required for class Kontaktinfo.");

            if (kontaktinfo.Navn == null)
                throw new ArgumentNullException(nameof(kontaktinfo.Navn), "Property is required for class Kontaktinfo.");

            if (kontaktinfo.Epost == null)
                throw new ArgumentNullException(nameof(kontaktinfo.Epost), "Property is required for class Kontaktinfo.");

            if (kontaktinfo.TelefonOption.IsSet && kontaktinfo.Telefon == null)
                throw new ArgumentNullException(nameof(kontaktinfo.Telefon), "Property is required for class Kontaktinfo.");

            writer.WriteString("id", kontaktinfo.Id);

            writer.WriteString("navn", kontaktinfo.Navn);

            writer.WriteString("epost", kontaktinfo.Epost);

            if (kontaktinfo.TelefonOption.IsSet)
                writer.WriteString("telefon", kontaktinfo.Telefon);
        }
    }
}
