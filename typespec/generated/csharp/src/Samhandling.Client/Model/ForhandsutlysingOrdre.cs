// <auto-generated>
/*
 * (title)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Samhandling.Client.Samhandling.Client;

namespace Samhandling.Client.Model
{
    /// <summary>
    /// Forhandsutlysing Order a clarification
    /// </summary>
    public partial class ForhandsutlysingOrdre : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ForhandsutlysingOrdre" /> class.
        /// </summary>
        /// <param name="ordreId">ordreId</param>
        /// <param name="registerenhet">registerenhet</param>
        /// <param name="bestiller">bestiller</param>
        /// <param name="meglerkontor">meglerkontor</param>
        /// <param name="kontaktperson">kontaktperson</param>
        /// <param name="estateId">estateId</param>
        /// <param name="oppdragsnummer">oppdragsnummer</param>
        /// <param name="type">type</param>
        /// <param name="bolig">bolig</param>
        /// <param name="selgere">selgere</param>
        /// <param name="eiere">eiere</param>
        /// <param name="omsetningstype">omsetningstype</param>
        /// <param name="finnkode">finnkode</param>
        /// <param name="prisantydning">prisantydning</param>
        [JsonConstructor]
        public ForhandsutlysingOrdre(string ordreId, Registerenhet registerenhet, Kontaktinfo bestiller, Meglerkontor meglerkontor, Kontaktinfo kontaktperson, Option<string?> estateId = default, Option<string?> oppdragsnummer = default, TypeEnum type, Bolig bolig, List<Kontakt> selgere, Option<List<Kontakt>?> eiere = default, Option<OmsetningstypeEnum?> omsetningstype = default, Option<string?> finnkode = default, Option<int?> prisantydning = default)
        {
            OrdreId = ordreId;
            Registerenhet = registerenhet;
            Bestiller = bestiller;
            Meglerkontor = meglerkontor;
            Kontaktperson = kontaktperson;
            EstateIdOption = estateId;
            OppdragsnummerOption = oppdragsnummer;
            Type = type;
            Bolig = bolig;
            Selgere = selgere;
            EiereOption = eiere;
            OmsetningstypeOption = omsetningstype;
            FinnkodeOption = finnkode;
            PrisantydningOption = prisantydning;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Type
        /// </summary>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Forhandsutlysing for value: forhandsutlysing
            /// </summary>
            Forhandsutlysing = 1
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("forhandsutlysing"))
                return TypeEnum.Forhandsutlysing;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("forhandsutlysing"))
                return TypeEnum.Forhandsutlysing;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum value)
        {
            if (value == TypeEnum.Forhandsutlysing)
                return "forhandsutlysing";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// Defines Omsetningstype
        /// </summary>
        public enum OmsetningstypeEnum
        {
            /// <summary>
            /// Enum Salg for value: salg
            /// </summary>
            Salg = 1,

            /// <summary>
            /// Enum Tvangssalg for value: tvangssalg
            /// </summary>
            Tvangssalg = 2,

            /// <summary>
            /// Enum Utleie for value: utleie
            /// </summary>
            Utleie = 3,

            /// <summary>
            /// Enum Verdivurdering for value: verdivurdering
            /// </summary>
            Verdivurdering = 4,

            /// <summary>
            /// Enum Oppgjorsoppdrag for value: oppgjorsoppdrag
            /// </summary>
            Oppgjorsoppdrag = 5
        }

        /// <summary>
        /// Returns a <see cref="OmsetningstypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static OmsetningstypeEnum OmsetningstypeEnumFromString(string value)
        {
            if (value.Equals("salg"))
                return OmsetningstypeEnum.Salg;

            if (value.Equals("tvangssalg"))
                return OmsetningstypeEnum.Tvangssalg;

            if (value.Equals("utleie"))
                return OmsetningstypeEnum.Utleie;

            if (value.Equals("verdivurdering"))
                return OmsetningstypeEnum.Verdivurdering;

            if (value.Equals("oppgjorsoppdrag"))
                return OmsetningstypeEnum.Oppgjorsoppdrag;

            throw new NotImplementedException($"Could not convert value to type OmsetningstypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="OmsetningstypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static OmsetningstypeEnum? OmsetningstypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("salg"))
                return OmsetningstypeEnum.Salg;

            if (value.Equals("tvangssalg"))
                return OmsetningstypeEnum.Tvangssalg;

            if (value.Equals("utleie"))
                return OmsetningstypeEnum.Utleie;

            if (value.Equals("verdivurdering"))
                return OmsetningstypeEnum.Verdivurdering;

            if (value.Equals("oppgjorsoppdrag"))
                return OmsetningstypeEnum.Oppgjorsoppdrag;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="OmsetningstypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string OmsetningstypeEnumToJsonValue(OmsetningstypeEnum? value)
        {
            if (value == OmsetningstypeEnum.Salg)
                return "salg";

            if (value == OmsetningstypeEnum.Tvangssalg)
                return "tvangssalg";

            if (value == OmsetningstypeEnum.Utleie)
                return "utleie";

            if (value == OmsetningstypeEnum.Verdivurdering)
                return "verdivurdering";

            if (value == OmsetningstypeEnum.Oppgjorsoppdrag)
                return "oppgjorsoppdrag";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Omsetningstype
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<OmsetningstypeEnum?> OmsetningstypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Omsetningstype
        /// </summary>
        [JsonPropertyName("omsetningstype")]
        public OmsetningstypeEnum? Omsetningstype { get { return this.OmsetningstypeOption; } set { this.OmsetningstypeOption = new(value); } }

        /// <summary>
        /// Gets or Sets OrdreId
        /// </summary>
        [JsonPropertyName("ordreId")]
        public string OrdreId { get; set; }

        /// <summary>
        /// Gets or Sets Registerenhet
        /// </summary>
        [JsonPropertyName("registerenhet")]
        public Registerenhet Registerenhet { get; set; }

        /// <summary>
        /// Gets or Sets Bestiller
        /// </summary>
        [JsonPropertyName("bestiller")]
        public Kontaktinfo Bestiller { get; set; }

        /// <summary>
        /// Gets or Sets Meglerkontor
        /// </summary>
        [JsonPropertyName("meglerkontor")]
        public Meglerkontor Meglerkontor { get; set; }

        /// <summary>
        /// Gets or Sets Kontaktperson
        /// </summary>
        [JsonPropertyName("kontaktperson")]
        public Kontaktinfo Kontaktperson { get; set; }

        /// <summary>
        /// Used to track the state of EstateId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EstateIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets EstateId
        /// </summary>
        [JsonPropertyName("estateId")]
        public string? EstateId { get { return this.EstateIdOption; } set { this.EstateIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Oppdragsnummer
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OppdragsnummerOption { get; private set; }

        /// <summary>
        /// Gets or Sets Oppdragsnummer
        /// </summary>
        [JsonPropertyName("oppdragsnummer")]
        public string? Oppdragsnummer { get { return this.OppdragsnummerOption; } set { this.OppdragsnummerOption = new(value); } }

        /// <summary>
        /// Gets or Sets Bolig
        /// </summary>
        [JsonPropertyName("bolig")]
        public Bolig Bolig { get; set; }

        /// <summary>
        /// Gets or Sets Selgere
        /// </summary>
        [JsonPropertyName("selgere")]
        public List<Kontakt> Selgere { get; set; }

        /// <summary>
        /// Used to track the state of Eiere
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Kontakt>?> EiereOption { get; private set; }

        /// <summary>
        /// Gets or Sets Eiere
        /// </summary>
        [JsonPropertyName("eiere")]
        public List<Kontakt>? Eiere { get { return this.EiereOption; } set { this.EiereOption = new(value); } }

        /// <summary>
        /// Used to track the state of Finnkode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FinnkodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Finnkode
        /// </summary>
        [JsonPropertyName("finnkode")]
        public string? Finnkode { get { return this.FinnkodeOption; } set { this.FinnkodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Prisantydning
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PrisantydningOption { get; private set; }

        /// <summary>
        /// Gets or Sets Prisantydning
        /// </summary>
        [JsonPropertyName("prisantydning")]
        public int? Prisantydning { get { return this.PrisantydningOption; } set { this.PrisantydningOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ForhandsutlysingOrdre {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Bolig: ").Append(Bolig).Append("\n");
            sb.Append("  Selgere: ").Append(Selgere).Append("\n");
            sb.Append("  OrdreId: ").Append(OrdreId).Append("\n");
            sb.Append("  Registerenhet: ").Append(Registerenhet).Append("\n");
            sb.Append("  Bestiller: ").Append(Bestiller).Append("\n");
            sb.Append("  Meglerkontor: ").Append(Meglerkontor).Append("\n");
            sb.Append("  Kontaktperson: ").Append(Kontaktperson).Append("\n");
            sb.Append("  Eiere: ").Append(Eiere).Append("\n");
            sb.Append("  Omsetningstype: ").Append(Omsetningstype).Append("\n");
            sb.Append("  Finnkode: ").Append(Finnkode).Append("\n");
            sb.Append("  Prisantydning: ").Append(Prisantydning).Append("\n");
            sb.Append("  EstateId: ").Append(EstateId).Append("\n");
            sb.Append("  Oppdragsnummer: ").Append(Oppdragsnummer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ForhandsutlysingOrdre" />
    /// </summary>
    public class ForhandsutlysingOrdreJsonConverter : JsonConverter<ForhandsutlysingOrdre>
    {
        /// <summary>
        /// Deserializes json to <see cref="ForhandsutlysingOrdre" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ForhandsutlysingOrdre Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> ordreId = default;
            Option<Registerenhet?> registerenhet = default;
            Option<Kontaktinfo?> bestiller = default;
            Option<Meglerkontor?> meglerkontor = default;
            Option<Kontaktinfo?> kontaktperson = default;
            Option<string?> estateId = default;
            Option<string?> oppdragsnummer = default;
            Option<ForhandsutlysingOrdre.TypeEnum?> type = default;
            Option<Bolig?> bolig = default;
            Option<List<Kontakt>?> selgere = default;
            Option<List<Kontakt>?> eiere = default;
            Option<ForhandsutlysingOrdre.OmsetningstypeEnum?> omsetningstype = default;
            Option<string?> finnkode = default;
            Option<int?> prisantydning = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "ordreId":
                            ordreId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "registerenhet":
                            registerenhet = new Option<Registerenhet?>(JsonSerializer.Deserialize<Registerenhet>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "bestiller":
                            bestiller = new Option<Kontaktinfo?>(JsonSerializer.Deserialize<Kontaktinfo>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "meglerkontor":
                            meglerkontor = new Option<Meglerkontor?>(JsonSerializer.Deserialize<Meglerkontor>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "kontaktperson":
                            kontaktperson = new Option<Kontaktinfo?>(JsonSerializer.Deserialize<Kontaktinfo>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "estateId":
                            estateId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "oppdragsnummer":
                            oppdragsnummer = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<ForhandsutlysingOrdre.TypeEnum?>(ForhandsutlysingOrdre.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        case "bolig":
                            bolig = new Option<Bolig?>(JsonSerializer.Deserialize<Bolig>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "selgere":
                            selgere = new Option<List<Kontakt>?>(JsonSerializer.Deserialize<List<Kontakt>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "eiere":
                            eiere = new Option<List<Kontakt>?>(JsonSerializer.Deserialize<List<Kontakt>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "omsetningstype":
                            string? omsetningstypeRawValue = utf8JsonReader.GetString();
                            if (omsetningstypeRawValue != null)
                                omsetningstype = new Option<ForhandsutlysingOrdre.OmsetningstypeEnum?>(ForhandsutlysingOrdre.OmsetningstypeEnumFromStringOrDefault(omsetningstypeRawValue));
                            break;
                        case "finnkode":
                            finnkode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "prisantydning":
                            prisantydning = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!ordreId.IsSet)
                throw new ArgumentException("Property is required for class ForhandsutlysingOrdre.", nameof(ordreId));

            if (!registerenhet.IsSet)
                throw new ArgumentException("Property is required for class ForhandsutlysingOrdre.", nameof(registerenhet));

            if (!bestiller.IsSet)
                throw new ArgumentException("Property is required for class ForhandsutlysingOrdre.", nameof(bestiller));

            if (!meglerkontor.IsSet)
                throw new ArgumentException("Property is required for class ForhandsutlysingOrdre.", nameof(meglerkontor));

            if (!kontaktperson.IsSet)
                throw new ArgumentException("Property is required for class ForhandsutlysingOrdre.", nameof(kontaktperson));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class ForhandsutlysingOrdre.", nameof(type));

            if (!bolig.IsSet)
                throw new ArgumentException("Property is required for class ForhandsutlysingOrdre.", nameof(bolig));

            if (!selgere.IsSet)
                throw new ArgumentException("Property is required for class ForhandsutlysingOrdre.", nameof(selgere));

            if (ordreId.IsSet && ordreId.Value == null)
                throw new ArgumentNullException(nameof(ordreId), "Property is not nullable for class ForhandsutlysingOrdre.");

            if (registerenhet.IsSet && registerenhet.Value == null)
                throw new ArgumentNullException(nameof(registerenhet), "Property is not nullable for class ForhandsutlysingOrdre.");

            if (bestiller.IsSet && bestiller.Value == null)
                throw new ArgumentNullException(nameof(bestiller), "Property is not nullable for class ForhandsutlysingOrdre.");

            if (meglerkontor.IsSet && meglerkontor.Value == null)
                throw new ArgumentNullException(nameof(meglerkontor), "Property is not nullable for class ForhandsutlysingOrdre.");

            if (kontaktperson.IsSet && kontaktperson.Value == null)
                throw new ArgumentNullException(nameof(kontaktperson), "Property is not nullable for class ForhandsutlysingOrdre.");

            if (estateId.IsSet && estateId.Value == null)
                throw new ArgumentNullException(nameof(estateId), "Property is not nullable for class ForhandsutlysingOrdre.");

            if (oppdragsnummer.IsSet && oppdragsnummer.Value == null)
                throw new ArgumentNullException(nameof(oppdragsnummer), "Property is not nullable for class ForhandsutlysingOrdre.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class ForhandsutlysingOrdre.");

            if (bolig.IsSet && bolig.Value == null)
                throw new ArgumentNullException(nameof(bolig), "Property is not nullable for class ForhandsutlysingOrdre.");

            if (selgere.IsSet && selgere.Value == null)
                throw new ArgumentNullException(nameof(selgere), "Property is not nullable for class ForhandsutlysingOrdre.");

            if (eiere.IsSet && eiere.Value == null)
                throw new ArgumentNullException(nameof(eiere), "Property is not nullable for class ForhandsutlysingOrdre.");

            if (omsetningstype.IsSet && omsetningstype.Value == null)
                throw new ArgumentNullException(nameof(omsetningstype), "Property is not nullable for class ForhandsutlysingOrdre.");

            if (finnkode.IsSet && finnkode.Value == null)
                throw new ArgumentNullException(nameof(finnkode), "Property is not nullable for class ForhandsutlysingOrdre.");

            if (prisantydning.IsSet && prisantydning.Value == null)
                throw new ArgumentNullException(nameof(prisantydning), "Property is not nullable for class ForhandsutlysingOrdre.");

            return new ForhandsutlysingOrdre(ordreId.Value!, registerenhet.Value!, bestiller.Value!, meglerkontor.Value!, kontaktperson.Value!, estateId, oppdragsnummer, type.Value!.Value!, bolig.Value!, selgere.Value!, eiere, omsetningstype, finnkode, prisantydning);
        }

        /// <summary>
        /// Serializes a <see cref="ForhandsutlysingOrdre" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="forhandsutlysingOrdre"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ForhandsutlysingOrdre forhandsutlysingOrdre, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, forhandsutlysingOrdre, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ForhandsutlysingOrdre" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="forhandsutlysingOrdre"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ForhandsutlysingOrdre forhandsutlysingOrdre, JsonSerializerOptions jsonSerializerOptions)
        {
            if (forhandsutlysingOrdre.OrdreId == null)
                throw new ArgumentNullException(nameof(forhandsutlysingOrdre.OrdreId), "Property is required for class ForhandsutlysingOrdre.");

            if (forhandsutlysingOrdre.Registerenhet == null)
                throw new ArgumentNullException(nameof(forhandsutlysingOrdre.Registerenhet), "Property is required for class ForhandsutlysingOrdre.");

            if (forhandsutlysingOrdre.Bestiller == null)
                throw new ArgumentNullException(nameof(forhandsutlysingOrdre.Bestiller), "Property is required for class ForhandsutlysingOrdre.");

            if (forhandsutlysingOrdre.Meglerkontor == null)
                throw new ArgumentNullException(nameof(forhandsutlysingOrdre.Meglerkontor), "Property is required for class ForhandsutlysingOrdre.");

            if (forhandsutlysingOrdre.Kontaktperson == null)
                throw new ArgumentNullException(nameof(forhandsutlysingOrdre.Kontaktperson), "Property is required for class ForhandsutlysingOrdre.");

            if (forhandsutlysingOrdre.EstateIdOption.IsSet && forhandsutlysingOrdre.EstateId == null)
                throw new ArgumentNullException(nameof(forhandsutlysingOrdre.EstateId), "Property is required for class ForhandsutlysingOrdre.");

            if (forhandsutlysingOrdre.OppdragsnummerOption.IsSet && forhandsutlysingOrdre.Oppdragsnummer == null)
                throw new ArgumentNullException(nameof(forhandsutlysingOrdre.Oppdragsnummer), "Property is required for class ForhandsutlysingOrdre.");

            if (forhandsutlysingOrdre.Bolig == null)
                throw new ArgumentNullException(nameof(forhandsutlysingOrdre.Bolig), "Property is required for class ForhandsutlysingOrdre.");

            if (forhandsutlysingOrdre.Selgere == null)
                throw new ArgumentNullException(nameof(forhandsutlysingOrdre.Selgere), "Property is required for class ForhandsutlysingOrdre.");

            if (forhandsutlysingOrdre.EiereOption.IsSet && forhandsutlysingOrdre.Eiere == null)
                throw new ArgumentNullException(nameof(forhandsutlysingOrdre.Eiere), "Property is required for class ForhandsutlysingOrdre.");

            if (forhandsutlysingOrdre.FinnkodeOption.IsSet && forhandsutlysingOrdre.Finnkode == null)
                throw new ArgumentNullException(nameof(forhandsutlysingOrdre.Finnkode), "Property is required for class ForhandsutlysingOrdre.");

            writer.WriteString("ordreId", forhandsutlysingOrdre.OrdreId);

            writer.WritePropertyName("registerenhet");
            JsonSerializer.Serialize(writer, forhandsutlysingOrdre.Registerenhet, jsonSerializerOptions);
            writer.WritePropertyName("bestiller");
            JsonSerializer.Serialize(writer, forhandsutlysingOrdre.Bestiller, jsonSerializerOptions);
            writer.WritePropertyName("meglerkontor");
            JsonSerializer.Serialize(writer, forhandsutlysingOrdre.Meglerkontor, jsonSerializerOptions);
            writer.WritePropertyName("kontaktperson");
            JsonSerializer.Serialize(writer, forhandsutlysingOrdre.Kontaktperson, jsonSerializerOptions);
            if (forhandsutlysingOrdre.EstateIdOption.IsSet)
                writer.WriteString("estateId", forhandsutlysingOrdre.EstateId);

            if (forhandsutlysingOrdre.OppdragsnummerOption.IsSet)
                writer.WriteString("oppdragsnummer", forhandsutlysingOrdre.Oppdragsnummer);

            var typeRawValue = ForhandsutlysingOrdre.TypeEnumToJsonValue(forhandsutlysingOrdre.Type);
            writer.WriteString("type", typeRawValue);
            writer.WritePropertyName("bolig");
            JsonSerializer.Serialize(writer, forhandsutlysingOrdre.Bolig, jsonSerializerOptions);
            writer.WritePropertyName("selgere");
            JsonSerializer.Serialize(writer, forhandsutlysingOrdre.Selgere, jsonSerializerOptions);
            if (forhandsutlysingOrdre.EiereOption.IsSet)
            {
                writer.WritePropertyName("eiere");
                JsonSerializer.Serialize(writer, forhandsutlysingOrdre.Eiere, jsonSerializerOptions);
            }
            var omsetningstypeRawValue = ForhandsutlysingOrdre.OmsetningstypeEnumToJsonValue(forhandsutlysingOrdre.OmsetningstypeOption.Value!.Value);
            writer.WriteString("omsetningstype", omsetningstypeRawValue);
            if (forhandsutlysingOrdre.FinnkodeOption.IsSet)
                writer.WriteString("finnkode", forhandsutlysingOrdre.Finnkode);

            if (forhandsutlysingOrdre.PrisantydningOption.IsSet)
                writer.WriteNumber("prisantydning", forhandsutlysingOrdre.PrisantydningOption.Value!.Value);
        }
    }
}
