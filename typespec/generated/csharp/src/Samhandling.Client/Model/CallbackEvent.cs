// <auto-generated>
/*
 * (title)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Samhandling.Client.Samhandling.Client;

namespace Samhandling.Client.Model
{
    /// <summary>
    /// CallbackEvent
    /// </summary>
    public partial class CallbackEvent : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CallbackEvent" /> class.
        /// </summary>
        /// <param name="boliginformasjonResponse"></param>
        /// <param name="feil"></param>
        /// <param name="forhandsutlysingTidlig"></param>
        /// <param name="forhandsutlysingUtsatt"></param>
        /// <param name="forhandsutlysingSen"></param>
        /// <param name="forhandsutlysingUtlopt"></param>
        /// <param name="endringOverdragelseBehandlet"></param>
        /// <param name="salgsmeldingMottatt"></param>
        /// <param name="salgsmeldingOppdatering"></param>
        /// <param name="salgsmeldingFullfort"></param>
        /// <param name="endringKjopereMottatt"></param>
        /// <param name="endringKjopereFullfort"></param>
        /// <param name="sluttbrevAkseptert"></param>
        /// <param name="sumGjeldSvar"></param>
        /// <param name="sumFelleskostnaderSvar"></param>
        public CallbackEvent(Option<BoliginformasjonResponse?> boliginformasjonResponse, Option<Feil?> feil, Option<ForhandsutlysingTidlig?> forhandsutlysingTidlig, Option<ForhandsutlysingUtsatt?> forhandsutlysingUtsatt, Option<ForhandsutlysingSen?> forhandsutlysingSen, Option<ForhandsutlysingUtlopt?> forhandsutlysingUtlopt, Option<EndringOverdragelseBehandlet?> endringOverdragelseBehandlet, Option<SalgsmeldingMottatt?> salgsmeldingMottatt, Option<SalgsmeldingOppdatering?> salgsmeldingOppdatering, Option<SalgsmeldingFullfort?> salgsmeldingFullfort, Option<EndringKjopereMottatt?> endringKjopereMottatt, Option<EndringKjopereFullfort?> endringKjopereFullfort, Option<SluttbrevAkseptert?> sluttbrevAkseptert, Option<SumGjeldSvar?> sumGjeldSvar, Option<SumFelleskostnaderSvar?> sumFelleskostnaderSvar)
        {
            BoliginformasjonResponseOption = boliginformasjonResponse;
            FeilOption = feil;
            ForhandsutlysingTidligOption = forhandsutlysingTidlig;
            ForhandsutlysingUtsattOption = forhandsutlysingUtsatt;
            ForhandsutlysingSenOption = forhandsutlysingSen;
            ForhandsutlysingUtloptOption = forhandsutlysingUtlopt;
            EndringOverdragelseBehandletOption = endringOverdragelseBehandlet;
            SalgsmeldingMottattOption = salgsmeldingMottatt;
            SalgsmeldingOppdateringOption = salgsmeldingOppdatering;
            SalgsmeldingFullfortOption = salgsmeldingFullfort;
            EndringKjopereMottattOption = endringKjopereMottatt;
            EndringKjopereFullfortOption = endringKjopereFullfort;
            SluttbrevAkseptertOption = sluttbrevAkseptert;
            SumGjeldSvarOption = sumGjeldSvar;
            SumFelleskostnaderSvarOption = sumFelleskostnaderSvar;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of BoliginformasjonResponse
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<BoliginformasjonResponse?> BoliginformasjonResponseOption { get; private set; }

        /// <summary>
        /// Gets or Sets BoliginformasjonResponse
        /// </summary>
        public BoliginformasjonResponse? BoliginformasjonResponse { get { return this.BoliginformasjonResponseOption; } set { this.BoliginformasjonResponseOption = new(value); } }

        /// <summary>
        /// Used to track the state of Feil
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Feil?> FeilOption { get; private set; }

        /// <summary>
        /// Gets or Sets Feil
        /// </summary>
        public Feil? Feil { get { return this.FeilOption; } set { this.FeilOption = new(value); } }

        /// <summary>
        /// Used to track the state of ForhandsutlysingTidlig
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ForhandsutlysingTidlig?> ForhandsutlysingTidligOption { get; private set; }

        /// <summary>
        /// Gets or Sets ForhandsutlysingTidlig
        /// </summary>
        public ForhandsutlysingTidlig? ForhandsutlysingTidlig { get { return this.ForhandsutlysingTidligOption; } set { this.ForhandsutlysingTidligOption = new(value); } }

        /// <summary>
        /// Used to track the state of ForhandsutlysingUtsatt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ForhandsutlysingUtsatt?> ForhandsutlysingUtsattOption { get; private set; }

        /// <summary>
        /// Gets or Sets ForhandsutlysingUtsatt
        /// </summary>
        public ForhandsutlysingUtsatt? ForhandsutlysingUtsatt { get { return this.ForhandsutlysingUtsattOption; } set { this.ForhandsutlysingUtsattOption = new(value); } }

        /// <summary>
        /// Used to track the state of ForhandsutlysingSen
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ForhandsutlysingSen?> ForhandsutlysingSenOption { get; private set; }

        /// <summary>
        /// Gets or Sets ForhandsutlysingSen
        /// </summary>
        public ForhandsutlysingSen? ForhandsutlysingSen { get { return this.ForhandsutlysingSenOption; } set { this.ForhandsutlysingSenOption = new(value); } }

        /// <summary>
        /// Used to track the state of ForhandsutlysingUtlopt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ForhandsutlysingUtlopt?> ForhandsutlysingUtloptOption { get; private set; }

        /// <summary>
        /// Gets or Sets ForhandsutlysingUtlopt
        /// </summary>
        public ForhandsutlysingUtlopt? ForhandsutlysingUtlopt { get { return this.ForhandsutlysingUtloptOption; } set { this.ForhandsutlysingUtloptOption = new(value); } }

        /// <summary>
        /// Used to track the state of EndringOverdragelseBehandlet
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EndringOverdragelseBehandlet?> EndringOverdragelseBehandletOption { get; private set; }

        /// <summary>
        /// Gets or Sets EndringOverdragelseBehandlet
        /// </summary>
        public EndringOverdragelseBehandlet? EndringOverdragelseBehandlet { get { return this.EndringOverdragelseBehandletOption; } set { this.EndringOverdragelseBehandletOption = new(value); } }

        /// <summary>
        /// Used to track the state of SalgsmeldingMottatt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SalgsmeldingMottatt?> SalgsmeldingMottattOption { get; private set; }

        /// <summary>
        /// Gets or Sets SalgsmeldingMottatt
        /// </summary>
        public SalgsmeldingMottatt? SalgsmeldingMottatt { get { return this.SalgsmeldingMottattOption; } set { this.SalgsmeldingMottattOption = new(value); } }

        /// <summary>
        /// Used to track the state of SalgsmeldingOppdatering
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SalgsmeldingOppdatering?> SalgsmeldingOppdateringOption { get; private set; }

        /// <summary>
        /// Gets or Sets SalgsmeldingOppdatering
        /// </summary>
        public SalgsmeldingOppdatering? SalgsmeldingOppdatering { get { return this.SalgsmeldingOppdateringOption; } set { this.SalgsmeldingOppdateringOption = new(value); } }

        /// <summary>
        /// Used to track the state of SalgsmeldingFullfort
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SalgsmeldingFullfort?> SalgsmeldingFullfortOption { get; private set; }

        /// <summary>
        /// Gets or Sets SalgsmeldingFullfort
        /// </summary>
        public SalgsmeldingFullfort? SalgsmeldingFullfort { get { return this.SalgsmeldingFullfortOption; } set { this.SalgsmeldingFullfortOption = new(value); } }

        /// <summary>
        /// Used to track the state of EndringKjopereMottatt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EndringKjopereMottatt?> EndringKjopereMottattOption { get; private set; }

        /// <summary>
        /// Gets or Sets EndringKjopereMottatt
        /// </summary>
        public EndringKjopereMottatt? EndringKjopereMottatt { get { return this.EndringKjopereMottattOption; } set { this.EndringKjopereMottattOption = new(value); } }

        /// <summary>
        /// Used to track the state of EndringKjopereFullfort
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EndringKjopereFullfort?> EndringKjopereFullfortOption { get; private set; }

        /// <summary>
        /// Gets or Sets EndringKjopereFullfort
        /// </summary>
        public EndringKjopereFullfort? EndringKjopereFullfort { get { return this.EndringKjopereFullfortOption; } set { this.EndringKjopereFullfortOption = new(value); } }

        /// <summary>
        /// Used to track the state of SluttbrevAkseptert
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SluttbrevAkseptert?> SluttbrevAkseptertOption { get; private set; }

        /// <summary>
        /// Gets or Sets SluttbrevAkseptert
        /// </summary>
        public SluttbrevAkseptert? SluttbrevAkseptert { get { return this.SluttbrevAkseptertOption; } set { this.SluttbrevAkseptertOption = new(value); } }

        /// <summary>
        /// Used to track the state of SumGjeldSvar
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SumGjeldSvar?> SumGjeldSvarOption { get; private set; }

        /// <summary>
        /// Gets or Sets SumGjeldSvar
        /// </summary>
        public SumGjeldSvar? SumGjeldSvar { get { return this.SumGjeldSvarOption; } set { this.SumGjeldSvarOption = new(value); } }

        /// <summary>
        /// Used to track the state of SumFelleskostnaderSvar
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SumFelleskostnaderSvar?> SumFelleskostnaderSvarOption { get; private set; }

        /// <summary>
        /// Gets or Sets SumFelleskostnaderSvar
        /// </summary>
        public SumFelleskostnaderSvar? SumFelleskostnaderSvar { get { return this.SumFelleskostnaderSvarOption; } set { this.SumFelleskostnaderSvarOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CallbackEvent {\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CallbackEvent" />
    /// </summary>
    public class CallbackEventJsonConverter : JsonConverter<CallbackEvent>
    {
        /// <summary>
        /// Deserializes json to <see cref="CallbackEvent" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CallbackEvent Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            BoliginformasjonResponse? boliginformasjonResponse = default;
            Feil? feil = default;
            ForhandsutlysingTidlig? forhandsutlysingTidlig = default;
            ForhandsutlysingUtsatt? forhandsutlysingUtsatt = default;
            ForhandsutlysingSen? forhandsutlysingSen = default;
            ForhandsutlysingUtlopt? forhandsutlysingUtlopt = default;
            EndringOverdragelseBehandlet? endringOverdragelseBehandlet = default;
            SalgsmeldingMottatt? salgsmeldingMottatt = default;
            SalgsmeldingOppdatering? salgsmeldingOppdatering = default;
            SalgsmeldingFullfort? salgsmeldingFullfort = default;
            EndringKjopereMottatt? endringKjopereMottatt = default;
            EndringKjopereFullfort? endringKjopereFullfort = default;
            SluttbrevAkseptert? sluttbrevAkseptert = default;
            SumGjeldSvar? sumGjeldSvar = default;
            SumFelleskostnaderSvar? sumFelleskostnaderSvar = default;

            Utf8JsonReader utf8JsonReaderAnyOf = utf8JsonReader;
            while (utf8JsonReaderAnyOf.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReaderAnyOf.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReaderAnyOf.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReaderAnyOf.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReaderAnyOf.CurrentDepth)
                    break;

                if (utf8JsonReaderAnyOf.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReaderAnyOf.CurrentDepth - 1)
                {
                    Utf8JsonReader utf8JsonReaderBoliginformasjonResponse = utf8JsonReader;
                    ClientUtils.TryDeserialize<BoliginformasjonResponse?>(ref utf8JsonReaderBoliginformasjonResponse, jsonSerializerOptions, out boliginformasjonResponse);

                    Utf8JsonReader utf8JsonReaderFeil = utf8JsonReader;
                    ClientUtils.TryDeserialize<Feil?>(ref utf8JsonReaderFeil, jsonSerializerOptions, out feil);

                    Utf8JsonReader utf8JsonReaderForhandsutlysingTidlig = utf8JsonReader;
                    ClientUtils.TryDeserialize<ForhandsutlysingTidlig?>(ref utf8JsonReaderForhandsutlysingTidlig, jsonSerializerOptions, out forhandsutlysingTidlig);

                    Utf8JsonReader utf8JsonReaderForhandsutlysingUtsatt = utf8JsonReader;
                    ClientUtils.TryDeserialize<ForhandsutlysingUtsatt?>(ref utf8JsonReaderForhandsutlysingUtsatt, jsonSerializerOptions, out forhandsutlysingUtsatt);

                    Utf8JsonReader utf8JsonReaderForhandsutlysingSen = utf8JsonReader;
                    ClientUtils.TryDeserialize<ForhandsutlysingSen?>(ref utf8JsonReaderForhandsutlysingSen, jsonSerializerOptions, out forhandsutlysingSen);

                    Utf8JsonReader utf8JsonReaderForhandsutlysingUtlopt = utf8JsonReader;
                    ClientUtils.TryDeserialize<ForhandsutlysingUtlopt?>(ref utf8JsonReaderForhandsutlysingUtlopt, jsonSerializerOptions, out forhandsutlysingUtlopt);

                    Utf8JsonReader utf8JsonReaderEndringOverdragelseBehandlet = utf8JsonReader;
                    ClientUtils.TryDeserialize<EndringOverdragelseBehandlet?>(ref utf8JsonReaderEndringOverdragelseBehandlet, jsonSerializerOptions, out endringOverdragelseBehandlet);

                    Utf8JsonReader utf8JsonReaderSalgsmeldingMottatt = utf8JsonReader;
                    ClientUtils.TryDeserialize<SalgsmeldingMottatt?>(ref utf8JsonReaderSalgsmeldingMottatt, jsonSerializerOptions, out salgsmeldingMottatt);

                    Utf8JsonReader utf8JsonReaderSalgsmeldingOppdatering = utf8JsonReader;
                    ClientUtils.TryDeserialize<SalgsmeldingOppdatering?>(ref utf8JsonReaderSalgsmeldingOppdatering, jsonSerializerOptions, out salgsmeldingOppdatering);

                    Utf8JsonReader utf8JsonReaderSalgsmeldingFullfort = utf8JsonReader;
                    ClientUtils.TryDeserialize<SalgsmeldingFullfort?>(ref utf8JsonReaderSalgsmeldingFullfort, jsonSerializerOptions, out salgsmeldingFullfort);

                    Utf8JsonReader utf8JsonReaderEndringKjopereMottatt = utf8JsonReader;
                    ClientUtils.TryDeserialize<EndringKjopereMottatt?>(ref utf8JsonReaderEndringKjopereMottatt, jsonSerializerOptions, out endringKjopereMottatt);

                    Utf8JsonReader utf8JsonReaderEndringKjopereFullfort = utf8JsonReader;
                    ClientUtils.TryDeserialize<EndringKjopereFullfort?>(ref utf8JsonReaderEndringKjopereFullfort, jsonSerializerOptions, out endringKjopereFullfort);

                    Utf8JsonReader utf8JsonReaderSluttbrevAkseptert = utf8JsonReader;
                    ClientUtils.TryDeserialize<SluttbrevAkseptert?>(ref utf8JsonReaderSluttbrevAkseptert, jsonSerializerOptions, out sluttbrevAkseptert);

                    Utf8JsonReader utf8JsonReaderSumGjeldSvar = utf8JsonReader;
                    ClientUtils.TryDeserialize<SumGjeldSvar?>(ref utf8JsonReaderSumGjeldSvar, jsonSerializerOptions, out sumGjeldSvar);

                    Utf8JsonReader utf8JsonReaderSumFelleskostnaderSvar = utf8JsonReader;
                    ClientUtils.TryDeserialize<SumFelleskostnaderSvar?>(ref utf8JsonReaderSumFelleskostnaderSvar, jsonSerializerOptions, out sumFelleskostnaderSvar);
                }
            }

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        default:
                            break;
                    }
                }
            }

            Option<BoliginformasjonResponse?> boliginformasjonResponseParsedValue = boliginformasjonResponse == null
                ? default
                : new Option<BoliginformasjonResponse?>(boliginformasjonResponse);
            Option<Feil?> feilParsedValue = feil == null
                ? default
                : new Option<Feil?>(feil);
            Option<ForhandsutlysingTidlig?> forhandsutlysingTidligParsedValue = forhandsutlysingTidlig == null
                ? default
                : new Option<ForhandsutlysingTidlig?>(forhandsutlysingTidlig);
            Option<ForhandsutlysingUtsatt?> forhandsutlysingUtsattParsedValue = forhandsutlysingUtsatt == null
                ? default
                : new Option<ForhandsutlysingUtsatt?>(forhandsutlysingUtsatt);
            Option<ForhandsutlysingSen?> forhandsutlysingSenParsedValue = forhandsutlysingSen == null
                ? default
                : new Option<ForhandsutlysingSen?>(forhandsutlysingSen);
            Option<ForhandsutlysingUtlopt?> forhandsutlysingUtloptParsedValue = forhandsutlysingUtlopt == null
                ? default
                : new Option<ForhandsutlysingUtlopt?>(forhandsutlysingUtlopt);
            Option<EndringOverdragelseBehandlet?> endringOverdragelseBehandletParsedValue = endringOverdragelseBehandlet == null
                ? default
                : new Option<EndringOverdragelseBehandlet?>(endringOverdragelseBehandlet);
            Option<SalgsmeldingMottatt?> salgsmeldingMottattParsedValue = salgsmeldingMottatt == null
                ? default
                : new Option<SalgsmeldingMottatt?>(salgsmeldingMottatt);
            Option<SalgsmeldingOppdatering?> salgsmeldingOppdateringParsedValue = salgsmeldingOppdatering == null
                ? default
                : new Option<SalgsmeldingOppdatering?>(salgsmeldingOppdatering);
            Option<SalgsmeldingFullfort?> salgsmeldingFullfortParsedValue = salgsmeldingFullfort == null
                ? default
                : new Option<SalgsmeldingFullfort?>(salgsmeldingFullfort);
            Option<EndringKjopereMottatt?> endringKjopereMottattParsedValue = endringKjopereMottatt == null
                ? default
                : new Option<EndringKjopereMottatt?>(endringKjopereMottatt);
            Option<EndringKjopereFullfort?> endringKjopereFullfortParsedValue = endringKjopereFullfort == null
                ? default
                : new Option<EndringKjopereFullfort?>(endringKjopereFullfort);
            Option<SluttbrevAkseptert?> sluttbrevAkseptertParsedValue = sluttbrevAkseptert == null
                ? default
                : new Option<SluttbrevAkseptert?>(sluttbrevAkseptert);
            Option<SumGjeldSvar?> sumGjeldSvarParsedValue = sumGjeldSvar == null
                ? default
                : new Option<SumGjeldSvar?>(sumGjeldSvar);
            Option<SumFelleskostnaderSvar?> sumFelleskostnaderSvarParsedValue = sumFelleskostnaderSvar == null
                ? default
                : new Option<SumFelleskostnaderSvar?>(sumFelleskostnaderSvar);

            return new CallbackEvent(boliginformasjonResponseParsedValue, feilParsedValue, forhandsutlysingTidligParsedValue, forhandsutlysingUtsattParsedValue, forhandsutlysingSenParsedValue, forhandsutlysingUtloptParsedValue, endringOverdragelseBehandletParsedValue, salgsmeldingMottattParsedValue, salgsmeldingOppdateringParsedValue, salgsmeldingFullfortParsedValue, endringKjopereMottattParsedValue, endringKjopereFullfortParsedValue, sluttbrevAkseptertParsedValue, sumGjeldSvarParsedValue, sumFelleskostnaderSvarParsedValue);
        }

        /// <summary>
        /// Serializes a <see cref="CallbackEvent" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="callbackEvent"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CallbackEvent callbackEvent, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            if (callbackEvent.BoliginformasjonResponseOption.IsSet && callbackEvent.BoliginformasjonResponseOption.Value != null)
            {
                BoliginformasjonResponseJsonConverter boliginformasjonResponseJsonConverter = (BoliginformasjonResponseJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(callbackEvent.BoliginformasjonResponseOption.Value.GetType()));
                boliginformasjonResponseJsonConverter.WriteProperties(writer, callbackEvent.BoliginformasjonResponseOption.Value, jsonSerializerOptions);
            }

            if (callbackEvent.FeilOption.IsSet && callbackEvent.FeilOption.Value != null)
            {
                FeilJsonConverter feilJsonConverter = (FeilJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(callbackEvent.FeilOption.Value.GetType()));
                feilJsonConverter.WriteProperties(writer, callbackEvent.FeilOption.Value, jsonSerializerOptions);
            }

            if (callbackEvent.ForhandsutlysingTidligOption.IsSet && callbackEvent.ForhandsutlysingTidligOption.Value != null)
            {
                ForhandsutlysingTidligJsonConverter forhandsutlysingTidligJsonConverter = (ForhandsutlysingTidligJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(callbackEvent.ForhandsutlysingTidligOption.Value.GetType()));
                forhandsutlysingTidligJsonConverter.WriteProperties(writer, callbackEvent.ForhandsutlysingTidligOption.Value, jsonSerializerOptions);
            }

            if (callbackEvent.ForhandsutlysingUtsattOption.IsSet && callbackEvent.ForhandsutlysingUtsattOption.Value != null)
            {
                ForhandsutlysingUtsattJsonConverter forhandsutlysingUtsattJsonConverter = (ForhandsutlysingUtsattJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(callbackEvent.ForhandsutlysingUtsattOption.Value.GetType()));
                forhandsutlysingUtsattJsonConverter.WriteProperties(writer, callbackEvent.ForhandsutlysingUtsattOption.Value, jsonSerializerOptions);
            }

            if (callbackEvent.ForhandsutlysingSenOption.IsSet && callbackEvent.ForhandsutlysingSenOption.Value != null)
            {
                ForhandsutlysingSenJsonConverter forhandsutlysingSenJsonConverter = (ForhandsutlysingSenJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(callbackEvent.ForhandsutlysingSenOption.Value.GetType()));
                forhandsutlysingSenJsonConverter.WriteProperties(writer, callbackEvent.ForhandsutlysingSenOption.Value, jsonSerializerOptions);
            }

            if (callbackEvent.ForhandsutlysingUtloptOption.IsSet && callbackEvent.ForhandsutlysingUtloptOption.Value != null)
            {
                ForhandsutlysingUtloptJsonConverter forhandsutlysingUtloptJsonConverter = (ForhandsutlysingUtloptJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(callbackEvent.ForhandsutlysingUtloptOption.Value.GetType()));
                forhandsutlysingUtloptJsonConverter.WriteProperties(writer, callbackEvent.ForhandsutlysingUtloptOption.Value, jsonSerializerOptions);
            }

            if (callbackEvent.EndringOverdragelseBehandletOption.IsSet && callbackEvent.EndringOverdragelseBehandletOption.Value != null)
            {
                EndringOverdragelseBehandletJsonConverter endringOverdragelseBehandletJsonConverter = (EndringOverdragelseBehandletJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(callbackEvent.EndringOverdragelseBehandletOption.Value.GetType()));
                endringOverdragelseBehandletJsonConverter.WriteProperties(writer, callbackEvent.EndringOverdragelseBehandletOption.Value, jsonSerializerOptions);
            }

            if (callbackEvent.SalgsmeldingMottattOption.IsSet && callbackEvent.SalgsmeldingMottattOption.Value != null)
            {
                SalgsmeldingMottattJsonConverter salgsmeldingMottattJsonConverter = (SalgsmeldingMottattJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(callbackEvent.SalgsmeldingMottattOption.Value.GetType()));
                salgsmeldingMottattJsonConverter.WriteProperties(writer, callbackEvent.SalgsmeldingMottattOption.Value, jsonSerializerOptions);
            }

            if (callbackEvent.SalgsmeldingOppdateringOption.IsSet && callbackEvent.SalgsmeldingOppdateringOption.Value != null)
            {
                SalgsmeldingOppdateringJsonConverter salgsmeldingOppdateringJsonConverter = (SalgsmeldingOppdateringJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(callbackEvent.SalgsmeldingOppdateringOption.Value.GetType()));
                salgsmeldingOppdateringJsonConverter.WriteProperties(writer, callbackEvent.SalgsmeldingOppdateringOption.Value, jsonSerializerOptions);
            }

            if (callbackEvent.SalgsmeldingFullfortOption.IsSet && callbackEvent.SalgsmeldingFullfortOption.Value != null)
            {
                SalgsmeldingFullfortJsonConverter salgsmeldingFullfortJsonConverter = (SalgsmeldingFullfortJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(callbackEvent.SalgsmeldingFullfortOption.Value.GetType()));
                salgsmeldingFullfortJsonConverter.WriteProperties(writer, callbackEvent.SalgsmeldingFullfortOption.Value, jsonSerializerOptions);
            }

            if (callbackEvent.EndringKjopereMottattOption.IsSet && callbackEvent.EndringKjopereMottattOption.Value != null)
            {
                EndringKjopereMottattJsonConverter endringKjopereMottattJsonConverter = (EndringKjopereMottattJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(callbackEvent.EndringKjopereMottattOption.Value.GetType()));
                endringKjopereMottattJsonConverter.WriteProperties(writer, callbackEvent.EndringKjopereMottattOption.Value, jsonSerializerOptions);
            }

            if (callbackEvent.EndringKjopereFullfortOption.IsSet && callbackEvent.EndringKjopereFullfortOption.Value != null)
            {
                EndringKjopereFullfortJsonConverter endringKjopereFullfortJsonConverter = (EndringKjopereFullfortJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(callbackEvent.EndringKjopereFullfortOption.Value.GetType()));
                endringKjopereFullfortJsonConverter.WriteProperties(writer, callbackEvent.EndringKjopereFullfortOption.Value, jsonSerializerOptions);
            }

            if (callbackEvent.SluttbrevAkseptertOption.IsSet && callbackEvent.SluttbrevAkseptertOption.Value != null)
            {
                SluttbrevAkseptertJsonConverter sluttbrevAkseptertJsonConverter = (SluttbrevAkseptertJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(callbackEvent.SluttbrevAkseptertOption.Value.GetType()));
                sluttbrevAkseptertJsonConverter.WriteProperties(writer, callbackEvent.SluttbrevAkseptertOption.Value, jsonSerializerOptions);
            }

            if (callbackEvent.SumGjeldSvarOption.IsSet && callbackEvent.SumGjeldSvarOption.Value != null)
            {
                SumGjeldSvarJsonConverter sumGjeldSvarJsonConverter = (SumGjeldSvarJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(callbackEvent.SumGjeldSvarOption.Value.GetType()));
                sumGjeldSvarJsonConverter.WriteProperties(writer, callbackEvent.SumGjeldSvarOption.Value, jsonSerializerOptions);
            }

            if (callbackEvent.SumFelleskostnaderSvarOption.IsSet && callbackEvent.SumFelleskostnaderSvarOption.Value != null)
            {
                SumFelleskostnaderSvarJsonConverter sumFelleskostnaderSvarJsonConverter = (SumFelleskostnaderSvarJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(callbackEvent.SumFelleskostnaderSvarOption.Value.GetType()));
                sumFelleskostnaderSvarJsonConverter.WriteProperties(writer, callbackEvent.SumFelleskostnaderSvarOption.Value, jsonSerializerOptions);
            }

            WriteProperties(writer, callbackEvent, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CallbackEvent" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="callbackEvent"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CallbackEvent callbackEvent, JsonSerializerOptions jsonSerializerOptions)
        {

        }
    }
}
