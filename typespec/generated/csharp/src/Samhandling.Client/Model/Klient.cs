// <auto-generated>
/*
 * (title)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Samhandling.Client.Samhandling.Client;

namespace Samhandling.Client.Model
{
    /// <summary>
    /// Klient
    /// </summary>
    public partial class Klient : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Klient" /> class.
        /// </summary>
        /// <param name="klienttype">klienttype</param>
        /// <param name="organisasjonsnavn">organisasjonsnavn</param>
        /// <param name="organisasjonsnummer">organisasjonsnummer</param>
        /// <param name="epost">epost</param>
        /// <param name="nettside">nettside</param>
        /// <param name="styreleder">styreleder</param>
        [JsonConstructor]
        public Klient(string klienttype, string organisasjonsnavn, string organisasjonsnummer, Option<string?> epost = default, Option<string?> nettside = default, Option<Styreleder?> styreleder = default)
        {
            Klienttype = klienttype;
            Organisasjonsnavn = organisasjonsnavn;
            Organisasjonsnummer = organisasjonsnummer;
            EpostOption = epost;
            NettsideOption = nettside;
            StyrelederOption = styreleder;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Klienttype
        /// </summary>
        [JsonPropertyName("klienttype")]
        public string Klienttype { get; set; }

        /// <summary>
        /// Gets or Sets Organisasjonsnavn
        /// </summary>
        [JsonPropertyName("organisasjonsnavn")]
        public string Organisasjonsnavn { get; set; }

        /// <summary>
        /// Gets or Sets Organisasjonsnummer
        /// </summary>
        [JsonPropertyName("organisasjonsnummer")]
        public string Organisasjonsnummer { get; set; }

        /// <summary>
        /// Used to track the state of Epost
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EpostOption { get; private set; }

        /// <summary>
        /// Gets or Sets Epost
        /// </summary>
        [JsonPropertyName("epost")]
        public string? Epost { get { return this.EpostOption; } set { this.EpostOption = new(value); } }

        /// <summary>
        /// Used to track the state of Nettside
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NettsideOption { get; private set; }

        /// <summary>
        /// Gets or Sets Nettside
        /// </summary>
        [JsonPropertyName("nettside")]
        public string? Nettside { get { return this.NettsideOption; } set { this.NettsideOption = new(value); } }

        /// <summary>
        /// Used to track the state of Styreleder
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Styreleder?> StyrelederOption { get; private set; }

        /// <summary>
        /// Gets or Sets Styreleder
        /// </summary>
        [JsonPropertyName("styreleder")]
        public Styreleder? Styreleder { get { return this.StyrelederOption; } set { this.StyrelederOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Klient {\n");
            sb.Append("  Klienttype: ").Append(Klienttype).Append("\n");
            sb.Append("  Organisasjonsnavn: ").Append(Organisasjonsnavn).Append("\n");
            sb.Append("  Organisasjonsnummer: ").Append(Organisasjonsnummer).Append("\n");
            sb.Append("  Epost: ").Append(Epost).Append("\n");
            sb.Append("  Nettside: ").Append(Nettside).Append("\n");
            sb.Append("  Styreleder: ").Append(Styreleder).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Klient" />
    /// </summary>
    public class KlientJsonConverter : JsonConverter<Klient>
    {
        /// <summary>
        /// Deserializes json to <see cref="Klient" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Klient Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> klienttype = default;
            Option<string?> organisasjonsnavn = default;
            Option<string?> organisasjonsnummer = default;
            Option<string?> epost = default;
            Option<string?> nettside = default;
            Option<Styreleder?> styreleder = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "klienttype":
                            klienttype = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "organisasjonsnavn":
                            organisasjonsnavn = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "organisasjonsnummer":
                            organisasjonsnummer = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "epost":
                            epost = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "nettside":
                            nettside = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "styreleder":
                            styreleder = new Option<Styreleder?>(JsonSerializer.Deserialize<Styreleder>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!klienttype.IsSet)
                throw new ArgumentException("Property is required for class Klient.", nameof(klienttype));

            if (!organisasjonsnavn.IsSet)
                throw new ArgumentException("Property is required for class Klient.", nameof(organisasjonsnavn));

            if (!organisasjonsnummer.IsSet)
                throw new ArgumentException("Property is required for class Klient.", nameof(organisasjonsnummer));

            if (klienttype.IsSet && klienttype.Value == null)
                throw new ArgumentNullException(nameof(klienttype), "Property is not nullable for class Klient.");

            if (organisasjonsnavn.IsSet && organisasjonsnavn.Value == null)
                throw new ArgumentNullException(nameof(organisasjonsnavn), "Property is not nullable for class Klient.");

            if (organisasjonsnummer.IsSet && organisasjonsnummer.Value == null)
                throw new ArgumentNullException(nameof(organisasjonsnummer), "Property is not nullable for class Klient.");

            if (epost.IsSet && epost.Value == null)
                throw new ArgumentNullException(nameof(epost), "Property is not nullable for class Klient.");

            if (nettside.IsSet && nettside.Value == null)
                throw new ArgumentNullException(nameof(nettside), "Property is not nullable for class Klient.");

            if (styreleder.IsSet && styreleder.Value == null)
                throw new ArgumentNullException(nameof(styreleder), "Property is not nullable for class Klient.");

            return new Klient(klienttype.Value!, organisasjonsnavn.Value!, organisasjonsnummer.Value!, epost, nettside, styreleder);
        }

        /// <summary>
        /// Serializes a <see cref="Klient" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="klient"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Klient klient, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, klient, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Klient" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="klient"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Klient klient, JsonSerializerOptions jsonSerializerOptions)
        {
            if (klient.Klienttype == null)
                throw new ArgumentNullException(nameof(klient.Klienttype), "Property is required for class Klient.");

            if (klient.Organisasjonsnavn == null)
                throw new ArgumentNullException(nameof(klient.Organisasjonsnavn), "Property is required for class Klient.");

            if (klient.Organisasjonsnummer == null)
                throw new ArgumentNullException(nameof(klient.Organisasjonsnummer), "Property is required for class Klient.");

            if (klient.EpostOption.IsSet && klient.Epost == null)
                throw new ArgumentNullException(nameof(klient.Epost), "Property is required for class Klient.");

            if (klient.NettsideOption.IsSet && klient.Nettside == null)
                throw new ArgumentNullException(nameof(klient.Nettside), "Property is required for class Klient.");

            if (klient.StyrelederOption.IsSet && klient.Styreleder == null)
                throw new ArgumentNullException(nameof(klient.Styreleder), "Property is required for class Klient.");

            writer.WriteString("klienttype", klient.Klienttype);

            writer.WriteString("organisasjonsnavn", klient.Organisasjonsnavn);

            writer.WriteString("organisasjonsnummer", klient.Organisasjonsnummer);

            if (klient.EpostOption.IsSet)
                writer.WriteString("epost", klient.Epost);

            if (klient.NettsideOption.IsSet)
                writer.WriteString("nettside", klient.Nettside);

            if (klient.StyrelederOption.IsSet)
            {
                writer.WritePropertyName("styreleder");
                JsonSerializer.Serialize(writer, klient.Styreleder, jsonSerializerOptions);
            }
        }
    }
}
