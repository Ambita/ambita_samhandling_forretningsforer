// <auto-generated>
/*
 * (title)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Samhandling.Client.Samhandling.Client;

namespace Samhandling.Client.Model
{
    /// <summary>
    /// SalgsmeldingForkjopsrett
    /// </summary>
    public partial class SalgsmeldingForkjopsrett : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SalgsmeldingForkjopsrett" /> class.
        /// </summary>
        /// <param name="typeAvklaring">typeAvklaring</param>
        /// <param name="statusForhandsutlysing">statusForhandsutlysing</param>
        /// <param name="utlysingsdato">utlysingsdato</param>
        /// <param name="utlysingssted">utlysingssted</param>
        /// <param name="meldefrist">meldefrist</param>
        [JsonConstructor]
        public SalgsmeldingForkjopsrett(TypeAvklaringEnum typeAvklaring, StatusForhandsutlysingEnum statusForhandsutlysing, string utlysingsdato, string utlysingssted, string meldefrist)
        {
            TypeAvklaring = typeAvklaring;
            StatusForhandsutlysing = statusForhandsutlysing;
            Utlysingsdato = utlysingsdato;
            Utlysingssted = utlysingssted;
            Meldefrist = meldefrist;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines TypeAvklaring
        /// </summary>
        public enum TypeAvklaringEnum
        {
            /// <summary>
            /// Enum Fastpris for value: fastpris
            /// </summary>
            Fastpris = 1,

            /// <summary>
            /// Enum Forhandsutlysing for value: forhandsutlysing
            /// </summary>
            Forhandsutlysing = 2
        }

        /// <summary>
        /// Returns a <see cref="TypeAvklaringEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeAvklaringEnum TypeAvklaringEnumFromString(string value)
        {
            if (value.Equals("fastpris"))
                return TypeAvklaringEnum.Fastpris;

            if (value.Equals("forhandsutlysing"))
                return TypeAvklaringEnum.Forhandsutlysing;

            throw new NotImplementedException($"Could not convert value to type TypeAvklaringEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeAvklaringEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeAvklaringEnum? TypeAvklaringEnumFromStringOrDefault(string value)
        {
            if (value.Equals("fastpris"))
                return TypeAvklaringEnum.Fastpris;

            if (value.Equals("forhandsutlysing"))
                return TypeAvklaringEnum.Forhandsutlysing;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeAvklaringEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeAvklaringEnumToJsonValue(TypeAvklaringEnum value)
        {
            if (value == TypeAvklaringEnum.Fastpris)
                return "fastpris";

            if (value == TypeAvklaringEnum.Forhandsutlysing)
                return "forhandsutlysing";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets TypeAvklaring
        /// </summary>
        [JsonPropertyName("typeAvklaring")]
        public TypeAvklaringEnum TypeAvklaring { get; set; }

        /// <summary>
        /// Defines StatusForhandsutlysing
        /// </summary>
        public enum StatusForhandsutlysingEnum
        {
            /// <summary>
            /// Enum IkkeForhandsutlysing for value: ikke_forhandsutlysing
            /// </summary>
            IkkeForhandsutlysing = 1,

            /// <summary>
            /// Enum MedInteressenter for value: med_interessenter
            /// </summary>
            MedInteressenter = 2,

            /// <summary>
            /// Enum UtenInteressenter for value: uten_interessenter
            /// </summary>
            UtenInteressenter = 3,

            /// <summary>
            /// Enum ForkjopIkkeBenyttet for value: forkjop_ikke_benyttet
            /// </summary>
            ForkjopIkkeBenyttet = 4,

            /// <summary>
            /// Enum IkkeAvklart for value: ikke_avklart
            /// </summary>
            IkkeAvklart = 5
        }

        /// <summary>
        /// Returns a <see cref="StatusForhandsutlysingEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static StatusForhandsutlysingEnum StatusForhandsutlysingEnumFromString(string value)
        {
            if (value.Equals("ikke_forhandsutlysing"))
                return StatusForhandsutlysingEnum.IkkeForhandsutlysing;

            if (value.Equals("med_interessenter"))
                return StatusForhandsutlysingEnum.MedInteressenter;

            if (value.Equals("uten_interessenter"))
                return StatusForhandsutlysingEnum.UtenInteressenter;

            if (value.Equals("forkjop_ikke_benyttet"))
                return StatusForhandsutlysingEnum.ForkjopIkkeBenyttet;

            if (value.Equals("ikke_avklart"))
                return StatusForhandsutlysingEnum.IkkeAvklart;

            throw new NotImplementedException($"Could not convert value to type StatusForhandsutlysingEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="StatusForhandsutlysingEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static StatusForhandsutlysingEnum? StatusForhandsutlysingEnumFromStringOrDefault(string value)
        {
            if (value.Equals("ikke_forhandsutlysing"))
                return StatusForhandsutlysingEnum.IkkeForhandsutlysing;

            if (value.Equals("med_interessenter"))
                return StatusForhandsutlysingEnum.MedInteressenter;

            if (value.Equals("uten_interessenter"))
                return StatusForhandsutlysingEnum.UtenInteressenter;

            if (value.Equals("forkjop_ikke_benyttet"))
                return StatusForhandsutlysingEnum.ForkjopIkkeBenyttet;

            if (value.Equals("ikke_avklart"))
                return StatusForhandsutlysingEnum.IkkeAvklart;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="StatusForhandsutlysingEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string StatusForhandsutlysingEnumToJsonValue(StatusForhandsutlysingEnum value)
        {
            if (value == StatusForhandsutlysingEnum.IkkeForhandsutlysing)
                return "ikke_forhandsutlysing";

            if (value == StatusForhandsutlysingEnum.MedInteressenter)
                return "med_interessenter";

            if (value == StatusForhandsutlysingEnum.UtenInteressenter)
                return "uten_interessenter";

            if (value == StatusForhandsutlysingEnum.ForkjopIkkeBenyttet)
                return "forkjop_ikke_benyttet";

            if (value == StatusForhandsutlysingEnum.IkkeAvklart)
                return "ikke_avklart";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets StatusForhandsutlysing
        /// </summary>
        [JsonPropertyName("statusForhandsutlysing")]
        public StatusForhandsutlysingEnum StatusForhandsutlysing { get; set; }

        /// <summary>
        /// Gets or Sets Utlysingsdato
        /// </summary>
        [JsonPropertyName("utlysingsdato")]
        public string Utlysingsdato { get; set; }

        /// <summary>
        /// Gets or Sets Utlysingssted
        /// </summary>
        [JsonPropertyName("utlysingssted")]
        public string Utlysingssted { get; set; }

        /// <summary>
        /// Gets or Sets Meldefrist
        /// </summary>
        [JsonPropertyName("meldefrist")]
        public string Meldefrist { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SalgsmeldingForkjopsrett {\n");
            sb.Append("  TypeAvklaring: ").Append(TypeAvklaring).Append("\n");
            sb.Append("  StatusForhandsutlysing: ").Append(StatusForhandsutlysing).Append("\n");
            sb.Append("  Utlysingsdato: ").Append(Utlysingsdato).Append("\n");
            sb.Append("  Utlysingssted: ").Append(Utlysingssted).Append("\n");
            sb.Append("  Meldefrist: ").Append(Meldefrist).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.Utlysingsdato != null) {
                // Utlysingsdato (string) pattern
                Regex regexUtlysingsdato = new Regex(@"^[0-9]{4}-[0-9]{2}-[0-9]{2}$", RegexOptions.CultureInvariant);

                if (!regexUtlysingsdato.Match(this.Utlysingsdato).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Utlysingsdato, must match a pattern of " + regexUtlysingsdato, new [] { "Utlysingsdato" });
                }
            }

            if (this.Meldefrist != null) {
                // Meldefrist (string) pattern
                Regex regexMeldefrist = new Regex(@"^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(Z|[+-][0-9]{2}:[0-9]{2})$", RegexOptions.CultureInvariant);

                if (!regexMeldefrist.Match(this.Meldefrist).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Meldefrist, must match a pattern of " + regexMeldefrist, new [] { "Meldefrist" });
                }
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SalgsmeldingForkjopsrett" />
    /// </summary>
    public class SalgsmeldingForkjopsrettJsonConverter : JsonConverter<SalgsmeldingForkjopsrett>
    {
        /// <summary>
        /// Deserializes json to <see cref="SalgsmeldingForkjopsrett" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SalgsmeldingForkjopsrett Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<SalgsmeldingForkjopsrett.TypeAvklaringEnum?> typeAvklaring = default;
            Option<SalgsmeldingForkjopsrett.StatusForhandsutlysingEnum?> statusForhandsutlysing = default;
            Option<string?> utlysingsdato = default;
            Option<string?> utlysingssted = default;
            Option<string?> meldefrist = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "typeAvklaring":
                            string? typeAvklaringRawValue = utf8JsonReader.GetString();
                            if (typeAvklaringRawValue != null)
                                typeAvklaring = new Option<SalgsmeldingForkjopsrett.TypeAvklaringEnum?>(SalgsmeldingForkjopsrett.TypeAvklaringEnumFromStringOrDefault(typeAvklaringRawValue));
                            break;
                        case "statusForhandsutlysing":
                            string? statusForhandsutlysingRawValue = utf8JsonReader.GetString();
                            if (statusForhandsutlysingRawValue != null)
                                statusForhandsutlysing = new Option<SalgsmeldingForkjopsrett.StatusForhandsutlysingEnum?>(SalgsmeldingForkjopsrett.StatusForhandsutlysingEnumFromStringOrDefault(statusForhandsutlysingRawValue));
                            break;
                        case "utlysingsdato":
                            utlysingsdato = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "utlysingssted":
                            utlysingssted = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "meldefrist":
                            meldefrist = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!typeAvklaring.IsSet)
                throw new ArgumentException("Property is required for class SalgsmeldingForkjopsrett.", nameof(typeAvklaring));

            if (!statusForhandsutlysing.IsSet)
                throw new ArgumentException("Property is required for class SalgsmeldingForkjopsrett.", nameof(statusForhandsutlysing));

            if (!utlysingsdato.IsSet)
                throw new ArgumentException("Property is required for class SalgsmeldingForkjopsrett.", nameof(utlysingsdato));

            if (!utlysingssted.IsSet)
                throw new ArgumentException("Property is required for class SalgsmeldingForkjopsrett.", nameof(utlysingssted));

            if (!meldefrist.IsSet)
                throw new ArgumentException("Property is required for class SalgsmeldingForkjopsrett.", nameof(meldefrist));

            if (typeAvklaring.IsSet && typeAvklaring.Value == null)
                throw new ArgumentNullException(nameof(typeAvklaring), "Property is not nullable for class SalgsmeldingForkjopsrett.");

            if (statusForhandsutlysing.IsSet && statusForhandsutlysing.Value == null)
                throw new ArgumentNullException(nameof(statusForhandsutlysing), "Property is not nullable for class SalgsmeldingForkjopsrett.");

            if (utlysingsdato.IsSet && utlysingsdato.Value == null)
                throw new ArgumentNullException(nameof(utlysingsdato), "Property is not nullable for class SalgsmeldingForkjopsrett.");

            if (utlysingssted.IsSet && utlysingssted.Value == null)
                throw new ArgumentNullException(nameof(utlysingssted), "Property is not nullable for class SalgsmeldingForkjopsrett.");

            if (meldefrist.IsSet && meldefrist.Value == null)
                throw new ArgumentNullException(nameof(meldefrist), "Property is not nullable for class SalgsmeldingForkjopsrett.");

            return new SalgsmeldingForkjopsrett(typeAvklaring.Value!.Value!, statusForhandsutlysing.Value!.Value!, utlysingsdato.Value!, utlysingssted.Value!, meldefrist.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="SalgsmeldingForkjopsrett" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="salgsmeldingForkjopsrett"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SalgsmeldingForkjopsrett salgsmeldingForkjopsrett, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, salgsmeldingForkjopsrett, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SalgsmeldingForkjopsrett" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="salgsmeldingForkjopsrett"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SalgsmeldingForkjopsrett salgsmeldingForkjopsrett, JsonSerializerOptions jsonSerializerOptions)
        {
            if (salgsmeldingForkjopsrett.Utlysingsdato == null)
                throw new ArgumentNullException(nameof(salgsmeldingForkjopsrett.Utlysingsdato), "Property is required for class SalgsmeldingForkjopsrett.");

            if (salgsmeldingForkjopsrett.Utlysingssted == null)
                throw new ArgumentNullException(nameof(salgsmeldingForkjopsrett.Utlysingssted), "Property is required for class SalgsmeldingForkjopsrett.");

            if (salgsmeldingForkjopsrett.Meldefrist == null)
                throw new ArgumentNullException(nameof(salgsmeldingForkjopsrett.Meldefrist), "Property is required for class SalgsmeldingForkjopsrett.");

            var typeAvklaringRawValue = SalgsmeldingForkjopsrett.TypeAvklaringEnumToJsonValue(salgsmeldingForkjopsrett.TypeAvklaring);
            writer.WriteString("typeAvklaring", typeAvklaringRawValue);
            var statusForhandsutlysingRawValue = SalgsmeldingForkjopsrett.StatusForhandsutlysingEnumToJsonValue(salgsmeldingForkjopsrett.StatusForhandsutlysing);
            writer.WriteString("statusForhandsutlysing", statusForhandsutlysingRawValue);
            writer.WriteString("utlysingsdato", salgsmeldingForkjopsrett.Utlysingsdato);

            writer.WriteString("utlysingssted", salgsmeldingForkjopsrett.Utlysingssted);

            writer.WriteString("meldefrist", salgsmeldingForkjopsrett.Meldefrist);
        }
    }
}
