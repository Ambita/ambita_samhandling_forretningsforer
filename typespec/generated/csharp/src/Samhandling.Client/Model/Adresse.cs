// <auto-generated>
/*
 * (title)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Samhandling.Client.Samhandling.Client;

namespace Samhandling.Client.Model
{
    /// <summary>
    /// Adresse
    /// </summary>
    public partial class Adresse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Adresse" /> class.
        /// </summary>
        /// <param name="gateadresse">gateadresse</param>
        /// <param name="postnummer">postnummer</param>
        /// <param name="poststed">poststed</param>
        [JsonConstructor]
        public Adresse(string gateadresse, string postnummer, string poststed)
        {
            Gateadresse = gateadresse;
            Postnummer = postnummer;
            Poststed = poststed;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Gateadresse
        /// </summary>
        [JsonPropertyName("gateadresse")]
        public string Gateadresse { get; set; }

        /// <summary>
        /// Gets or Sets Postnummer
        /// </summary>
        [JsonPropertyName("postnummer")]
        public string Postnummer { get; set; }

        /// <summary>
        /// Gets or Sets Poststed
        /// </summary>
        [JsonPropertyName("poststed")]
        public string Poststed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Adresse {\n");
            sb.Append("  Gateadresse: ").Append(Gateadresse).Append("\n");
            sb.Append("  Postnummer: ").Append(Postnummer).Append("\n");
            sb.Append("  Poststed: ").Append(Poststed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Adresse" />
    /// </summary>
    public class AdresseJsonConverter : JsonConverter<Adresse>
    {
        /// <summary>
        /// Deserializes json to <see cref="Adresse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Adresse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> gateadresse = default;
            Option<string?> postnummer = default;
            Option<string?> poststed = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "gateadresse":
                            gateadresse = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "postnummer":
                            postnummer = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "poststed":
                            poststed = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!gateadresse.IsSet)
                throw new ArgumentException("Property is required for class Adresse.", nameof(gateadresse));

            if (!postnummer.IsSet)
                throw new ArgumentException("Property is required for class Adresse.", nameof(postnummer));

            if (!poststed.IsSet)
                throw new ArgumentException("Property is required for class Adresse.", nameof(poststed));

            if (gateadresse.IsSet && gateadresse.Value == null)
                throw new ArgumentNullException(nameof(gateadresse), "Property is not nullable for class Adresse.");

            if (postnummer.IsSet && postnummer.Value == null)
                throw new ArgumentNullException(nameof(postnummer), "Property is not nullable for class Adresse.");

            if (poststed.IsSet && poststed.Value == null)
                throw new ArgumentNullException(nameof(poststed), "Property is not nullable for class Adresse.");

            return new Adresse(gateadresse.Value!, postnummer.Value!, poststed.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="Adresse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="adresse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Adresse adresse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, adresse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Adresse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="adresse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Adresse adresse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (adresse.Gateadresse == null)
                throw new ArgumentNullException(nameof(adresse.Gateadresse), "Property is required for class Adresse.");

            if (adresse.Postnummer == null)
                throw new ArgumentNullException(nameof(adresse.Postnummer), "Property is required for class Adresse.");

            if (adresse.Poststed == null)
                throw new ArgumentNullException(nameof(adresse.Poststed), "Property is required for class Adresse.");

            writer.WriteString("gateadresse", adresse.Gateadresse);

            writer.WriteString("postnummer", adresse.Postnummer);

            writer.WriteString("poststed", adresse.Poststed);
        }
    }
}
