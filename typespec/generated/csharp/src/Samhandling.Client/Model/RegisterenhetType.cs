// <auto-generated>
/*
 * (title)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Samhandling.Client.Samhandling.Client;

namespace Samhandling.Client.Model
{
    /// <summary>
    /// Defines RegisterenhetType
    /// </summary>
    public enum RegisterenhetType
    {
        /// <summary>
        /// Enum Matrikkel for value: matrikkel
        /// </summary>
        Matrikkel = 1,

        /// <summary>
        /// Enum Borettsandel for value: borettsandel
        /// </summary>
        Borettsandel = 2,

        /// <summary>
        /// Enum Aksjeandel for value: aksjeandel
        /// </summary>
        Aksjeandel = 3,

        /// <summary>
        /// Enum Obligasjonsandel for value: obligasjonsandel
        /// </summary>
        Obligasjonsandel = 4
    }

    /// <summary>
    /// Converts <see cref="RegisterenhetType"/> to and from the JSON value
    /// </summary>
    public static class RegisterenhetTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="RegisterenhetType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static RegisterenhetType FromString(string value)
        {
            if (value.Equals("matrikkel"))
                return RegisterenhetType.Matrikkel;

            if (value.Equals("borettsandel"))
                return RegisterenhetType.Borettsandel;

            if (value.Equals("aksjeandel"))
                return RegisterenhetType.Aksjeandel;

            if (value.Equals("obligasjonsandel"))
                return RegisterenhetType.Obligasjonsandel;

            throw new NotImplementedException($"Could not convert value to type RegisterenhetType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="RegisterenhetType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static RegisterenhetType? FromStringOrDefault(string value)
        {
            if (value.Equals("matrikkel"))
                return RegisterenhetType.Matrikkel;

            if (value.Equals("borettsandel"))
                return RegisterenhetType.Borettsandel;

            if (value.Equals("aksjeandel"))
                return RegisterenhetType.Aksjeandel;

            if (value.Equals("obligasjonsandel"))
                return RegisterenhetType.Obligasjonsandel;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="RegisterenhetType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(RegisterenhetType value)
        {
            if (value == RegisterenhetType.Matrikkel)
                return "matrikkel";

            if (value == RegisterenhetType.Borettsandel)
                return "borettsandel";

            if (value == RegisterenhetType.Aksjeandel)
                return "aksjeandel";

            if (value == RegisterenhetType.Obligasjonsandel)
                return "obligasjonsandel";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RegisterenhetType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class RegisterenhetTypeJsonConverter : JsonConverter<RegisterenhetType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override RegisterenhetType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            RegisterenhetType? result = rawValue == null
                ? null
                : RegisterenhetTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the RegisterenhetType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="registerenhetType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, RegisterenhetType registerenhetType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(RegisterenhetTypeValueConverter.ToJsonValue(registerenhetType).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RegisterenhetType"/>
    /// </summary>
    public class RegisterenhetTypeNullableJsonConverter : JsonConverter<RegisterenhetType?>
    {
        /// <summary>
        /// Returns a RegisterenhetType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override RegisterenhetType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            RegisterenhetType? result = rawValue == null
                ? null
                : RegisterenhetTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the RegisterenhetType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="registerenhetType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, RegisterenhetType? registerenhetType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(registerenhetType.HasValue ? RegisterenhetTypeValueConverter.ToJsonValue(registerenhetType.Value).ToString() : "null");
        }
    }
}
