// <auto-generated>
/*
 * (title)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Samhandling.Client.Samhandling.Client;

namespace Samhandling.Client.Model
{
    /// <summary>
    /// Restanse Order and handle arrears - not yet designed
    /// </summary>
    public partial class RestanseOrdre : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RestanseOrdre" /> class.
        /// </summary>
        /// <param name="ordreId">ordreId</param>
        /// <param name="registerenhet">registerenhet</param>
        /// <param name="bestiller">bestiller</param>
        /// <param name="meglerkontor">meglerkontor</param>
        /// <param name="kontaktperson">kontaktperson</param>
        /// <param name="estateId">estateId</param>
        /// <param name="oppdragsnummer">oppdragsnummer</param>
        /// <param name="type">type</param>
        [JsonConstructor]
        public RestanseOrdre(string ordreId, Registerenhet registerenhet, Kontaktinfo bestiller, Meglerkontor meglerkontor, Kontaktinfo kontaktperson, Option<string?> estateId = default, Option<string?> oppdragsnummer = default, TypeEnum type)
        {
            OrdreId = ordreId;
            Registerenhet = registerenhet;
            Bestiller = bestiller;
            Meglerkontor = meglerkontor;
            Kontaktperson = kontaktperson;
            EstateIdOption = estateId;
            OppdragsnummerOption = oppdragsnummer;
            Type = type;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Type
        /// </summary>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Restanse for value: restanse
            /// </summary>
            Restanse = 1
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("restanse"))
                return TypeEnum.Restanse;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("restanse"))
                return TypeEnum.Restanse;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum value)
        {
            if (value == TypeEnum.Restanse)
                return "restanse";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// Gets or Sets OrdreId
        /// </summary>
        [JsonPropertyName("ordreId")]
        public string OrdreId { get; set; }

        /// <summary>
        /// Gets or Sets Registerenhet
        /// </summary>
        [JsonPropertyName("registerenhet")]
        public Registerenhet Registerenhet { get; set; }

        /// <summary>
        /// Gets or Sets Bestiller
        /// </summary>
        [JsonPropertyName("bestiller")]
        public Kontaktinfo Bestiller { get; set; }

        /// <summary>
        /// Gets or Sets Meglerkontor
        /// </summary>
        [JsonPropertyName("meglerkontor")]
        public Meglerkontor Meglerkontor { get; set; }

        /// <summary>
        /// Gets or Sets Kontaktperson
        /// </summary>
        [JsonPropertyName("kontaktperson")]
        public Kontaktinfo Kontaktperson { get; set; }

        /// <summary>
        /// Used to track the state of EstateId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EstateIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets EstateId
        /// </summary>
        [JsonPropertyName("estateId")]
        public string? EstateId { get { return this.EstateIdOption; } set { this.EstateIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Oppdragsnummer
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OppdragsnummerOption { get; private set; }

        /// <summary>
        /// Gets or Sets Oppdragsnummer
        /// </summary>
        [JsonPropertyName("oppdragsnummer")]
        public string? Oppdragsnummer { get { return this.OppdragsnummerOption; } set { this.OppdragsnummerOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RestanseOrdre {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  OrdreId: ").Append(OrdreId).Append("\n");
            sb.Append("  Registerenhet: ").Append(Registerenhet).Append("\n");
            sb.Append("  Bestiller: ").Append(Bestiller).Append("\n");
            sb.Append("  Meglerkontor: ").Append(Meglerkontor).Append("\n");
            sb.Append("  Kontaktperson: ").Append(Kontaktperson).Append("\n");
            sb.Append("  EstateId: ").Append(EstateId).Append("\n");
            sb.Append("  Oppdragsnummer: ").Append(Oppdragsnummer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RestanseOrdre" />
    /// </summary>
    public class RestanseOrdreJsonConverter : JsonConverter<RestanseOrdre>
    {
        /// <summary>
        /// Deserializes json to <see cref="RestanseOrdre" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RestanseOrdre Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> ordreId = default;
            Option<Registerenhet?> registerenhet = default;
            Option<Kontaktinfo?> bestiller = default;
            Option<Meglerkontor?> meglerkontor = default;
            Option<Kontaktinfo?> kontaktperson = default;
            Option<string?> estateId = default;
            Option<string?> oppdragsnummer = default;
            Option<RestanseOrdre.TypeEnum?> type = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "ordreId":
                            ordreId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "registerenhet":
                            registerenhet = new Option<Registerenhet?>(JsonSerializer.Deserialize<Registerenhet>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "bestiller":
                            bestiller = new Option<Kontaktinfo?>(JsonSerializer.Deserialize<Kontaktinfo>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "meglerkontor":
                            meglerkontor = new Option<Meglerkontor?>(JsonSerializer.Deserialize<Meglerkontor>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "kontaktperson":
                            kontaktperson = new Option<Kontaktinfo?>(JsonSerializer.Deserialize<Kontaktinfo>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "estateId":
                            estateId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "oppdragsnummer":
                            oppdragsnummer = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<RestanseOrdre.TypeEnum?>(RestanseOrdre.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!ordreId.IsSet)
                throw new ArgumentException("Property is required for class RestanseOrdre.", nameof(ordreId));

            if (!registerenhet.IsSet)
                throw new ArgumentException("Property is required for class RestanseOrdre.", nameof(registerenhet));

            if (!bestiller.IsSet)
                throw new ArgumentException("Property is required for class RestanseOrdre.", nameof(bestiller));

            if (!meglerkontor.IsSet)
                throw new ArgumentException("Property is required for class RestanseOrdre.", nameof(meglerkontor));

            if (!kontaktperson.IsSet)
                throw new ArgumentException("Property is required for class RestanseOrdre.", nameof(kontaktperson));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class RestanseOrdre.", nameof(type));

            if (ordreId.IsSet && ordreId.Value == null)
                throw new ArgumentNullException(nameof(ordreId), "Property is not nullable for class RestanseOrdre.");

            if (registerenhet.IsSet && registerenhet.Value == null)
                throw new ArgumentNullException(nameof(registerenhet), "Property is not nullable for class RestanseOrdre.");

            if (bestiller.IsSet && bestiller.Value == null)
                throw new ArgumentNullException(nameof(bestiller), "Property is not nullable for class RestanseOrdre.");

            if (meglerkontor.IsSet && meglerkontor.Value == null)
                throw new ArgumentNullException(nameof(meglerkontor), "Property is not nullable for class RestanseOrdre.");

            if (kontaktperson.IsSet && kontaktperson.Value == null)
                throw new ArgumentNullException(nameof(kontaktperson), "Property is not nullable for class RestanseOrdre.");

            if (estateId.IsSet && estateId.Value == null)
                throw new ArgumentNullException(nameof(estateId), "Property is not nullable for class RestanseOrdre.");

            if (oppdragsnummer.IsSet && oppdragsnummer.Value == null)
                throw new ArgumentNullException(nameof(oppdragsnummer), "Property is not nullable for class RestanseOrdre.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class RestanseOrdre.");

            return new RestanseOrdre(ordreId.Value!, registerenhet.Value!, bestiller.Value!, meglerkontor.Value!, kontaktperson.Value!, estateId, oppdragsnummer, type.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="RestanseOrdre" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="restanseOrdre"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RestanseOrdre restanseOrdre, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, restanseOrdre, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="RestanseOrdre" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="restanseOrdre"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, RestanseOrdre restanseOrdre, JsonSerializerOptions jsonSerializerOptions)
        {
            if (restanseOrdre.OrdreId == null)
                throw new ArgumentNullException(nameof(restanseOrdre.OrdreId), "Property is required for class RestanseOrdre.");

            if (restanseOrdre.Registerenhet == null)
                throw new ArgumentNullException(nameof(restanseOrdre.Registerenhet), "Property is required for class RestanseOrdre.");

            if (restanseOrdre.Bestiller == null)
                throw new ArgumentNullException(nameof(restanseOrdre.Bestiller), "Property is required for class RestanseOrdre.");

            if (restanseOrdre.Meglerkontor == null)
                throw new ArgumentNullException(nameof(restanseOrdre.Meglerkontor), "Property is required for class RestanseOrdre.");

            if (restanseOrdre.Kontaktperson == null)
                throw new ArgumentNullException(nameof(restanseOrdre.Kontaktperson), "Property is required for class RestanseOrdre.");

            if (restanseOrdre.EstateIdOption.IsSet && restanseOrdre.EstateId == null)
                throw new ArgumentNullException(nameof(restanseOrdre.EstateId), "Property is required for class RestanseOrdre.");

            if (restanseOrdre.OppdragsnummerOption.IsSet && restanseOrdre.Oppdragsnummer == null)
                throw new ArgumentNullException(nameof(restanseOrdre.Oppdragsnummer), "Property is required for class RestanseOrdre.");

            writer.WriteString("ordreId", restanseOrdre.OrdreId);

            writer.WritePropertyName("registerenhet");
            JsonSerializer.Serialize(writer, restanseOrdre.Registerenhet, jsonSerializerOptions);
            writer.WritePropertyName("bestiller");
            JsonSerializer.Serialize(writer, restanseOrdre.Bestiller, jsonSerializerOptions);
            writer.WritePropertyName("meglerkontor");
            JsonSerializer.Serialize(writer, restanseOrdre.Meglerkontor, jsonSerializerOptions);
            writer.WritePropertyName("kontaktperson");
            JsonSerializer.Serialize(writer, restanseOrdre.Kontaktperson, jsonSerializerOptions);
            if (restanseOrdre.EstateIdOption.IsSet)
                writer.WriteString("estateId", restanseOrdre.EstateId);

            if (restanseOrdre.OppdragsnummerOption.IsSet)
                writer.WriteString("oppdragsnummer", restanseOrdre.Oppdragsnummer);

            var typeRawValue = RestanseOrdre.TypeEnumToJsonValue(restanseOrdre.Type);
            writer.WriteString("type", typeRawValue);
        }
    }
}
