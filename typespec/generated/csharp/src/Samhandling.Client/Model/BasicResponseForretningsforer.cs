// <auto-generated>
/*
 * (title)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Samhandling.Client.Samhandling.Client;

namespace Samhandling.Client.Model
{
    /// <summary>
    /// BasicResponseForretningsforer
    /// </summary>
    public partial class BasicResponseForretningsforer : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BasicResponseForretningsforer" /> class.
        /// </summary>
        /// <param name="navn">navn</param>
        /// <param name="adresse">adresse</param>
        /// <param name="epost">epost</param>
        /// <param name="epostRestanse">epostRestanse</param>
        [JsonConstructor]
        public BasicResponseForretningsforer(string navn, Adresse adresse, string epost, Option<string?> epostRestanse = default)
        {
            Navn = navn;
            Adresse = adresse;
            Epost = epost;
            EpostRestanseOption = epostRestanse;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Navn
        /// </summary>
        [JsonPropertyName("navn")]
        public string Navn { get; set; }

        /// <summary>
        /// Gets or Sets Adresse
        /// </summary>
        [JsonPropertyName("adresse")]
        public Adresse Adresse { get; set; }

        /// <summary>
        /// Gets or Sets Epost
        /// </summary>
        [JsonPropertyName("epost")]
        public string Epost { get; set; }

        /// <summary>
        /// Used to track the state of EpostRestanse
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EpostRestanseOption { get; private set; }

        /// <summary>
        /// Gets or Sets EpostRestanse
        /// </summary>
        [JsonPropertyName("epostRestanse")]
        public string? EpostRestanse { get { return this.EpostRestanseOption; } set { this.EpostRestanseOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BasicResponseForretningsforer {\n");
            sb.Append("  Navn: ").Append(Navn).Append("\n");
            sb.Append("  Adresse: ").Append(Adresse).Append("\n");
            sb.Append("  Epost: ").Append(Epost).Append("\n");
            sb.Append("  EpostRestanse: ").Append(EpostRestanse).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BasicResponseForretningsforer" />
    /// </summary>
    public class BasicResponseForretningsforerJsonConverter : JsonConverter<BasicResponseForretningsforer>
    {
        /// <summary>
        /// Deserializes json to <see cref="BasicResponseForretningsforer" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override BasicResponseForretningsforer Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> navn = default;
            Option<Adresse?> adresse = default;
            Option<string?> epost = default;
            Option<string?> epostRestanse = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "navn":
                            navn = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "adresse":
                            adresse = new Option<Adresse?>(JsonSerializer.Deserialize<Adresse>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "epost":
                            epost = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "epostRestanse":
                            epostRestanse = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!navn.IsSet)
                throw new ArgumentException("Property is required for class BasicResponseForretningsforer.", nameof(navn));

            if (!adresse.IsSet)
                throw new ArgumentException("Property is required for class BasicResponseForretningsforer.", nameof(adresse));

            if (!epost.IsSet)
                throw new ArgumentException("Property is required for class BasicResponseForretningsforer.", nameof(epost));

            if (navn.IsSet && navn.Value == null)
                throw new ArgumentNullException(nameof(navn), "Property is not nullable for class BasicResponseForretningsforer.");

            if (adresse.IsSet && adresse.Value == null)
                throw new ArgumentNullException(nameof(adresse), "Property is not nullable for class BasicResponseForretningsforer.");

            if (epost.IsSet && epost.Value == null)
                throw new ArgumentNullException(nameof(epost), "Property is not nullable for class BasicResponseForretningsforer.");

            if (epostRestanse.IsSet && epostRestanse.Value == null)
                throw new ArgumentNullException(nameof(epostRestanse), "Property is not nullable for class BasicResponseForretningsforer.");

            return new BasicResponseForretningsforer(navn.Value!, adresse.Value!, epost.Value!, epostRestanse);
        }

        /// <summary>
        /// Serializes a <see cref="BasicResponseForretningsforer" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="basicResponseForretningsforer"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, BasicResponseForretningsforer basicResponseForretningsforer, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, basicResponseForretningsforer, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="BasicResponseForretningsforer" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="basicResponseForretningsforer"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, BasicResponseForretningsforer basicResponseForretningsforer, JsonSerializerOptions jsonSerializerOptions)
        {
            if (basicResponseForretningsforer.Navn == null)
                throw new ArgumentNullException(nameof(basicResponseForretningsforer.Navn), "Property is required for class BasicResponseForretningsforer.");

            if (basicResponseForretningsforer.Adresse == null)
                throw new ArgumentNullException(nameof(basicResponseForretningsforer.Adresse), "Property is required for class BasicResponseForretningsforer.");

            if (basicResponseForretningsforer.Epost == null)
                throw new ArgumentNullException(nameof(basicResponseForretningsforer.Epost), "Property is required for class BasicResponseForretningsforer.");

            if (basicResponseForretningsforer.EpostRestanseOption.IsSet && basicResponseForretningsforer.EpostRestanse == null)
                throw new ArgumentNullException(nameof(basicResponseForretningsforer.EpostRestanse), "Property is required for class BasicResponseForretningsforer.");

            writer.WriteString("navn", basicResponseForretningsforer.Navn);

            writer.WritePropertyName("adresse");
            JsonSerializer.Serialize(writer, basicResponseForretningsforer.Adresse, jsonSerializerOptions);
            writer.WriteString("epost", basicResponseForretningsforer.Epost);

            if (basicResponseForretningsforer.EpostRestanseOption.IsSet)
                writer.WriteString("epostRestanse", basicResponseForretningsforer.EpostRestanse);
        }
    }
}
