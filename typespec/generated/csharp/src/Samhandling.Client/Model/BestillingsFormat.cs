// <auto-generated>
/*
 * (title)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Samhandling.Client.Samhandling.Client;

namespace Samhandling.Client.Model
{
    /// <summary>
    /// Defines BestillingsFormat
    /// </summary>
    public enum BestillingsFormat
    {
        /// <summary>
        /// Enum Manuelt for value: Manuelt
        /// </summary>
        Manuelt = 1,

        /// <summary>
        /// Enum Elektronisk for value: Elektronisk
        /// </summary>
        Elektronisk = 2
    }

    /// <summary>
    /// Converts <see cref="BestillingsFormat"/> to and from the JSON value
    /// </summary>
    public static class BestillingsFormatValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="BestillingsFormat"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static BestillingsFormat FromString(string value)
        {
            if (value.Equals("Manuelt"))
                return BestillingsFormat.Manuelt;

            if (value.Equals("Elektronisk"))
                return BestillingsFormat.Elektronisk;

            throw new NotImplementedException($"Could not convert value to type BestillingsFormat: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="BestillingsFormat"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static BestillingsFormat? FromStringOrDefault(string value)
        {
            if (value.Equals("Manuelt"))
                return BestillingsFormat.Manuelt;

            if (value.Equals("Elektronisk"))
                return BestillingsFormat.Elektronisk;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="BestillingsFormat"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(BestillingsFormat value)
        {
            if (value == BestillingsFormat.Manuelt)
                return "Manuelt";

            if (value == BestillingsFormat.Elektronisk)
                return "Elektronisk";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BestillingsFormat"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class BestillingsFormatJsonConverter : JsonConverter<BestillingsFormat>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override BestillingsFormat Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            BestillingsFormat? result = rawValue == null
                ? null
                : BestillingsFormatValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the BestillingsFormat to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="bestillingsFormat"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, BestillingsFormat bestillingsFormat, JsonSerializerOptions options)
        {
            writer.WriteStringValue(BestillingsFormatValueConverter.ToJsonValue(bestillingsFormat).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BestillingsFormat"/>
    /// </summary>
    public class BestillingsFormatNullableJsonConverter : JsonConverter<BestillingsFormat?>
    {
        /// <summary>
        /// Returns a BestillingsFormat from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override BestillingsFormat? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            BestillingsFormat? result = rawValue == null
                ? null
                : BestillingsFormatValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the BestillingsFormat to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="bestillingsFormat"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, BestillingsFormat? bestillingsFormat, JsonSerializerOptions options)
        {
            writer.WriteStringValue(bestillingsFormat.HasValue ? BestillingsFormatValueConverter.ToJsonValue(bestillingsFormat.Value).ToString() : "null");
        }
    }
}
