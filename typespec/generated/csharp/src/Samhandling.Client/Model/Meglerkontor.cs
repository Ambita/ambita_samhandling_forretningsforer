// <auto-generated>
/*
 * (title)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Samhandling.Client.Samhandling.Client;

namespace Samhandling.Client.Model
{
    /// <summary>
    /// Meglerkontor
    /// </summary>
    public partial class Meglerkontor : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Meglerkontor" /> class.
        /// </summary>
        /// <param name="orgnr">orgnr</param>
        /// <param name="avdelingsnr">avdelingsnr</param>
        /// <param name="navn">navn</param>
        /// <param name="adresse">adresse</param>
        /// <param name="telefon">telefon</param>
        [JsonConstructor]
        public Meglerkontor(string orgnr, string avdelingsnr, string navn, Adresse adresse, Option<string?> telefon = default)
        {
            Orgnr = orgnr;
            Avdelingsnr = avdelingsnr;
            Navn = navn;
            Adresse = adresse;
            TelefonOption = telefon;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Orgnr
        /// </summary>
        [JsonPropertyName("orgnr")]
        public string Orgnr { get; set; }

        /// <summary>
        /// Gets or Sets Avdelingsnr
        /// </summary>
        [JsonPropertyName("avdelingsnr")]
        public string Avdelingsnr { get; set; }

        /// <summary>
        /// Gets or Sets Navn
        /// </summary>
        [JsonPropertyName("navn")]
        public string Navn { get; set; }

        /// <summary>
        /// Gets or Sets Adresse
        /// </summary>
        [JsonPropertyName("adresse")]
        public Adresse Adresse { get; set; }

        /// <summary>
        /// Used to track the state of Telefon
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TelefonOption { get; private set; }

        /// <summary>
        /// Gets or Sets Telefon
        /// </summary>
        [JsonPropertyName("telefon")]
        public string? Telefon { get { return this.TelefonOption; } set { this.TelefonOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Meglerkontor {\n");
            sb.Append("  Orgnr: ").Append(Orgnr).Append("\n");
            sb.Append("  Avdelingsnr: ").Append(Avdelingsnr).Append("\n");
            sb.Append("  Navn: ").Append(Navn).Append("\n");
            sb.Append("  Adresse: ").Append(Adresse).Append("\n");
            sb.Append("  Telefon: ").Append(Telefon).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Meglerkontor" />
    /// </summary>
    public class MeglerkontorJsonConverter : JsonConverter<Meglerkontor>
    {
        /// <summary>
        /// Deserializes json to <see cref="Meglerkontor" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Meglerkontor Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> orgnr = default;
            Option<string?> avdelingsnr = default;
            Option<string?> navn = default;
            Option<Adresse?> adresse = default;
            Option<string?> telefon = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "orgnr":
                            orgnr = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "avdelingsnr":
                            avdelingsnr = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "navn":
                            navn = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "adresse":
                            adresse = new Option<Adresse?>(JsonSerializer.Deserialize<Adresse>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "telefon":
                            telefon = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!orgnr.IsSet)
                throw new ArgumentException("Property is required for class Meglerkontor.", nameof(orgnr));

            if (!avdelingsnr.IsSet)
                throw new ArgumentException("Property is required for class Meglerkontor.", nameof(avdelingsnr));

            if (!navn.IsSet)
                throw new ArgumentException("Property is required for class Meglerkontor.", nameof(navn));

            if (!adresse.IsSet)
                throw new ArgumentException("Property is required for class Meglerkontor.", nameof(adresse));

            if (orgnr.IsSet && orgnr.Value == null)
                throw new ArgumentNullException(nameof(orgnr), "Property is not nullable for class Meglerkontor.");

            if (avdelingsnr.IsSet && avdelingsnr.Value == null)
                throw new ArgumentNullException(nameof(avdelingsnr), "Property is not nullable for class Meglerkontor.");

            if (navn.IsSet && navn.Value == null)
                throw new ArgumentNullException(nameof(navn), "Property is not nullable for class Meglerkontor.");

            if (adresse.IsSet && adresse.Value == null)
                throw new ArgumentNullException(nameof(adresse), "Property is not nullable for class Meglerkontor.");

            if (telefon.IsSet && telefon.Value == null)
                throw new ArgumentNullException(nameof(telefon), "Property is not nullable for class Meglerkontor.");

            return new Meglerkontor(orgnr.Value!, avdelingsnr.Value!, navn.Value!, adresse.Value!, telefon);
        }

        /// <summary>
        /// Serializes a <see cref="Meglerkontor" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="meglerkontor"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Meglerkontor meglerkontor, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, meglerkontor, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Meglerkontor" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="meglerkontor"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Meglerkontor meglerkontor, JsonSerializerOptions jsonSerializerOptions)
        {
            if (meglerkontor.Orgnr == null)
                throw new ArgumentNullException(nameof(meglerkontor.Orgnr), "Property is required for class Meglerkontor.");

            if (meglerkontor.Avdelingsnr == null)
                throw new ArgumentNullException(nameof(meglerkontor.Avdelingsnr), "Property is required for class Meglerkontor.");

            if (meglerkontor.Navn == null)
                throw new ArgumentNullException(nameof(meglerkontor.Navn), "Property is required for class Meglerkontor.");

            if (meglerkontor.Adresse == null)
                throw new ArgumentNullException(nameof(meglerkontor.Adresse), "Property is required for class Meglerkontor.");

            if (meglerkontor.TelefonOption.IsSet && meglerkontor.Telefon == null)
                throw new ArgumentNullException(nameof(meglerkontor.Telefon), "Property is required for class Meglerkontor.");

            writer.WriteString("orgnr", meglerkontor.Orgnr);

            writer.WriteString("avdelingsnr", meglerkontor.Avdelingsnr);

            writer.WriteString("navn", meglerkontor.Navn);

            writer.WritePropertyName("adresse");
            JsonSerializer.Serialize(writer, meglerkontor.Adresse, jsonSerializerOptions);
            if (meglerkontor.TelefonOption.IsSet)
                writer.WriteString("telefon", meglerkontor.Telefon);
        }
    }
}
