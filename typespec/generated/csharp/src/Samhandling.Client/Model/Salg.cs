// <auto-generated>
/*
 * (title)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Samhandling.Client.Samhandling.Client;

namespace Samhandling.Client.Model
{
    /// <summary>
    /// Salg
    /// </summary>
    public partial class Salg : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Salg" /> class.
        /// </summary>
        /// <param name="kjopesum">kjopesum</param>
        /// <param name="datoAkseptBud">datoAkseptBud</param>
        /// <param name="datoOverdragelse">datoOverdragelse</param>
        /// <param name="forbeholdBud">forbeholdBud</param>
        [JsonConstructor]
        public Salg(int kjopesum, string datoAkseptBud, string datoOverdragelse, Option<bool?> forbeholdBud = default)
        {
            Kjopesum = kjopesum;
            DatoAkseptBud = datoAkseptBud;
            DatoOverdragelse = datoOverdragelse;
            ForbeholdBudOption = forbeholdBud;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Kjopesum
        /// </summary>
        [JsonPropertyName("kjopesum")]
        public int Kjopesum { get; set; }

        /// <summary>
        /// Gets or Sets DatoAkseptBud
        /// </summary>
        [JsonPropertyName("datoAkseptBud")]
        public string DatoAkseptBud { get; set; }

        /// <summary>
        /// Gets or Sets DatoOverdragelse
        /// </summary>
        [JsonPropertyName("datoOverdragelse")]
        public string DatoOverdragelse { get; set; }

        /// <summary>
        /// Used to track the state of ForbeholdBud
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ForbeholdBudOption { get; private set; }

        /// <summary>
        /// Gets or Sets ForbeholdBud
        /// </summary>
        [JsonPropertyName("forbeholdBud")]
        public bool? ForbeholdBud { get { return this.ForbeholdBudOption; } set { this.ForbeholdBudOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Salg {\n");
            sb.Append("  Kjopesum: ").Append(Kjopesum).Append("\n");
            sb.Append("  DatoAkseptBud: ").Append(DatoAkseptBud).Append("\n");
            sb.Append("  DatoOverdragelse: ").Append(DatoOverdragelse).Append("\n");
            sb.Append("  ForbeholdBud: ").Append(ForbeholdBud).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.DatoAkseptBud != null) {
                // DatoAkseptBud (string) pattern
                Regex regexDatoAkseptBud = new Regex(@"^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(Z|[+-][0-9]{2}:[0-9]{2})$", RegexOptions.CultureInvariant);

                if (!regexDatoAkseptBud.Match(this.DatoAkseptBud).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DatoAkseptBud, must match a pattern of " + regexDatoAkseptBud, new [] { "DatoAkseptBud" });
                }
            }

            if (this.DatoOverdragelse != null) {
                // DatoOverdragelse (string) pattern
                Regex regexDatoOverdragelse = new Regex(@"^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(Z|[+-][0-9]{2}:[0-9]{2})$", RegexOptions.CultureInvariant);

                if (!regexDatoOverdragelse.Match(this.DatoOverdragelse).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DatoOverdragelse, must match a pattern of " + regexDatoOverdragelse, new [] { "DatoOverdragelse" });
                }
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Salg" />
    /// </summary>
    public class SalgJsonConverter : JsonConverter<Salg>
    {
        /// <summary>
        /// Deserializes json to <see cref="Salg" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Salg Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> kjopesum = default;
            Option<string?> datoAkseptBud = default;
            Option<string?> datoOverdragelse = default;
            Option<bool?> forbeholdBud = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "kjopesum":
                            kjopesum = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "datoAkseptBud":
                            datoAkseptBud = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "datoOverdragelse":
                            datoOverdragelse = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "forbeholdBud":
                            forbeholdBud = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!kjopesum.IsSet)
                throw new ArgumentException("Property is required for class Salg.", nameof(kjopesum));

            if (!datoAkseptBud.IsSet)
                throw new ArgumentException("Property is required for class Salg.", nameof(datoAkseptBud));

            if (!datoOverdragelse.IsSet)
                throw new ArgumentException("Property is required for class Salg.", nameof(datoOverdragelse));

            if (kjopesum.IsSet && kjopesum.Value == null)
                throw new ArgumentNullException(nameof(kjopesum), "Property is not nullable for class Salg.");

            if (datoAkseptBud.IsSet && datoAkseptBud.Value == null)
                throw new ArgumentNullException(nameof(datoAkseptBud), "Property is not nullable for class Salg.");

            if (datoOverdragelse.IsSet && datoOverdragelse.Value == null)
                throw new ArgumentNullException(nameof(datoOverdragelse), "Property is not nullable for class Salg.");

            if (forbeholdBud.IsSet && forbeholdBud.Value == null)
                throw new ArgumentNullException(nameof(forbeholdBud), "Property is not nullable for class Salg.");

            return new Salg(kjopesum.Value!.Value!, datoAkseptBud.Value!, datoOverdragelse.Value!, forbeholdBud);
        }

        /// <summary>
        /// Serializes a <see cref="Salg" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="salg"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Salg salg, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, salg, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Salg" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="salg"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Salg salg, JsonSerializerOptions jsonSerializerOptions)
        {
            if (salg.DatoAkseptBud == null)
                throw new ArgumentNullException(nameof(salg.DatoAkseptBud), "Property is required for class Salg.");

            if (salg.DatoOverdragelse == null)
                throw new ArgumentNullException(nameof(salg.DatoOverdragelse), "Property is required for class Salg.");

            writer.WriteNumber("kjopesum", salg.Kjopesum);

            writer.WriteString("datoAkseptBud", salg.DatoAkseptBud);

            writer.WriteString("datoOverdragelse", salg.DatoOverdragelse);

            if (salg.ForbeholdBudOption.IsSet)
                writer.WriteBoolean("forbeholdBud", salg.ForbeholdBudOption.Value!.Value);
        }
    }
}
