// <auto-generated>
/*
 * (title)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Samhandling.Client.Samhandling.Client;

namespace Samhandling.Client.Model
{
    /// <summary>
    /// Defines BestillingsmottakerType
    /// </summary>
    public enum BestillingsmottakerType
    {
        /// <summary>
        /// Enum Forretningsforer for value: forretningsforer
        /// </summary>
        Forretningsforer = 1,

        /// <summary>
        /// Enum Lag for value: lag
        /// </summary>
        Lag = 2
    }

    /// <summary>
    /// Converts <see cref="BestillingsmottakerType"/> to and from the JSON value
    /// </summary>
    public static class BestillingsmottakerTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="BestillingsmottakerType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static BestillingsmottakerType FromString(string value)
        {
            if (value.Equals("forretningsforer"))
                return BestillingsmottakerType.Forretningsforer;

            if (value.Equals("lag"))
                return BestillingsmottakerType.Lag;

            throw new NotImplementedException($"Could not convert value to type BestillingsmottakerType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="BestillingsmottakerType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static BestillingsmottakerType? FromStringOrDefault(string value)
        {
            if (value.Equals("forretningsforer"))
                return BestillingsmottakerType.Forretningsforer;

            if (value.Equals("lag"))
                return BestillingsmottakerType.Lag;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="BestillingsmottakerType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(BestillingsmottakerType value)
        {
            if (value == BestillingsmottakerType.Forretningsforer)
                return "forretningsforer";

            if (value == BestillingsmottakerType.Lag)
                return "lag";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BestillingsmottakerType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class BestillingsmottakerTypeJsonConverter : JsonConverter<BestillingsmottakerType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override BestillingsmottakerType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            BestillingsmottakerType? result = rawValue == null
                ? null
                : BestillingsmottakerTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the BestillingsmottakerType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="bestillingsmottakerType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, BestillingsmottakerType bestillingsmottakerType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(BestillingsmottakerTypeValueConverter.ToJsonValue(bestillingsmottakerType).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BestillingsmottakerType"/>
    /// </summary>
    public class BestillingsmottakerTypeNullableJsonConverter : JsonConverter<BestillingsmottakerType?>
    {
        /// <summary>
        /// Returns a BestillingsmottakerType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override BestillingsmottakerType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            BestillingsmottakerType? result = rawValue == null
                ? null
                : BestillingsmottakerTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the BestillingsmottakerType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="bestillingsmottakerType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, BestillingsmottakerType? bestillingsmottakerType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(bestillingsmottakerType.HasValue ? BestillingsmottakerTypeValueConverter.ToJsonValue(bestillingsmottakerType.Value).ToString() : "null");
        }
    }
}
