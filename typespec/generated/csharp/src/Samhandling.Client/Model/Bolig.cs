// <auto-generated>
/*
 * (title)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Samhandling.Client.Samhandling.Client;

namespace Samhandling.Client.Model
{
    /// <summary>
    /// Bolig
    /// </summary>
    public partial class Bolig : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Bolig" /> class.
        /// </summary>
        /// <param name="prom">prom</param>
        /// <param name="srom">srom</param>
        /// <param name="bra">bra</param>
        /// <param name="braI">braI</param>
        /// <param name="braE">braE</param>
        /// <param name="braB">braB</param>
        /// <param name="braS">braS</param>
        /// <param name="tba">tba</param>
        /// <param name="bta">bta</param>
        /// <param name="antallRom">antallRom</param>
        /// <param name="antallSoverom">antallSoverom</param>
        /// <param name="energibokstav">energibokstav</param>
        /// <param name="energifargekode">energifargekode</param>
        /// <param name="heis">heis</param>
        /// <param name="veranda">veranda</param>
        /// <param name="parkering">parkering</param>
        /// <param name="oppvarming">oppvarming</param>
        /// <param name="adresse">adresse</param>
        /// <param name="leilighetsnummer">leilighetsnummer</param>
        [JsonConstructor]
        public Bolig(Option<int?> prom = default, Option<int?> srom = default, Option<int?> bra = default, Option<int?> braI = default, Option<int?> braE = default, Option<int?> braB = default, Option<int?> braS = default, Option<int?> tba = default, Option<int?> bta = default, Option<int?> antallRom = default, Option<int?> antallSoverom = default, Option<string?> energibokstav = default, Option<string?> energifargekode = default, Option<bool?> heis = default, Option<bool?> veranda = default, Option<string?> parkering = default, Option<string?> oppvarming = default, Option<Adresse?> adresse = default, Option<string?> leilighetsnummer = default)
        {
            PromOption = prom;
            SromOption = srom;
            BraOption = bra;
            BraIOption = braI;
            BraEOption = braE;
            BraBOption = braB;
            BraSOption = braS;
            TbaOption = tba;
            BtaOption = bta;
            AntallRomOption = antallRom;
            AntallSoveromOption = antallSoverom;
            EnergibokstavOption = energibokstav;
            EnergifargekodeOption = energifargekode;
            HeisOption = heis;
            VerandaOption = veranda;
            ParkeringOption = parkering;
            OppvarmingOption = oppvarming;
            AdresseOption = adresse;
            LeilighetsnummerOption = leilighetsnummer;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Prom
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PromOption { get; private set; }

        /// <summary>
        /// Gets or Sets Prom
        /// </summary>
        [JsonPropertyName("prom")]
        public int? Prom { get { return this.PromOption; } set { this.PromOption = new(value); } }

        /// <summary>
        /// Used to track the state of Srom
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SromOption { get; private set; }

        /// <summary>
        /// Gets or Sets Srom
        /// </summary>
        [JsonPropertyName("srom")]
        public int? Srom { get { return this.SromOption; } set { this.SromOption = new(value); } }

        /// <summary>
        /// Used to track the state of Bra
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> BraOption { get; private set; }

        /// <summary>
        /// Gets or Sets Bra
        /// </summary>
        [JsonPropertyName("bra")]
        public int? Bra { get { return this.BraOption; } set { this.BraOption = new(value); } }

        /// <summary>
        /// Used to track the state of BraI
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> BraIOption { get; private set; }

        /// <summary>
        /// Gets or Sets BraI
        /// </summary>
        [JsonPropertyName("braI")]
        public int? BraI { get { return this.BraIOption; } set { this.BraIOption = new(value); } }

        /// <summary>
        /// Used to track the state of BraE
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> BraEOption { get; private set; }

        /// <summary>
        /// Gets or Sets BraE
        /// </summary>
        [JsonPropertyName("braE")]
        public int? BraE { get { return this.BraEOption; } set { this.BraEOption = new(value); } }

        /// <summary>
        /// Used to track the state of BraB
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> BraBOption { get; private set; }

        /// <summary>
        /// Gets or Sets BraB
        /// </summary>
        [JsonPropertyName("braB")]
        public int? BraB { get { return this.BraBOption; } set { this.BraBOption = new(value); } }

        /// <summary>
        /// Used to track the state of BraS
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> BraSOption { get; private set; }

        /// <summary>
        /// Gets or Sets BraS
        /// </summary>
        [JsonPropertyName("braS")]
        public int? BraS { get { return this.BraSOption; } set { this.BraSOption = new(value); } }

        /// <summary>
        /// Used to track the state of Tba
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TbaOption { get; private set; }

        /// <summary>
        /// Gets or Sets Tba
        /// </summary>
        [JsonPropertyName("tba")]
        public int? Tba { get { return this.TbaOption; } set { this.TbaOption = new(value); } }

        /// <summary>
        /// Used to track the state of Bta
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> BtaOption { get; private set; }

        /// <summary>
        /// Gets or Sets Bta
        /// </summary>
        [JsonPropertyName("bta")]
        public int? Bta { get { return this.BtaOption; } set { this.BtaOption = new(value); } }

        /// <summary>
        /// Used to track the state of AntallRom
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> AntallRomOption { get; private set; }

        /// <summary>
        /// Gets or Sets AntallRom
        /// </summary>
        [JsonPropertyName("antallRom")]
        public int? AntallRom { get { return this.AntallRomOption; } set { this.AntallRomOption = new(value); } }

        /// <summary>
        /// Used to track the state of AntallSoverom
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> AntallSoveromOption { get; private set; }

        /// <summary>
        /// Gets or Sets AntallSoverom
        /// </summary>
        [JsonPropertyName("antallSoverom")]
        public int? AntallSoverom { get { return this.AntallSoveromOption; } set { this.AntallSoveromOption = new(value); } }

        /// <summary>
        /// Used to track the state of Energibokstav
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EnergibokstavOption { get; private set; }

        /// <summary>
        /// Gets or Sets Energibokstav
        /// </summary>
        [JsonPropertyName("energibokstav")]
        public string? Energibokstav { get { return this.EnergibokstavOption; } set { this.EnergibokstavOption = new(value); } }

        /// <summary>
        /// Used to track the state of Energifargekode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EnergifargekodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Energifargekode
        /// </summary>
        [JsonPropertyName("energifargekode")]
        public string? Energifargekode { get { return this.EnergifargekodeOption; } set { this.EnergifargekodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Heis
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> HeisOption { get; private set; }

        /// <summary>
        /// Gets or Sets Heis
        /// </summary>
        [JsonPropertyName("heis")]
        public bool? Heis { get { return this.HeisOption; } set { this.HeisOption = new(value); } }

        /// <summary>
        /// Used to track the state of Veranda
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> VerandaOption { get; private set; }

        /// <summary>
        /// Gets or Sets Veranda
        /// </summary>
        [JsonPropertyName("veranda")]
        public bool? Veranda { get { return this.VerandaOption; } set { this.VerandaOption = new(value); } }

        /// <summary>
        /// Used to track the state of Parkering
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ParkeringOption { get; private set; }

        /// <summary>
        /// Gets or Sets Parkering
        /// </summary>
        [JsonPropertyName("parkering")]
        public string? Parkering { get { return this.ParkeringOption; } set { this.ParkeringOption = new(value); } }

        /// <summary>
        /// Used to track the state of Oppvarming
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OppvarmingOption { get; private set; }

        /// <summary>
        /// Gets or Sets Oppvarming
        /// </summary>
        [JsonPropertyName("oppvarming")]
        public string? Oppvarming { get { return this.OppvarmingOption; } set { this.OppvarmingOption = new(value); } }

        /// <summary>
        /// Used to track the state of Adresse
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Adresse?> AdresseOption { get; private set; }

        /// <summary>
        /// Gets or Sets Adresse
        /// </summary>
        [JsonPropertyName("adresse")]
        public Adresse? Adresse { get { return this.AdresseOption; } set { this.AdresseOption = new(value); } }

        /// <summary>
        /// Used to track the state of Leilighetsnummer
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LeilighetsnummerOption { get; private set; }

        /// <summary>
        /// Gets or Sets Leilighetsnummer
        /// </summary>
        [JsonPropertyName("leilighetsnummer")]
        public string? Leilighetsnummer { get { return this.LeilighetsnummerOption; } set { this.LeilighetsnummerOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Bolig {\n");
            sb.Append("  Prom: ").Append(Prom).Append("\n");
            sb.Append("  Srom: ").Append(Srom).Append("\n");
            sb.Append("  Bra: ").Append(Bra).Append("\n");
            sb.Append("  BraI: ").Append(BraI).Append("\n");
            sb.Append("  BraE: ").Append(BraE).Append("\n");
            sb.Append("  BraB: ").Append(BraB).Append("\n");
            sb.Append("  BraS: ").Append(BraS).Append("\n");
            sb.Append("  Tba: ").Append(Tba).Append("\n");
            sb.Append("  Bta: ").Append(Bta).Append("\n");
            sb.Append("  AntallRom: ").Append(AntallRom).Append("\n");
            sb.Append("  AntallSoverom: ").Append(AntallSoverom).Append("\n");
            sb.Append("  Energibokstav: ").Append(Energibokstav).Append("\n");
            sb.Append("  Energifargekode: ").Append(Energifargekode).Append("\n");
            sb.Append("  Heis: ").Append(Heis).Append("\n");
            sb.Append("  Veranda: ").Append(Veranda).Append("\n");
            sb.Append("  Parkering: ").Append(Parkering).Append("\n");
            sb.Append("  Oppvarming: ").Append(Oppvarming).Append("\n");
            sb.Append("  Adresse: ").Append(Adresse).Append("\n");
            sb.Append("  Leilighetsnummer: ").Append(Leilighetsnummer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Bolig" />
    /// </summary>
    public class BoligJsonConverter : JsonConverter<Bolig>
    {
        /// <summary>
        /// Deserializes json to <see cref="Bolig" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Bolig Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> prom = default;
            Option<int?> srom = default;
            Option<int?> bra = default;
            Option<int?> braI = default;
            Option<int?> braE = default;
            Option<int?> braB = default;
            Option<int?> braS = default;
            Option<int?> tba = default;
            Option<int?> bta = default;
            Option<int?> antallRom = default;
            Option<int?> antallSoverom = default;
            Option<string?> energibokstav = default;
            Option<string?> energifargekode = default;
            Option<bool?> heis = default;
            Option<bool?> veranda = default;
            Option<string?> parkering = default;
            Option<string?> oppvarming = default;
            Option<Adresse?> adresse = default;
            Option<string?> leilighetsnummer = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "prom":
                            prom = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "srom":
                            srom = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "bra":
                            bra = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "braI":
                            braI = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "braE":
                            braE = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "braB":
                            braB = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "braS":
                            braS = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "tba":
                            tba = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "bta":
                            bta = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "antallRom":
                            antallRom = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "antallSoverom":
                            antallSoverom = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "energibokstav":
                            energibokstav = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "energifargekode":
                            energifargekode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "heis":
                            heis = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "veranda":
                            veranda = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "parkering":
                            parkering = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "oppvarming":
                            oppvarming = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "adresse":
                            adresse = new Option<Adresse?>(JsonSerializer.Deserialize<Adresse>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "leilighetsnummer":
                            leilighetsnummer = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (prom.IsSet && prom.Value == null)
                throw new ArgumentNullException(nameof(prom), "Property is not nullable for class Bolig.");

            if (srom.IsSet && srom.Value == null)
                throw new ArgumentNullException(nameof(srom), "Property is not nullable for class Bolig.");

            if (bra.IsSet && bra.Value == null)
                throw new ArgumentNullException(nameof(bra), "Property is not nullable for class Bolig.");

            if (braI.IsSet && braI.Value == null)
                throw new ArgumentNullException(nameof(braI), "Property is not nullable for class Bolig.");

            if (braE.IsSet && braE.Value == null)
                throw new ArgumentNullException(nameof(braE), "Property is not nullable for class Bolig.");

            if (braB.IsSet && braB.Value == null)
                throw new ArgumentNullException(nameof(braB), "Property is not nullable for class Bolig.");

            if (braS.IsSet && braS.Value == null)
                throw new ArgumentNullException(nameof(braS), "Property is not nullable for class Bolig.");

            if (tba.IsSet && tba.Value == null)
                throw new ArgumentNullException(nameof(tba), "Property is not nullable for class Bolig.");

            if (bta.IsSet && bta.Value == null)
                throw new ArgumentNullException(nameof(bta), "Property is not nullable for class Bolig.");

            if (antallRom.IsSet && antallRom.Value == null)
                throw new ArgumentNullException(nameof(antallRom), "Property is not nullable for class Bolig.");

            if (antallSoverom.IsSet && antallSoverom.Value == null)
                throw new ArgumentNullException(nameof(antallSoverom), "Property is not nullable for class Bolig.");

            if (energibokstav.IsSet && energibokstav.Value == null)
                throw new ArgumentNullException(nameof(energibokstav), "Property is not nullable for class Bolig.");

            if (energifargekode.IsSet && energifargekode.Value == null)
                throw new ArgumentNullException(nameof(energifargekode), "Property is not nullable for class Bolig.");

            if (heis.IsSet && heis.Value == null)
                throw new ArgumentNullException(nameof(heis), "Property is not nullable for class Bolig.");

            if (veranda.IsSet && veranda.Value == null)
                throw new ArgumentNullException(nameof(veranda), "Property is not nullable for class Bolig.");

            if (parkering.IsSet && parkering.Value == null)
                throw new ArgumentNullException(nameof(parkering), "Property is not nullable for class Bolig.");

            if (oppvarming.IsSet && oppvarming.Value == null)
                throw new ArgumentNullException(nameof(oppvarming), "Property is not nullable for class Bolig.");

            if (adresse.IsSet && adresse.Value == null)
                throw new ArgumentNullException(nameof(adresse), "Property is not nullable for class Bolig.");

            if (leilighetsnummer.IsSet && leilighetsnummer.Value == null)
                throw new ArgumentNullException(nameof(leilighetsnummer), "Property is not nullable for class Bolig.");

            return new Bolig(prom, srom, bra, braI, braE, braB, braS, tba, bta, antallRom, antallSoverom, energibokstav, energifargekode, heis, veranda, parkering, oppvarming, adresse, leilighetsnummer);
        }

        /// <summary>
        /// Serializes a <see cref="Bolig" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="bolig"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Bolig bolig, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, bolig, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Bolig" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="bolig"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Bolig bolig, JsonSerializerOptions jsonSerializerOptions)
        {
            if (bolig.EnergibokstavOption.IsSet && bolig.Energibokstav == null)
                throw new ArgumentNullException(nameof(bolig.Energibokstav), "Property is required for class Bolig.");

            if (bolig.EnergifargekodeOption.IsSet && bolig.Energifargekode == null)
                throw new ArgumentNullException(nameof(bolig.Energifargekode), "Property is required for class Bolig.");

            if (bolig.ParkeringOption.IsSet && bolig.Parkering == null)
                throw new ArgumentNullException(nameof(bolig.Parkering), "Property is required for class Bolig.");

            if (bolig.OppvarmingOption.IsSet && bolig.Oppvarming == null)
                throw new ArgumentNullException(nameof(bolig.Oppvarming), "Property is required for class Bolig.");

            if (bolig.AdresseOption.IsSet && bolig.Adresse == null)
                throw new ArgumentNullException(nameof(bolig.Adresse), "Property is required for class Bolig.");

            if (bolig.LeilighetsnummerOption.IsSet && bolig.Leilighetsnummer == null)
                throw new ArgumentNullException(nameof(bolig.Leilighetsnummer), "Property is required for class Bolig.");

            if (bolig.PromOption.IsSet)
                writer.WriteNumber("prom", bolig.PromOption.Value!.Value);

            if (bolig.SromOption.IsSet)
                writer.WriteNumber("srom", bolig.SromOption.Value!.Value);

            if (bolig.BraOption.IsSet)
                writer.WriteNumber("bra", bolig.BraOption.Value!.Value);

            if (bolig.BraIOption.IsSet)
                writer.WriteNumber("braI", bolig.BraIOption.Value!.Value);

            if (bolig.BraEOption.IsSet)
                writer.WriteNumber("braE", bolig.BraEOption.Value!.Value);

            if (bolig.BraBOption.IsSet)
                writer.WriteNumber("braB", bolig.BraBOption.Value!.Value);

            if (bolig.BraSOption.IsSet)
                writer.WriteNumber("braS", bolig.BraSOption.Value!.Value);

            if (bolig.TbaOption.IsSet)
                writer.WriteNumber("tba", bolig.TbaOption.Value!.Value);

            if (bolig.BtaOption.IsSet)
                writer.WriteNumber("bta", bolig.BtaOption.Value!.Value);

            if (bolig.AntallRomOption.IsSet)
                writer.WriteNumber("antallRom", bolig.AntallRomOption.Value!.Value);

            if (bolig.AntallSoveromOption.IsSet)
                writer.WriteNumber("antallSoverom", bolig.AntallSoveromOption.Value!.Value);

            if (bolig.EnergibokstavOption.IsSet)
                writer.WriteString("energibokstav", bolig.Energibokstav);

            if (bolig.EnergifargekodeOption.IsSet)
                writer.WriteString("energifargekode", bolig.Energifargekode);

            if (bolig.HeisOption.IsSet)
                writer.WriteBoolean("heis", bolig.HeisOption.Value!.Value);

            if (bolig.VerandaOption.IsSet)
                writer.WriteBoolean("veranda", bolig.VerandaOption.Value!.Value);

            if (bolig.ParkeringOption.IsSet)
                writer.WriteString("parkering", bolig.Parkering);

            if (bolig.OppvarmingOption.IsSet)
                writer.WriteString("oppvarming", bolig.Oppvarming);

            if (bolig.AdresseOption.IsSet)
            {
                writer.WritePropertyName("adresse");
                JsonSerializer.Serialize(writer, bolig.Adresse, jsonSerializerOptions);
            }
            if (bolig.LeilighetsnummerOption.IsSet)
                writer.WriteString("leilighetsnummer", bolig.Leilighetsnummer);
        }
    }
}
