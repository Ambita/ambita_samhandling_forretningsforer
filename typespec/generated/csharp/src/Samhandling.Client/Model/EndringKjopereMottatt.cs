// <auto-generated>
/*
 * (title)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Samhandling.Client.Samhandling.Client;

namespace Samhandling.Client.Model
{
    /// <summary>
    /// EierskifteMottatt optional - to be used if updates trigger new board approval
    /// </summary>
    public partial class EndringKjopereMottatt : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EndringKjopereMottatt" /> class.
        /// </summary>
        /// <param name="type">type</param>
        /// <param name="ordreId">ordreId</param>
        /// <param name="forretningsforer">forretningsforer</param>
        /// <param name="klient">klient</param>
        /// <param name="levert">levert</param>
        /// <param name="referanse">referanse</param>
        /// <param name="eierform">eierform</param>
        /// <param name="ordreMottatt">ordreMottatt</param>
        /// <param name="styregodkjenningPakrevd">styregodkjenningPakrevd</param>
        /// <param name="styregodkjenning">styregodkjenning</param>
        [JsonConstructor]
        public EndringKjopereMottatt(TypeEnum type, string ordreId, BasicResponseForretningsforer forretningsforer, Option<Klient?> klient = default, Option<string?> levert = default, Option<string?> referanse = default, Option<EierformEnum?> eierform = default, string ordreMottatt, bool styregodkjenningPakrevd, Option<Styregodkjenning?> styregodkjenning = default)
        {
            Type = type;
            OrdreId = ordreId;
            Forretningsforer = forretningsforer;
            KlientOption = klient;
            LevertOption = levert;
            ReferanseOption = referanse;
            EierformOption = eierform;
            OrdreMottatt = ordreMottatt;
            StyregodkjenningPakrevd = styregodkjenningPakrevd;
            StyregodkjenningOption = styregodkjenning;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Type
        /// </summary>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Endringkjoperemottatt for value: endringkjoperemottatt
            /// </summary>
            Endringkjoperemottatt = 1
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("endringkjoperemottatt"))
                return TypeEnum.Endringkjoperemottatt;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("endringkjoperemottatt"))
                return TypeEnum.Endringkjoperemottatt;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum value)
        {
            if (value == TypeEnum.Endringkjoperemottatt)
                return "endringkjoperemottatt";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// Defines Eierform
        /// </summary>
        public enum EierformEnum
        {
            /// <summary>
            /// Enum Aksjonr for value: Aksjon책r
            /// </summary>
            Aksjonr = 1,

            /// <summary>
            /// Enum Andelseier for value: Andelseier
            /// </summary>
            Andelseier = 2,

            /// <summary>
            /// Enum Sameier for value: Sameier
            /// </summary>
            Sameier = 3,

            /// <summary>
            /// Enum Seksjonseier for value: Seksjonseier
            /// </summary>
            Seksjonseier = 4
        }

        /// <summary>
        /// Returns a <see cref="EierformEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static EierformEnum EierformEnumFromString(string value)
        {
            if (value.Equals("Aksjon책r"))
                return EierformEnum.Aksjonr;

            if (value.Equals("Andelseier"))
                return EierformEnum.Andelseier;

            if (value.Equals("Sameier"))
                return EierformEnum.Sameier;

            if (value.Equals("Seksjonseier"))
                return EierformEnum.Seksjonseier;

            throw new NotImplementedException($"Could not convert value to type EierformEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="EierformEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static EierformEnum? EierformEnumFromStringOrDefault(string value)
        {
            if (value.Equals("Aksjon책r"))
                return EierformEnum.Aksjonr;

            if (value.Equals("Andelseier"))
                return EierformEnum.Andelseier;

            if (value.Equals("Sameier"))
                return EierformEnum.Sameier;

            if (value.Equals("Seksjonseier"))
                return EierformEnum.Seksjonseier;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="EierformEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string EierformEnumToJsonValue(EierformEnum? value)
        {
            if (value == EierformEnum.Aksjonr)
                return "Aksjon책r";

            if (value == EierformEnum.Andelseier)
                return "Andelseier";

            if (value == EierformEnum.Sameier)
                return "Sameier";

            if (value == EierformEnum.Seksjonseier)
                return "Seksjonseier";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Eierform
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EierformEnum?> EierformOption { get; private set; }

        /// <summary>
        /// Gets or Sets Eierform
        /// </summary>
        [JsonPropertyName("eierform")]
        public EierformEnum? Eierform { get { return this.EierformOption; } set { this.EierformOption = new(value); } }

        /// <summary>
        /// Gets or Sets OrdreId
        /// </summary>
        [JsonPropertyName("ordreId")]
        public string OrdreId { get; set; }

        /// <summary>
        /// Gets or Sets Forretningsforer
        /// </summary>
        [JsonPropertyName("forretningsforer")]
        public BasicResponseForretningsforer Forretningsforer { get; set; }

        /// <summary>
        /// Used to track the state of Klient
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Klient?> KlientOption { get; private set; }

        /// <summary>
        /// Gets or Sets Klient
        /// </summary>
        [JsonPropertyName("klient")]
        public Klient? Klient { get { return this.KlientOption; } set { this.KlientOption = new(value); } }

        /// <summary>
        /// Used to track the state of Levert
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LevertOption { get; private set; }

        /// <summary>
        /// Gets or Sets Levert
        /// </summary>
        [JsonPropertyName("levert")]
        public string? Levert { get { return this.LevertOption; } set { this.LevertOption = new(value); } }

        /// <summary>
        /// Used to track the state of Referanse
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ReferanseOption { get; private set; }

        /// <summary>
        /// Gets or Sets Referanse
        /// </summary>
        [JsonPropertyName("referanse")]
        public string? Referanse { get { return this.ReferanseOption; } set { this.ReferanseOption = new(value); } }

        /// <summary>
        /// Gets or Sets OrdreMottatt
        /// </summary>
        [JsonPropertyName("ordreMottatt")]
        public string OrdreMottatt { get; set; }

        /// <summary>
        /// Gets or Sets StyregodkjenningPakrevd
        /// </summary>
        [JsonPropertyName("styregodkjenningPakrevd")]
        public bool StyregodkjenningPakrevd { get; set; }

        /// <summary>
        /// Used to track the state of Styregodkjenning
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Styregodkjenning?> StyregodkjenningOption { get; private set; }

        /// <summary>
        /// Gets or Sets Styregodkjenning
        /// </summary>
        [JsonPropertyName("styregodkjenning")]
        public Styregodkjenning? Styregodkjenning { get { return this.StyregodkjenningOption; } set { this.StyregodkjenningOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EndringKjopereMottatt {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  OrdreMottatt: ").Append(OrdreMottatt).Append("\n");
            sb.Append("  StyregodkjenningPakrevd: ").Append(StyregodkjenningPakrevd).Append("\n");
            sb.Append("  OrdreId: ").Append(OrdreId).Append("\n");
            sb.Append("  Forretningsforer: ").Append(Forretningsforer).Append("\n");
            sb.Append("  Styregodkjenning: ").Append(Styregodkjenning).Append("\n");
            sb.Append("  Klient: ").Append(Klient).Append("\n");
            sb.Append("  Levert: ").Append(Levert).Append("\n");
            sb.Append("  Referanse: ").Append(Referanse).Append("\n");
            sb.Append("  Eierform: ").Append(Eierform).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.OrdreMottatt != null) {
                // OrdreMottatt (string) pattern
                Regex regexOrdreMottatt = new Regex(@"^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(Z|[+-][0-9]{2}:[0-9]{2})$", RegexOptions.CultureInvariant);

                if (!regexOrdreMottatt.Match(this.OrdreMottatt).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OrdreMottatt, must match a pattern of " + regexOrdreMottatt, new [] { "OrdreMottatt" });
                }
            }

            if (this.LevertOption.Value != null) {
                // Levert (string) pattern
                Regex regexLevert = new Regex(@"^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(Z|[+-][0-9]{2}:[0-9]{2})$", RegexOptions.CultureInvariant);

                if (this.LevertOption.Value != null &&!regexLevert.Match(this.LevertOption.Value).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Levert, must match a pattern of " + regexLevert, new [] { "Levert" });
                }
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EndringKjopereMottatt" />
    /// </summary>
    public class EndringKjopereMottattJsonConverter : JsonConverter<EndringKjopereMottatt>
    {
        /// <summary>
        /// Deserializes json to <see cref="EndringKjopereMottatt" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EndringKjopereMottatt Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<EndringKjopereMottatt.TypeEnum?> type = default;
            Option<string?> ordreId = default;
            Option<BasicResponseForretningsforer?> forretningsforer = default;
            Option<Klient?> klient = default;
            Option<string?> levert = default;
            Option<string?> referanse = default;
            Option<EndringKjopereMottatt.EierformEnum?> eierform = default;
            Option<string?> ordreMottatt = default;
            Option<bool?> styregodkjenningPakrevd = default;
            Option<Styregodkjenning?> styregodkjenning = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<EndringKjopereMottatt.TypeEnum?>(EndringKjopereMottatt.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        case "ordreId":
                            ordreId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "forretningsforer":
                            forretningsforer = new Option<BasicResponseForretningsforer?>(JsonSerializer.Deserialize<BasicResponseForretningsforer>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "klient":
                            klient = new Option<Klient?>(JsonSerializer.Deserialize<Klient>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "levert":
                            levert = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "referanse":
                            referanse = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "eierform":
                            string? eierformRawValue = utf8JsonReader.GetString();
                            if (eierformRawValue != null)
                                eierform = new Option<EndringKjopereMottatt.EierformEnum?>(EndringKjopereMottatt.EierformEnumFromStringOrDefault(eierformRawValue));
                            break;
                        case "ordreMottatt":
                            ordreMottatt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "styregodkjenningPakrevd":
                            styregodkjenningPakrevd = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "styregodkjenning":
                            styregodkjenning = new Option<Styregodkjenning?>(JsonSerializer.Deserialize<Styregodkjenning>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class EndringKjopereMottatt.", nameof(type));

            if (!ordreId.IsSet)
                throw new ArgumentException("Property is required for class EndringKjopereMottatt.", nameof(ordreId));

            if (!forretningsforer.IsSet)
                throw new ArgumentException("Property is required for class EndringKjopereMottatt.", nameof(forretningsforer));

            if (!ordreMottatt.IsSet)
                throw new ArgumentException("Property is required for class EndringKjopereMottatt.", nameof(ordreMottatt));

            if (!styregodkjenningPakrevd.IsSet)
                throw new ArgumentException("Property is required for class EndringKjopereMottatt.", nameof(styregodkjenningPakrevd));

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class EndringKjopereMottatt.");

            if (ordreId.IsSet && ordreId.Value == null)
                throw new ArgumentNullException(nameof(ordreId), "Property is not nullable for class EndringKjopereMottatt.");

            if (forretningsforer.IsSet && forretningsforer.Value == null)
                throw new ArgumentNullException(nameof(forretningsforer), "Property is not nullable for class EndringKjopereMottatt.");

            if (klient.IsSet && klient.Value == null)
                throw new ArgumentNullException(nameof(klient), "Property is not nullable for class EndringKjopereMottatt.");

            if (levert.IsSet && levert.Value == null)
                throw new ArgumentNullException(nameof(levert), "Property is not nullable for class EndringKjopereMottatt.");

            if (referanse.IsSet && referanse.Value == null)
                throw new ArgumentNullException(nameof(referanse), "Property is not nullable for class EndringKjopereMottatt.");

            if (eierform.IsSet && eierform.Value == null)
                throw new ArgumentNullException(nameof(eierform), "Property is not nullable for class EndringKjopereMottatt.");

            if (ordreMottatt.IsSet && ordreMottatt.Value == null)
                throw new ArgumentNullException(nameof(ordreMottatt), "Property is not nullable for class EndringKjopereMottatt.");

            if (styregodkjenningPakrevd.IsSet && styregodkjenningPakrevd.Value == null)
                throw new ArgumentNullException(nameof(styregodkjenningPakrevd), "Property is not nullable for class EndringKjopereMottatt.");

            if (styregodkjenning.IsSet && styregodkjenning.Value == null)
                throw new ArgumentNullException(nameof(styregodkjenning), "Property is not nullable for class EndringKjopereMottatt.");

            return new EndringKjopereMottatt(type.Value!.Value!, ordreId.Value!, forretningsforer.Value!, klient, levert, referanse, eierform, ordreMottatt.Value!, styregodkjenningPakrevd.Value!.Value!, styregodkjenning);
        }

        /// <summary>
        /// Serializes a <see cref="EndringKjopereMottatt" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="endringKjopereMottatt"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EndringKjopereMottatt endringKjopereMottatt, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, endringKjopereMottatt, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EndringKjopereMottatt" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="endringKjopereMottatt"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EndringKjopereMottatt endringKjopereMottatt, JsonSerializerOptions jsonSerializerOptions)
        {
            if (endringKjopereMottatt.OrdreId == null)
                throw new ArgumentNullException(nameof(endringKjopereMottatt.OrdreId), "Property is required for class EndringKjopereMottatt.");

            if (endringKjopereMottatt.Forretningsforer == null)
                throw new ArgumentNullException(nameof(endringKjopereMottatt.Forretningsforer), "Property is required for class EndringKjopereMottatt.");

            if (endringKjopereMottatt.KlientOption.IsSet && endringKjopereMottatt.Klient == null)
                throw new ArgumentNullException(nameof(endringKjopereMottatt.Klient), "Property is required for class EndringKjopereMottatt.");

            if (endringKjopereMottatt.LevertOption.IsSet && endringKjopereMottatt.Levert == null)
                throw new ArgumentNullException(nameof(endringKjopereMottatt.Levert), "Property is required for class EndringKjopereMottatt.");

            if (endringKjopereMottatt.ReferanseOption.IsSet && endringKjopereMottatt.Referanse == null)
                throw new ArgumentNullException(nameof(endringKjopereMottatt.Referanse), "Property is required for class EndringKjopereMottatt.");

            if (endringKjopereMottatt.OrdreMottatt == null)
                throw new ArgumentNullException(nameof(endringKjopereMottatt.OrdreMottatt), "Property is required for class EndringKjopereMottatt.");

            if (endringKjopereMottatt.StyregodkjenningOption.IsSet && endringKjopereMottatt.Styregodkjenning == null)
                throw new ArgumentNullException(nameof(endringKjopereMottatt.Styregodkjenning), "Property is required for class EndringKjopereMottatt.");

            var typeRawValue = EndringKjopereMottatt.TypeEnumToJsonValue(endringKjopereMottatt.Type);
            writer.WriteString("type", typeRawValue);
            writer.WriteString("ordreId", endringKjopereMottatt.OrdreId);

            writer.WritePropertyName("forretningsforer");
            JsonSerializer.Serialize(writer, endringKjopereMottatt.Forretningsforer, jsonSerializerOptions);
            if (endringKjopereMottatt.KlientOption.IsSet)
            {
                writer.WritePropertyName("klient");
                JsonSerializer.Serialize(writer, endringKjopereMottatt.Klient, jsonSerializerOptions);
            }
            if (endringKjopereMottatt.LevertOption.IsSet)
                writer.WriteString("levert", endringKjopereMottatt.Levert);

            if (endringKjopereMottatt.ReferanseOption.IsSet)
                writer.WriteString("referanse", endringKjopereMottatt.Referanse);

            var eierformRawValue = EndringKjopereMottatt.EierformEnumToJsonValue(endringKjopereMottatt.EierformOption.Value!.Value);
            writer.WriteString("eierform", eierformRawValue);
            writer.WriteString("ordreMottatt", endringKjopereMottatt.OrdreMottatt);

            writer.WriteBoolean("styregodkjenningPakrevd", endringKjopereMottatt.StyregodkjenningPakrevd);

            if (endringKjopereMottatt.StyregodkjenningOption.IsSet)
            {
                writer.WritePropertyName("styregodkjenning");
                JsonSerializer.Serialize(writer, endringKjopereMottatt.Styregodkjenning, jsonSerializerOptions);
            }
        }
    }
}
